NODE PROGRAMMING GUIDE

A new node class should inherit from Node or a subclass of Node.

Requirements for the new node class __init__ method:

   Call the base node class __init__ method

   Declare classes of events for input and output with call to:
      self.addEventOutput(event.AnotherEventClass)
      self.addEventInput(event.SomeEventClass, self.someHandler)
           Note that addEventInput takes an additional argument.  This is
           a method which should be called to handle events of this type.
           The method should take one argument:  the event instance.


Generating and Handling Events

   Incoming events are handled by registering a callback method as
   described above.   Events are generated by creating an instance
   of an event class and then calling self.outputEvent(eventinstance)

   Events can be confirmed in order to verify they have been received
   and processed by nodes who are confingured to receive the event.
   If a node needs to confirm that an event has been processed it may call
   self.confirmEvent(eventinstance) and a confirmation will be made.
   A node that wishes to wait until an event has been confirmed may
   call self.outputEvent(eventinstance, 1) which will block until the
   confirmation has been received.

Data Production, Pushing, and Pulling

   Built-in methods for data handling:

      self.publish(datainstance, eventclass=event.PublishEvent)
            An event of type eventclass is automatically generated after
            the datainstance is published.  The datainstance does not
            leave the node.  It is only available for other nodes
            to pull if they request it.

      self.publishRemote(nodeid, datainstance)
            Publishes datainstance on another node.  In this case, data
            is actually pushed to another node.

      self.unpublish(dataid, eventclass=event.UnpublishEvent)
            Unpublishes the data refered to by dataid and generates
            the specified event.  The data will no longer be available on
            this node.

      self.researchByDataID(dataid)
            Attempt to retreive data referenced by dataid.  This 
            automatically determines where to get the data by 
            asking the manager.


Optional User Interface Server Definition

   Every node has a built-in user interface server that allows interface
   clients to connect over XML-RPC.  The server is independent of any
   user interface client implementation (Tk and other GUIs, command line 
   interfaces, etc.) and only implements what content is available to 
   the client.

   The Node class has the built-in method defineUserInterface.  The base 
   Node class calls this method automatically in __init__, so the new 
   subclass does not need to call it.  When overriding this method,
   be sure to call the base class defineUserInterface first.
   A Node subclasses may override defineUserInterface to export any of
   its methods to a user interface.  A method is exported as follows:
      self.registerUIFunction(func, argspec, alias)
            func is any callable object (usually self.SomeMethod)
            argspec should be an array of structs, for example:
            (
              {'name':'mynum', 'alias':'Mynum', 'type':'integer', 'default':1},
              {'name':'mystr', 'alias':'Xyz', 'type':'string', 'default':'hello'},
              {'name':'selection', 'alias':'AAA', 'type':('red','green','blue')}
            )
           - name is currently ignored and therefore argspec must be
             properly ordered for positional arguments
           - arg types are found in interface.xmlrpctypes and this 
            can also be set to sequence for an enumeration type.
          - alias is the alias that should be used by the UI
            (defaults to __name__)
          - default is the default value for the argument

User Interface Clients
   User Interface Clients may query the User Interface Server and
   dynamically create a user interface.  The client must know the 
   'UI port' of the node, which is part of the node's location.  The 
   UI port is the XML-RPC port to which the client must connect.
   The following methods are available by default in every UI Server:

      methods()
         takes no arguments and returns a description of node specific
	 methods that are available as XML-RPC calls.
	 The return value is a XML-RPC struct type which includes two
	 parts:
	    'list':  an array containing the names of the methods
	    'dict':  A struct giving a full description of the methods

	   here is a summary of the struct:
                       
             struct (
                'list': array(method1string, method2string,...)
	        'dict': struct (
	               method1string: struct (
		               'argspec':  array (
                                              struct (
                                                   'alias':  aliasstring1
                                                   'name':  namestring1
                                                   'type':  xmlrpctype1
                                                     )
                                              struct (
                                                   'alias':  aliasstring2
                                                   'name':  namestring2
                                                   'type':  xmlrpctype2
                                                     )
                                                 )
                                              struct (
                                                    ...
                                                     )
                                             )
	               method2string: struct (
		             'argspec':  ...
                                             )
		             )
             )

      id()
         takes no arguments and returns the ID of the node
         a node ID is an array of values.  These values can be integers,
         strings, and possibly other types.


## defines the Event and EventHandler classes

import leginonobject
import data

class Event(data.Data):
	def __init__(self, content=None):
		data.Data.__init__(self, content)


## Standard Event Types:
##
## Event
##	NodeReadyEvent
##		LauncherReadyEvent
##	PublishEvent
##	ControlEvent
##		NumericControlEvent
##		LaunchEvent
##
##

### generated by a node to notify manager that node is ready
class NodeReadyEvent(Event):
	'Event sent by a node to the manager to indicate a successful init'
	def __init__(self):
		Event.__init__(self, content=None)

class LauncherReadyEvent(NodeReadyEvent):
	'Event sent by a node to the manager to indicate a successful init'
	def __init__(self):
		NodeReadyEvent.__init__(self)

class PublishEvent(Event):
	'Event indicating data was published'
	def __init__(self, dataid):
		Event.__init__(self, content=dataid)


class ControlEvent(Event):
	'Event that passes a value with it'
	def __init__(self, content):
		Event.__init__(self, content)


class NumericControlEvent(ControlEvent):
	'ControlEvent that allows only numeric values to be passed'
	def __init__(self, content):
		allowedtypes = (int, long, float)
		if type(content) in allowedtypes:
			ControlEvent.__init__(self, content)
		else:
			raise TypeError('NumericControlEvent content type must be in %s' % allowedtypes)


class LaunchEvent(ControlEvent):
	'ControlEvent sent to a NodeLauncher specifying a node to launch'
	#def __init__(self, nodeid, nodeclass, newproc=0):
	def __init__(self, newproc, targetclass, args=(), kwargs={}):
		nodeinfo = {'newproc':newproc,'targetclass':targetclass, 'args':args, 'kwargs':kwargs}
		Event.__init__(self, content=nodeinfo)



###########################################################
## event related exceptions

class InvalidEventError(TypeError):
	pass


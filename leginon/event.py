## defines the Event and EventHandler classes

import leginonobject
import data

def eventClasses():
	"""
	returns a dict:   {name: class_object, ...}
	that contains all the Event subclasses defined in this module
	"""
	eventclasses = {}
	all_attrs = globals()
	for name,value in all_attrs.items():
		if type(value) == type:
			if issubclass(value, Event):
				eventclasses[name] = value
	return eventclasses

class Event(data.Data):
	def __init__(self, id, content=None, confirm=False):
		data.Data.__init__(self, id, content)
		self.confirm = confirm


## Standard Event Types:
##
##	Event
##		NotificationEvent
##			NodeAvailableEvent
##				LauncherAvailableEvent
##			NodeUnavailableEvent
##			PublishEvent
##			UnpublishEvent
##			ListPublishEvent
##			ConfirmationEvent
##		ControlEvent
##			StartEvent
##			Stopvent
##			KillEvent
##			PauseEvent
##			ResumeEvent
##			NumericControlEvent
##			LaunchEvent
##			LockEvent
##			UnlockEvent

### generated by a node to notify manager that node is ready
class NotificationEvent(Event):
	'Event sent by for notification'
	def __init__(self, id, content, confirm=False):
		Event.__init__(self, id, content, confirm)

class NodeAvailableEvent(NotificationEvent):
	'Event sent by a node to the manager to indicate that it is accessible'
	def __init__(self, id, nodelocation, confirm=False):
		NotificationEvent.__init__(self, id, nodelocation, confirm)

class LauncherAvailableEvent(NodeAvailableEvent):
	'Event sent by a launcher to the manager to indicate that it is accessible'
	def __init__(self, id, nodelocation, confirm=False):
		NodeAvailableEvent.__init__(self, id, nodelocation, confirm)

class NodeUnavailableEvent(NotificationEvent):
	'Event sent by a node to the manager to indicate that it is inaccessible'
	def __init__(self, id, confirm=False):
		NotificationEvent.__init__(self, id, None, confirm)

class PublishEvent(NotificationEvent):
	'Event indicating data was published'
	def __init__(self, id, dataid, confirm=False):
		NotificationEvent.__init__(self, id, dataid, confirm)

class UnpublishEvent(NotificationEvent):
	'Event indicating data was unpublished (deleted)'
	def __init__(self, id, dataid, confirm=False):
		NotificationEvent.__init__(self, id, dataid, confirm)

class PublishImageEvent(NotificationEvent):
	'Event indicating image was published'
	def __init__(self, id, dataid, confirm=False):
		NotificationEvent.__init__(self, id, dataid, confirm)

class ConfirmationEvent(NotificationEvent):
	'Event sent to confirm event processing'
	def __init__(self, id, eventid, confirm=False):
		Event.__init__(self, id, eventid, confirm)

# this could be a subclass of publish event, but I'm not sure if that
# would confuse those not looking for a list
class ListPublishEvent(Event):
	'Event indicating data was published'
	def __init__(self, id, idlist, confirm=False):
		if type(idlist) == list:
			Event.__init__(self, id, idlist, confirm)
		else:
			raise TypeError

class ControlEvent(Event):
	'Event that passes a value with it'
	def __init__(self, id, content=None, confirm=False):
		Event.__init__(self, id, content, confirm)

class StartEvent(ControlEvent):
	'Event that signals a start'
	def __init__(self, id, confirm=False):
		ControlEvent.__init__(self, id, confirm)
	
class StopEvent(ControlEvent):
	'Event that signals a stop'
	def __init__(self, id, confirm=False):
		ControlEvent.__init__(self, id, confirm)

class KillEvent(ControlEvent):
	'Event that signals a kill'
	def __init__(self, id, confirm=False):
		ControlEvent.__init__(self, id, confirm)

class PauseEvent(ControlEvent):
	'Event that signals a pause'
	def __init__(self, id, confirm=False):
		ControlEvent.__init__(self, id, confirm)
	
class ResumeEvent(ControlEvent):
	'Event that signals a resume'
	def __init__(self, id, confirm=False):
		ControlEvent.__init__(self, id, confirm)

class NumericControlEvent(ControlEvent):
	'ControlEvent that allows only numeric values to be passed'
	def __init__(self, id, content, confirm=False):
		allowedtypes = (int, long, float)
		if type(content) in allowedtypes:
			ControlEvent.__init__(self, id, content, confirm)
		else:
			raise TypeError('NumericControlEvent content type must be in %s' % allowedtypes)

class LaunchEvent(ControlEvent):
	'ControlEvent sent to a NodeLauncher specifying a node to launch'
	def __init__(self, id, newproc, targetclass, args=(), kwargs={}, confirm=False):
		nodeinfo = {'newproc':newproc,'targetclass':targetclass, 'args':args, 'kwargs':kwargs}
		Event.__init__(self, id, nodeinfo, confirm)

class LockEvent(ControlEvent):
	'Event that signals a lock'
	def __init__(self, id, confirm=False):
		ControlEvent.__init__(self, id, confirm)
	
class UnlockEvent(ControlEvent):
	'Event that signals an unlock'
	def __init__(self, id, confirm=False):
		ControlEvent.__init__(self, id, confirm)
	
###########################################################
## event related exceptions

class InvalidEventError(TypeError):
	pass


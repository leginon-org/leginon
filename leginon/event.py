## defines the Event and EventHandler classes

import leginonobject
import data

### False is not defined in early python 2.2
False = 0
True = 1

def eventClasses():
	"""
	returns a dict:   {name: class_object, ...}
	that contains all the Event subclasses defined in this module
	"""
	eventclasses = {}
	all_attrs = globals()
	for name,value in all_attrs.items():
		if type(value) == type:
			if issubclass(value, Event):
				eventclasses[name] = value
	return eventclasses

class Event(data.Data):
	def typemap(cls):
		t = data.Data.typemap()
		t += [ ('confirm', int), ('content', object)]
		return t
	typemap = classmethod(typemap)

class OLDEvent(data.Data):
	def __init__(self, id, content=None, confirm=False):
		data.Data.__init__(self, id, content)
		self.confirm = confirm


## Standard Event Types:
##
##	Event
##		NotificationEvent
##			NodeAvailableEvent
##				LauncherAvailableEvent
##			NodeUnavailableEvent
##			PublishEvent
##			UnpublishEvent
##			ListPublishEvent
##			ConfirmationEvent
##		ControlEvent
##			StartEvent
##			Stopvent
##			KillEvent
##			PauseEvent
##			ResumeEvent
##			NumericControlEvent
##			LaunchEvent
##			LockEvent
##			UnlockEvent

### generated by a node to notify manager that node is ready
class NotificationEvent(Event):
	'Event sent for notification'
	pass

## I'm definietely not sure about this one
class NodeAvailableEvent(NotificationEvent):
	'Event sent by a node to the manager to indicate that it is accessible'
	def typemap(cls):
		t = NotificationEvent.typemap()
		t += [ ('location', dict), ('nodeclass', object)]
		return t
	typemap = classmethod(typemap)

class NodeUnavailableEvent(NotificationEvent):
	'Event sent by a node to the manager to indicate that it is inaccessible'
	pass

class NodeInitializedEvent(NotificationEvent):
	'Event sent by a node to indicate that it is operational'
	pass

class NodeUninitializedEvent(NotificationEvent):
	'Event sent by a node to indicate that it is no longer operational'
	pass

class PublishEvent(NotificationEvent):
	'Event indicating data was published'
	def typemap(cls):
		t = NotificationEvent.typemap()
		t += [ ('dataid', int), ]
		return t
	typemap = classmethod(typemap)

class UnpublishEvent(NotificationEvent):
	'Event indicating data was unpublished (deleted)'
	def typemap(cls):
		t = NotificationEvent.typemap()
		t += [ ('dataid', int), ]
		return t
	typemap = classmethod(typemap)

class ConfirmationEvent(NotificationEvent):
	'Event sent to confirm event processing'
	def typemap(cls):
		t = NotificationEvent.typemap()
		t += [ ('eventid', int), ]
		return t
	typemap = classmethod(typemap)

# this could be a subclass of publish event, but I'm not sure if that
# would confuse those not looking for a list
class ListPublishEvent(Event):
	'Event indicating data was published'
	def typemap(cls):
		t = Event.typemap()
		t += [ ('idlist', list), ]
		return t
	typemap = classmethod(typemap)

class NodeClassesPublishEvent(PublishEvent):
	'Event indicating launcher published new list of node classes'
	pass

class CalibrationPublishEvent(PublishEvent):
	'Event indicating calibration was published'
	pass

class PresetPublishEvent(PublishEvent):
	'Event indicating preset was published'
	pass

class CorrelationPublishEvent(PublishEvent):
	'Event indicating cross correlation was published'
	pass

class ImagePublishEvent(PublishEvent):
	'Event indicating image was published'
	pass

class CameraImagePublishEvent(ImagePublishEvent):
	'Event indicating camera image was published'
	pass

class CorrectionImagePublishEvent(CameraImagePublishEvent):
	pass

class TileImagePublishEvent(CameraImagePublishEvent):
	'Event indicating image tile was published'
	pass

class MosaicImagePublishEvent(CameraImagePublishEvent):
	'Event indicating mosaic image was published'
	pass

class DarkImagePublishEvent(CorrectionImagePublishEvent):
	pass

class BrightImagePublishEvent(CorrectionImagePublishEvent):
	pass

class CorrelationImagePublishEvent(ImagePublishEvent):
	pass

class CrossCorrelationImagePublishEvent(CorrelationImagePublishEvent):
	pass

class PhaseCorrelationImagePublishEvent(CorrelationImagePublishEvent):
	pass

class StateMosaicPublishEvent(PublishEvent):
	'Event indicating state mosaic data was published'
	pass

class ControlEvent(Event):
	'Event that passes a value with it'
	pass

class KillEvent(ControlEvent):
	'Event that signals a kill'
	def __init__(self, id, confirm=False):
		ControlEvent.__init__(self, id)

class LaunchEvent(ControlEvent):
	'ControlEvent sent to a NodeLauncher specifying a node to launch'
	def typemap(cls):
		t = ControlEvent.typemap()
		t += [
			('newproc', int),
			('targetclass', object),
			('args', tuple),
			('kwargs', dict)
		]
		return t
	typemap = classmethod(typemap)

class UpdateNodeClassesEvent(ControlEvent):
	'ControlEvent sent to a launcher telling it to update node classes'
	pass

class LockEvent(ControlEvent):
	'Event that signals a lock'
	pass
	
class UnlockEvent(ControlEvent):
	'Event that signals an unlock'
	pass

class ImageClickEvent(Event):
	def __init__(self, id, content, confirm=False):
		Event.__init__(self, id, dict(content), confirm)

class ImageAcquireEvent(Event):
	pass
	
class ImageTargetPublishEvent(PublishEvent):
	pass

class ImageTargetListPublishEvent(PublishEvent):
	pass
	

###########################################################
###########################################################
## event related exceptions

class InvalidEventError(TypeError):
	pass


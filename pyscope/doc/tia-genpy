# -*- coding: mbcs -*-
# Created by makepy.py version 0.4.95
# By python version 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)]
# From type library 'ESVision.tlb'
# On Tue Dec 11 12:27:09 2007
"""ES Vision 3.0 Type Library"""
makepy_version = '0.4.95'
python_version = 0x20501f0

import win32com.client.CLSIDToClass, pythoncom
import win32com.client.util
from pywintypes import IID
from win32com.client import Dispatch

# The following 3 lines may need tweaking for the particular server
# Candidates are pythoncom.Missing, .Empty and .ArgNotFound
defaultNamedOptArg=pythoncom.Empty
defaultNamedNotOptArg=pythoncom.Empty
defaultUnnamedArg=pythoncom.Empty

CLSID = IID('{A95A2BC4-B871-11D1-887C-00A0241857FD}')
MajorVersion = 1
MinorVersion = 0
LibraryFlags = 8
LCID = 0x0

class constants:
	esDataProcAutoCorrelate       =0x1a       # from enum ESProcessingToolBarBtn
	esDataProcBackground          =0x1b       # from enum ESProcessingToolBarBtn
	esDataProcDivide              =0x17       # from enum ESProcessingToolBarBtn
	esDataProcFFT                 =0xf        # from enum ESProcessingToolBarBtn
	esDataProcFlipHorz            =0x11       # from enum ESProcessingToolBarBtn
	esDataProcFlipVert            =0x12       # from enum ESProcessingToolBarBtn
	esDataProcIFT                 =0x10       # from enum ESProcessingToolBarBtn
	esDataProcLineProfile         =0xe        # from enum ESProcessingToolBarBtn
	esDataProcLog                 =0x19       # from enum ESProcessingToolBarBtn
	esDataProcMathSetup           =0x18       # from enum ESProcessingToolBarBtn
	esDataProcMultiply            =0x16       # from enum ESProcessingToolBarBtn
	esDataProcRotAvg              =0x1c       # from enum ESProcessingToolBarBtn
	esDataProcRotate              =0x13       # from enum ESProcessingToolBarBtn
	esDataProcSelection           =0xd        # from enum ESProcessingToolBarBtn
	esDataProcSubtract            =0x15       # from enum ESProcessingToolBarBtn
	esDataProcSum                 =0x14       # from enum ESProcessingToolBarBtn
	esProcEdxAutomap              =0x6        # from enum ESProcessingToolBarBtn
	esProcEdxBkgCorrection        =0x2        # from enum ESProcessingToolBarBtn
	esProcEdxClearQuant           =0x5        # from enum ESProcessingToolBarBtn
	esProcEdxGenMap               =0x7        # from enum ESProcessingToolBarBtn
	esProcEdxPeak                 =0x1        # from enum ESProcessingToolBarBtn
	esProcEdxPeakFit              =0x3        # from enum ESProcessingToolBarBtn
	esProcEdxQuantify             =0x4        # from enum ESProcessingToolBarBtn
	esProcEdxSetupQuant           =0x0        # from enum ESProcessingToolBarBtn
	esProcEelsAnalyze             =0xa        # from enum ESProcessingToolBarBtn
	esProcEelsAutomap             =0xb        # from enum ESProcessingToolBarBtn
	esProcEelsGenMap              =0xc        # from enum ESProcessingToolBarBtn
	esProcEelsQuantify            =0x9        # from enum ESProcessingToolBarBtn
	esProcEelsSetupQuant          =0x8        # from enum ESProcessingToolBarBtn
	esProcNone                    =0x1d       # from enum ESProcessingToolBarBtn
	esEntireHistogram             =0x0        # from enum EsAutoScaleMode
	esRightHistogram              =0x1        # from enum EsAutoScaleMode
	esAutoScaleAll                =0x2        # from enum EsAutoScaleType
	esAutoScaleHorizontal         =0x0        # from enum EsAutoScaleType
	esAutoScaleNone               =0x3        # from enum EsAutoScaleType
	esAutoScaleVertical           =0x1        # from enum EsAutoScaleType
	es_PolynomialModel            =0x0        # from enum EsBackgroundModel
	es_PowerLawModel              =0x1        # from enum EsBackgroundModel
	es_ModelOrder1                =0x0        # from enum EsBackgroundModelOrder
	es_ModelOrder2                =0x1        # from enum EsBackgroundModelOrder
	es_ModelOrder3                =0x2        # from enum EsBackgroundModelOrder
	es_ModelOrder4                =0x3        # from enum EsBackgroundModelOrder
	es_ModelOrder5                =0x4        # from enum EsBackgroundModelOrder
	es_AddLink                    =0x0        # from enum EsBinaryProcessingLink
	es_CrossCorrelation           =0x4        # from enum EsBinaryProcessingLink
	es_DivideLink                 =0x3        # from enum EsBinaryProcessingLink
	es_MultiplyLink               =0x2        # from enum EsBinaryProcessingLink
	es_SubtractLink               =0x1        # from enum EsBinaryProcessingLink
	esBelowScreen                 =0x1        # from enum EsCameraLocation
	esGif                         =0x2        # from enum EsCameraLocation
	esWideAngle                   =0x0        # from enum EsCameraLocation
	esClipMax                     =0x0        # from enum EsClipType
	esClipMin                     =0x1        # from enum EsClipType
	esAmplitude                   =0x1        # from enum EsComplexConversion
	esComplex                     =0x0        # from enum EsComplexConversion
	esImag                        =0x4        # from enum EsComplexConversion
	esPhase                       =0x2        # from enum EsComplexConversion
	esReal                        =0x3        # from enum EsComplexConversion
	esNearAxis                    =0x1        # from enum EsDetectorPosition
	esOffAxis                     =0x0        # from enum EsDetectorPosition
	esOnAxis                      =0x2        # from enum EsDetectorPosition
	esDirectionX                  =0x0        # from enum EsDirection
	esDirectionY                  =0x1        # from enum EsDirection
	esAdminDirectory              =0x1        # from enum EsDirectory
	esTempDirectory               =0x2        # from enum EsDirectory
	esUserDirectory               =0x0        # from enum EsDirectory
	esBeamPositionMarker          =0x2        # from enum EsDisplayObjectType
	esEnergyMarker                =0xb        # from enum EsDisplayObjectType
	esEnergyWindow                =0xc        # from enum EsDisplayObjectType
	esImage                       =0x0        # from enum EsDisplayObjectType
	esImagePositionMarker         =0x1        # from enum EsDisplayObjectType
	esImageSelection              =0x5        # from enum EsDisplayObjectType
	esLineMarker                  =0x6        # from enum EsDisplayObjectType
	esOvalMarker                  =0x3        # from enum EsDisplayObjectType
	esProfile                     =0x7        # from enum EsDisplayObjectType
	esProfileMarker               =0x8        # from enum EsDisplayObjectType
	esProfileSelection            =0x9        # from enum EsDisplayObjectType
	esSpectrum                    =0xa        # from enum EsDisplayObjectType
	esTextMarker                  =0x4        # from enum EsDisplayObjectType
	esEdxSpectrumDisplayType      =0x2        # from enum EsDisplaySubType
	esImageDisplayType            =0x0        # from enum EsDisplaySubType
	esPeelsSpectrumDisplayType    =0x3        # from enum EsDisplaySubType
	esProfileDisplayType          =0x4        # from enum EsDisplaySubType
	esRecImageDisplayType         =0x1        # from enum EsDisplaySubType
	esRecProfileDisplayType       =0x5        # from enum EsDisplaySubType
	esImageDisplay                =0x0        # from enum EsDisplayType
	esProfileDisplay              =0x1        # from enum EsDisplayType
	esSpectrumDisplay             =0x2        # from enum EsDisplayType
	esBottom                      =0x1        # from enum EsDockSite
	esLeft                        =0x2        # from enum EsDockSite
	esRight                       =0x3        # from enum EsDockSite
	esTop                         =0x0        # from enum EsDockSite
	es_FftLogScaling              =0x1        # from enum EsFftScaling
	es_FftNoScaling               =0x0        # from enum EsFftScaling
	esHanningWindow               =0x1        # from enum EsFftWindow
	esNoFftWindow                 =0x0        # from enum EsFftWindow
	es_FftHanningWindow           =0x1        # from enum EsFftWindowType
	es_FftNoWindow                =0x0        # from enum EsFftWindowType
	esEELSIcon                    =0x1        # from enum EsGridIcon
	esGenericIcon                 =0x0        # from enum EsGridIcon
	esGridAll                     =0x3        # from enum EsGridStyle
	esGridHorizontal              =0x1        # from enum EsGridStyle
	esGridNone                    =0x0        # from enum EsGridStyle
	esGridVertical                =0x2        # from enum EsGridStyle
	esCCD                         =0x0        # from enum EsHardwareType
	esEdx                         =0x3        # from enum EsHardwareType
	esPeels                       =0x4        # from enum EsHardwareType
	esScanning                    =0x2        # from enum EsHardwareType
	esVideo                       =0x1        # from enum EsHardwareType
	esLogIntensityScaling         =0x1        # from enum EsImageIntensityScaling
	esNoIntensityScaling          =0x0        # from enum EsImageIntensityScaling
	esContinuousAcquire           =0x0        # from enum EsImagingAcquireMode
	esSingleAcquire               =0x1        # from enum EsImagingAcquireMode
	esBiasAcquisition             =0x1        # from enum EsImagingAcquisitionType
	esGainAcquisition             =0x2        # from enum EsImagingAcquisitionType
	esNormalAcquisition           =0x0        # from enum EsImagingAcquisitionType
	esLog                         =0x1        # from enum EsIntensityScaling
	esNoScaling                   =0x0        # from enum EsIntensityScaling
	esKfamily                     =0x1        # from enum EsKlmEdgeFamily
	esLfamily                     =0x2        # from enum EsKlmEdgeFamily
	esMfamily                     =0x3        # from enum EsKlmEdgeFamily
	esNfamily                     =0x4        # from enum EsKlmEdgeFamily
	esNullFamily                  =0x0        # from enum EsKlmEdgeFamily
	esOfamily                     =0x5        # from enum EsKlmEdgeFamily
	esCenterLineLink              =0x7        # from enum EsLinkType
	esConjugatePositionLink       =0x5        # from enum EsLinkType
	esDataRangeLink               =0x8        # from enum EsLinkType
	esDisplayRangeXLink           =0x0        # from enum EsLinkType
	esDisplayRangeXYLink          =0x2        # from enum EsLinkType
	esDisplayRangeYLink           =0x1        # from enum EsLinkType
	esEndLineLink                 =0x6        # from enum EsLinkType
	esExactPositionLink           =0x3        # from enum EsLinkType
	esRelativePositionLink        =0x4        # from enum EsLinkType
	esDefaultMenu                 =0x0        # from enum EsMenuType
	esDisplayWindowMenu           =0x1        # from enum EsMenuType
	esDiffractionMode             =0x1        # from enum EsMicroscopeMode
	esImagingMode                 =0x0        # from enum EsMicroscopeMode
	esAnalyzeTab                  =0x1        # from enum EsOutputTab
	esLogTab                      =0x0        # from enum EsOutputTab
	esMessageTab                  =0x2        # from enum EsOutputTab
	esCircle                      =0x1        # from enum EsPointType
	esDiamond                     =0x3        # from enum EsPointType
	esSquare                      =0x0        # from enum EsPointType
	esTriangle                    =0x2        # from enum EsPointType
	EsPropertiesTab               =0x0        # from enum EsPropertiesTab
	esMeasurementsTab             =0x1        # from enum EsPropertiesTab
	esRampRadius                  =0x2        # from enum EsRampType
	esRampTheta                   =0x3        # from enum EsRampType
	esRampX                       =0x0        # from enum EsRampType
	esRampY                       =0x1        # from enum EsRampType
	es_RotAvgAutoStepSize         =0x0        # from enum EsRotAvgSamplingMethod
	es_RotAvgManualStepSize       =0x1        # from enum EsRotAvgSamplingMethod
	es_IntensityLink              =0x0        # from enum EsScalarProcessingLink
	es_MaxLink                    =0x5        # from enum EsScalarProcessingLink
	es_MeanLink                   =0x1        # from enum EsScalarProcessingLink
	es_MinLink                    =0x4        # from enum EsScalarProcessingLink
	es_SumLink                    =0x2        # from enum EsScalarProcessingLink
	es_VarianceLink               =0x3        # from enum EsScalarProcessingLink
	esFrameMode                   =0x2        # from enum EsScanMode
	esLineMode                    =0x1        # from enum EsScanMode
	esSpotMode                    =0x0        # from enum EsScanMode
	esAcquireCCDImage             =0xa        # from enum EsShortcutType
	esAcquireEdx                  =0xc        # from enum EsShortcutType
	esAcquireEdxElemImage         =0xe        # from enum EsShortcutType
	esAcquireEdxElemProfile       =0xd        # from enum EsShortcutType
	esAcquireEdxSpecImage         =0x10       # from enum EsShortcutType
	esAcquireEdxSpecProfile       =0xf        # from enum EsShortcutType
	esAcquirePeels                =0x12       # from enum EsShortcutType
	esAcquirePeelsElemImage       =0x14       # from enum EsShortcutType
	esAcquirePeelsElemProfile     =0x13       # from enum EsShortcutType
	esAcquirePeelsSpecImage       =0x16       # from enum EsShortcutType
	esAcquirePeelsSpecProfile     =0x15       # from enum EsShortcutType
	esAcquireScanImage            =0x4        # from enum EsShortcutType
	esAcquireScanProfile          =0x6        # from enum EsShortcutType
	esAcquireVideoImage           =0x8        # from enum EsShortcutType
	esGeneric                     =0x0        # from enum EsShortcutType
	esInvalid                     =0x1        # from enum EsShortcutType
	esPanel                       =0x2        # from enum EsShortcutType
	esViewCCDImage                =0x9        # from enum EsShortcutType
	esViewEdx                     =0xb        # from enum EsShortcutType
	esViewPeels                   =0x11       # from enum EsShortcutType
	esViewScanImage               =0x3        # from enum EsShortcutType
	esViewScanProfile             =0x5        # from enum EsShortcutType
	esViewVideoImage              =0x7        # from enum EsShortcutType
	esAnalogImageSignal           =0x0        # from enum EsSignalType
	esCcdSignal                   =0x6        # from enum EsSignalType
	esEdxLiveTimeSignal           =0x8        # from enum EsSignalType
	esEdxMappingSignal            =0x5        # from enum EsSignalType
	esEdxSignal                   =0x4        # from enum EsSignalType
	esPeelsMappingSignal          =0x3        # from enum EsSignalType
	esPeelsSignal                 =0x2        # from enum EsSignalType
	esPulseImageSignal            =0x1        # from enum EsSignalType
	esVideoSignal                 =0x7        # from enum EsSignalType
	esAddMode                     =0x1        # from enum EsSpectroscopyAcquireMode
	esImmediateMode               =0x0        # from enum EsSpectroscopyAcquireMode
	esSplitBottom                 =0x3        # from enum EsSplitDirection
	esSplitLeft                   =0x1        # from enum EsSplitDirection
	esSplitRight                  =0x0        # from enum EsSplitDirection
	esSplitTop                    =0x2        # from enum EsSplitDirection
	es_AutoCorrelation            =0xc        # from enum EsUnaryProcessingLink
	es_BackgroundLink             =0x6        # from enum EsUnaryProcessingLink
	es_BiasGainLink               =0x7        # from enum EsUnaryProcessingLink
	es_ExtractMapProfileLink      =0x5        # from enum EsUnaryProcessingLink
	es_FftLink                    =0x2        # from enum EsUnaryProcessingLink
	es_FlipHorizontalLink         =0x9        # from enum EsUnaryProcessingLink
	es_FlipVerticalLink           =0xa        # from enum EsUnaryProcessingLink
	es_IfftLink                   =0x3        # from enum EsUnaryProcessingLink
	es_LineProfileLink            =0x1        # from enum EsUnaryProcessingLink
	es_LogLink                    =0xb        # from enum EsUnaryProcessingLink
	es_MaskFilterLink             =0x4        # from enum EsUnaryProcessingLink
	es_RotateLink                 =0x8        # from enum EsUnaryProcessingLink
	es_RotationalAverageLink      =0xd        # from enum EsUnaryProcessingLink
	es_SelectionLink              =0x0        # from enum EsUnaryProcessingLink
	esFree                        =0x7        # from enum EsValueTest
	esMax                         =0x5        # from enum EsValueTest
	esMin                         =0x4        # from enum EsValueTest
	esMinMax                      =0x6        # from enum EsValueTest
	esNegative                    =0x3        # from enum EsValueTest
	esPositive                    =0x2        # from enum EsValueTest
	esZeroOrNegative              =0x1        # from enum EsValueTest
	esZeroOrPositive              =0x0        # from enum EsValueTest

from win32com.client import DispatchBaseClass
class IAcquisitionManager(DispatchBaseClass):
	CLSID = IID('{88ABD2AA-DAAE-11D1-8884-00A0241857FD}')
	coclass_clsid = IID('{88ABD2AC-DAAE-11D1-8884-00A0241857FD}')

	def Acquire(self):
		"""Does one acquisition with the current acqusition setup"""
		return self._oleobj_.InvokeTypes(13, LCID, 1, (24, 0), (),)

	def AcquireSet(self, PositionCollection=defaultNamedNotOptArg, DwellTime=defaultNamedNotOptArg):
		"""Does a set of acquisitions with the current acqusition setup"""
		return self._oleobj_.InvokeTypes(14, LCID, 1, (24, 0), ((13, 0), (5, 0)),PositionCollection
			, DwellTime)

	def AddSetup(self, Name=defaultNamedNotOptArg):
		"""Adds an acquisition setup"""
		return self._oleobj_.InvokeTypes(18, LCID, 1, (24, 0), ((8, 0),),Name
			)

	def CanReset(self):
		"""Queries if acquisition can reset"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (11, 0), (),)

	def CanStart(self):
		"""Queries if acquisition can start"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (11, 0), (),)

	def CanStop(self):
		"""Queries if acquisition can stop"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (11, 0), (),)

	def ClearAcquireAnnotation(self):
		"""Clears acquire annotation"""
		return self._oleobj_.InvokeTypes(30, LCID, 1, (24, 0), (),)

	def CurrentSetup(self):
		"""Returns the name of the current acquisition setup"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(16, LCID, 1, (8, 0), (),)

	def DeleteSetup(self, Name=defaultNamedNotOptArg):
		"""Deletes an acquisition setup"""
		return self._oleobj_.InvokeTypes(34, LCID, 1, (24, 0), ((8, 0),),Name
			)

	def DoesSetupExist(self, Setup=defaultNamedNotOptArg):
		"""Queries if a acquisition setup with the specified name exists"""
		return self._oleobj_.InvokeTypes(19, LCID, 1, (11, 0), ((8, 0),),Setup
			)

	# Result is of type StringCollection
	def EnabledSignalNames(self):
		"""Gets collection of names of all enabled signals"""
		ret = self._oleobj_.InvokeTypes(27, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'EnabledSignalNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsAcquiring(self):
		"""Queries if acquisition is ongoing"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (11, 0), (),)

	def IsAcquisitionHardware(self, HardwareType=defaultNamedNotOptArg):
		"""Queries if hardware of specified type exists"""
		return self._oleobj_.InvokeTypes(33, LCID, 1, (11, 0), ((3, 0),),HardwareType
			)

	def IsCurrentSetup(self):
		"""Queries is a current acquiition setup exists"""
		return self._oleobj_.InvokeTypes(15, LCID, 1, (11, 0), (),)

	def IsSignalLinked(self, SignalName=defaultNamedNotOptArg, DisplayObject=defaultNamedNotOptArg):
		"""Queries if a specified signal is linked to a specified data object"""
		return self._oleobj_.InvokeTypes(22, LCID, 1, (11, 0), ((8, 0), (9, 0)),SignalName
			, DisplayObject)

	def LinkSignal(self, SignalName=defaultNamedNotOptArg, DisplayObject=defaultNamedNotOptArg):
		"""Links a signal to a data object"""
		return self._oleobj_.InvokeTypes(21, LCID, 1, (24, 0), ((8, 0), (9, 0)),SignalName
			, DisplayObject)

	def Pause(self):
		"""Pauses acquisition"""
		return self._oleobj_.InvokeTypes(9, LCID, 1, (24, 0), (),)

	def PauseAsynchronous(self):
		"""Pauses acquisition and returns immediately"""
		return self._oleobj_.InvokeTypes(10, LCID, 1, (24, 0), (),)

	def Reset(self):
		"""Resets acquisition"""
		return self._oleobj_.InvokeTypes(12, LCID, 1, (24, 0), (),)

	def Resume(self):
		"""Resumes paused acquisition"""
		return self._oleobj_.InvokeTypes(11, LCID, 1, (24, 0), (),)

	def SaveHardwareCalibration(self):
		"""Saves the current hardware calibrations"""
		return self._oleobj_.InvokeTypes(35, LCID, 1, (24, 0), (),)

	def SelectSetup(self, Name=defaultNamedNotOptArg):
		"""Selects an acquisition setup with specified name"""
		return self._oleobj_.InvokeTypes(17, LCID, 1, (24, 0), ((8, 0),),Name
			)

	def SetAcquireAnnotation(self, Object1=defaultNamedNotOptArg, Object2=defaultNamedOptArg):
		"""Sets acquire annotation. Use one Range2D or two Position2D objects."""
		return self._oleobj_.InvokeTypes(31, LCID, 1, (24, 0), ((12, 0), (12, 16)),Object1
			, Object2)

	def SetAnnotationDisplay(self, Display=defaultNamedNotOptArg):
		"""Sets the target display for acquisition annotations"""
		return self._oleobj_.InvokeTypes(29, LCID, 1, (24, 0), ((9, 0),),Display
			)

	def SetAutoStart(self, Setup=defaultNamedNotOptArg, State=defaultNamedNotOptArg):
		"""Enables/disables autostart for a specified acquisition setup"""
		return self._oleobj_.InvokeTypes(20, LCID, 1, (24, 0), ((8, 0), (11, 0)),Setup
			, State)

	def SetManualBeamControl(self, State=defaultNamedNotOptArg):
		"""Sets state of manual control of acquire annotation and beam"""
		return self._oleobj_.InvokeTypes(32, LCID, 1, (24, 0), ((11, 0),),State
			)

	# Result is of type StringCollection
	def SignalNames(self):
		"""Gets collection of names of all available signals"""
		ret = self._oleobj_.InvokeTypes(25, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'SignalNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def SignalType(self, SignalName=defaultNamedNotOptArg):
		"""Returns the type of a signal with specified name"""
		return self._oleobj_.InvokeTypes(28, LCID, 1, (3, 0), ((8, 0),),SignalName
			)

	def Start(self):
		"""Starts acquisition"""
		return self._oleobj_.InvokeTypes(6, LCID, 1, (24, 0), (),)

	def Stop(self):
		"""Stops acquisition"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (24, 0), (),)

	def StopAsynchronous(self):
		"""Stops acquisition and returns immediately"""
		return self._oleobj_.InvokeTypes(8, LCID, 1, (24, 0), (),)

	def TimeRemaining(self):
		"""Returns the number of seconds remaining in the current acquisition"""
		return self._oleobj_.InvokeTypes(36, LCID, 1, (5, 0), (),)

	# Result is of type StringCollection
	def TypedSignalNames(self, Type=defaultNamedNotOptArg):
		"""Gets collection of names of all signals with specified type"""
		ret = self._oleobj_.InvokeTypes(26, LCID, 1, (13, 0), ((3, 0),),Type
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'TypedSignalNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def UnlinkAllSignals(self):
		"""Unlinks all signals"""
		return self._oleobj_.InvokeTypes(24, LCID, 1, (24, 0), (),)

	def UnlinkSignal(self, SignalName=defaultNamedNotOptArg):
		"""Unlinks a signal"""
		return self._oleobj_.InvokeTypes(23, LCID, 1, (24, 0), ((8, 0),),SignalName
			)

	_prop_map_get_ = {
		"AutomaticSeriesOnStart": (1, 2, (11, 0), (), "AutomaticSeriesOnStart", None),
	}
	_prop_map_put_ = {
		"AutomaticSeriesOnStart" : ((1, LCID, 4, 0),()),
	}

class IApplication(DispatchBaseClass):
	"""Application dispatch interface"""
	CLSID = IID('{D20B86B9-1214-11D2-AD14-00A0241857FD}')
	coclass_clsid = IID('{D20B86BB-1214-11D2-AD14-00A0241857FD}')

	# Result is of type AcquisitionManager
	def AcquisitionManager(self):
		"""Gets the acquisition manager"""
		ret = self._oleobj_.InvokeTypes(35, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AcquisitionManager', '{88ABD2AC-DAAE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def ActivateDisplayWindow(self, Name=defaultNamedNotOptArg):
		"""Acivates a specified display window"""
		return self._oleobj_.InvokeTypes(34, LCID, 1, (24, 0), ((8, 0),),Name
			)

	def ActivateGrid(self, sTabName=defaultNamedNotOptArg):
		"""Activate or bring forword a specified grid."""
		return self._oleobj_.InvokeTypes(97, LCID, 1, (24, 0), ((8, 0),),sTabName
			)

	# Result is of type DisplayWindow
	def ActiveDisplayWindow(self):
		"""Gets active display window"""
		ret = self._oleobj_.InvokeTypes(33, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'ActiveDisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def AddDisplayWindow(self):
		"""Adds a new display window"""
		ret = self._oleobj_.InvokeTypes(28, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddDisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def AddDynamicGrid(self, sTabName=defaultNamedNotOptArg, pGrid=defaultNamedNotOptArg, Type=defaultNamedNotOptArg, nMaxRows=defaultNamedNotOptArg):
		"""Creates tab in prpoperty window with a specified column information."""
		return self._oleobj_.InvokeTypes(108, LCID, 1, (24, 0), ((8, 0), (9, 0), (3, 0), (3, 0)),sTabName
			, pGrid, Type, nMaxRows)

	def AddGrid(self, sTabName=defaultNamedNotOptArg, pGrid=defaultNamedNotOptArg, Type=defaultNamedNotOptArg):
		"""Creates tab in prpoperty window with a specified column information."""
		return self._oleobj_.InvokeTypes(93, LCID, 1, (24, 0), ((8, 0), (9, 0), (3, 0)),sTabName
			, pGrid, Type)

	# Result is of type AutoIdTable
	def AutoIdTable(self):
		"""Returns the application's AutoIdTable"""
		ret = self._oleobj_.InvokeTypes(81, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AutoIdTable', '{A1E56058-1B75-49A2-8C41-27027A934EEE}', UnicodeToString=0)
		return ret

	# Result is of type BeamControl
	def BeamControl(self):
		"""Gets the beam control interface"""
		ret = self._oleobj_.InvokeTypes(42, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'BeamControl', '{950FC141-DC44-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Calibration1D
	def Calibration1D(self, Offset=defaultNamedNotOptArg, Delta=defaultNamedNotOptArg, CalIndex=0):
		"""Creates a Calibration1D object"""
		ret = self._oleobj_.InvokeTypes(47, LCID, 1, (13, 0), ((5, 0), (5, 0), (3, 48)),Offset
			, Delta, CalIndex)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Calibration1D', '{E1B6CE12-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Calibration2D
	def Calibration2D(self, OffsetX=defaultNamedNotOptArg, OffsetY=defaultNamedNotOptArg, DeltaX=defaultNamedNotOptArg, DeltaY=defaultNamedNotOptArg
			, CalIndexX=0, CalIndexY=0):
		"""Creates a Calibration2D object"""
		ret = self._oleobj_.InvokeTypes(48, LCID, 1, (13, 0), ((5, 0), (5, 0), (5, 0), (5, 0), (3, 48), (3, 48)),OffsetX
			, OffsetY, DeltaX, DeltaY, CalIndexX, CalIndexY
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Calibration2D', '{14180826-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def CanUnlock(self, Key=defaultNamedNotOptArg):
		"""Queries if interface can be unlocked"""
		return self._oleobj_.InvokeTypes(75, LCID, 1, (11, 0), ((3, 0),),Key
			)

	# Result is of type CcdServer
	def CcdServer(self):
		"""Gets the CCD server"""
		ret = self._oleobj_.InvokeTypes(37, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'CcdServer', '{65B16A75-E63E-11D2-AD9E-00A0241857FD}', UnicodeToString=0)
		return ret

	def CloseDisplayWindow(self, Name=defaultNamedNotOptArg):
		"""Closes display window"""
		return self._oleobj_.InvokeTypes(77, LCID, 1, (24, 0), ((8, 0),),Name
			)

	# Result is of type Color
	def Color(self, Red=defaultNamedNotOptArg, Green=defaultNamedNotOptArg, Blue=defaultNamedNotOptArg):
		"""Creates a new color object"""
		ret = self._oleobj_.InvokeTypes(83, LCID, 1, (13, 0), ((2, 0), (2, 0), (2, 0)),Red
			, Green, Blue)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Color', '{9324C861-D521-4FB8-B592-950C55615970}', UnicodeToString=0)
		return ret

	# Result is of type ComplexNumber
	def ComplexNumber(self, Real=0.0, Imag=0.0):
		"""Creates a ComplexNumber object"""
		ret = self._oleobj_.InvokeTypes(49, LCID, 1, (13, 0), ((5, 48), (5, 48)),Real
			, Imag)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'ComplexNumber', '{DB3B5181-0BC2-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type StringCollection
	def ControlBarNames(self):
		"""Gets collection of controlbar names"""
		ret = self._oleobj_.InvokeTypes(15, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'ControlBarNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type CountDialog
	def CountDialog(self, Title=defaultNamedNotOptArg, Prompt=defaultNamedNotOptArg, Count=defaultNamedNotOptArg, Test=7
			, Min=0, Max=0, Unit=''):
		"""Creates dialog for entering integer values"""
		return self._ApplyTypes_(62, 1, (13, 32), ((8, 0), (8, 0), (3, 0), (3, 48), (3, 48), (3, 48), (8, 48)), 'CountDialog', '{285304C9-63C4-11D2-AD39-00A0241857FD}',Title
			, Prompt, Count, Test, Min, Max
			, Unit)

	def CreateInstance(self, ProgId=defaultNamedNotOptArg):
		"""Creates instance of specified component"""
		ret = self._oleobj_.InvokeTypes(70, LCID, 1, (9, 0), ((8, 0),),ProgId
			)
		if ret is not None:
			ret = Dispatch(ret, 'CreateInstance', None, UnicodeToString=0)
		return ret

	def CurrentSecond(self):
		"""Returns the current second on the system"""
		return self._oleobj_.InvokeTypes(54, LCID, 1, (5, 0), (),)

	# Result is of type Data1D
	def Data1D(self, Array=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Creates a new Data1D object"""
		ret = self._oleobj_.InvokeTypes(101, LCID, 1, (13, 0), ((12, 0), (13, 0)),Array
			, Calibration)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Data1D', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Data2D
	def Data2D(self, Array=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Creates a new Data2D object"""
		ret = self._oleobj_.InvokeTypes(102, LCID, 1, (13, 0), ((12, 0), (13, 0)),Array
			, Calibration)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Data2D', '{1418082A-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def DigitalIoServer(self):
		"""Gets the interface to the Digital I/O Server"""
		ret = self._oleobj_.InvokeTypes(90, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'DigitalIoServer', None, UnicodeToString=0)
		return ret

	def Directory(self, Directory=defaultNamedNotOptArg):
		"""Returns full path associated with specified directory type"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(69, LCID, 1, (8, 0), ((3, 0),),Directory
			)

	def DisableEvents(self, DisplayObject=defaultNamedNotOptArg):
		"""Disables firing of events for a specified display object"""
		return self._oleobj_.InvokeTypes(27, LCID, 1, (24, 0), ((9, 0),),DisplayObject
			)

	# Result is of type StringCollection
	def DisplayWindowNames(self):
		"""Gets collection of display window names"""
		ret = self._oleobj_.InvokeTypes(32, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindowNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def DockControlBar(self, Name=defaultNamedNotOptArg, Row=0, Column=0, Site=3
			, SizePercentage=0.0, Size=150):
		"""Docks a controlbar with specified name"""
		return self._oleobj_.InvokeTypes(17, LCID, 1, (24, 0), ((8, 0), (3, 48), (3, 48), (3, 48), (5, 48), (3, 49)),Name
			, Row, Column, Site, SizePercentage, Size
			)

	# Result is of type EelsQuantTable
	def EelsQuantTable(self):
		"""Returns the application's EELS Quant Table"""
		ret = self._oleobj_.InvokeTypes(100, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'EelsQuantTable', '{31091EDA-1A38-484F-97BE-14E4489F1E42}', UnicodeToString=0)
		return ret

	# Result is of type EelsStandardsTable
	def EelsStandardsTable(self):
		"""Returns the application's EelsStandardsTable"""
		ret = self._oleobj_.InvokeTypes(105, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'EelsStandardsTable', '{21E3AC78-349D-497C-AED4-B7177A84B675}', UnicodeToString=0)
		return ret

	def EnableCell(self, sTabName=defaultNamedNotOptArg, nRow=defaultNamedNotOptArg, nCol=defaultNamedNotOptArg, bEnable=defaultNamedNotOptArg):
		"""Enable/Disable a specified grid cell ."""
		return self._oleobj_.InvokeTypes(109, LCID, 1, (24, 0), ((8, 0), (3, 0), (3, 0), (11, 0)),sTabName
			, nRow, nCol, bEnable)

	def EnableEvents(self, DisplayObject=defaultNamedNotOptArg):
		"""Enables firing of events for a specified display object"""
		return self._oleobj_.InvokeTypes(26, LCID, 1, (24, 0), ((9, 0),),DisplayObject
			)

	def ErrorDialog(self, Message=defaultNamedNotOptArg):
		"""Shows a error dialog"""
		return self._oleobj_.InvokeTypes(58, LCID, 1, (24, 0), ((8, 0),),Message
			)

	def Exit(self):
		"""Exits the application"""
		return self._oleobj_.InvokeTypes(25, LCID, 1, (24, 0), (),)

	# Result is of type ControlBar
	def FindControlBar(self, Name=defaultNamedNotOptArg):
		"""Finds a controlbar with specified name"""
		ret = self._oleobj_.InvokeTypes(16, LCID, 1, (13, 0), ((8, 0),),Name
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'FindControlBar', '{88ABD294-DAAE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def FindDisplay(self, Path=defaultNamedNotOptArg):
		"""Finds display with specified path"""
		ret = self._oleobj_.InvokeTypes(30, LCID, 1, (9, 0), ((8, 0),),Path
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindDisplay', None, UnicodeToString=0)
		return ret

	def FindDisplayObject(self, Path=defaultNamedNotOptArg):
		"""Finds display object with specified path"""
		ret = self._oleobj_.InvokeTypes(31, LCID, 1, (9, 0), ((8, 0),),Path
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindDisplayObject', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def FindDisplayWindow(self, Name=defaultNamedNotOptArg):
		"""Finds display window with specified name"""
		ret = self._oleobj_.InvokeTypes(29, LCID, 1, (13, 0), ((8, 0),),Name
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'FindDisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def FloatControlBar(self, Name=defaultNamedNotOptArg, Left=defaultNamedNotOptArg, Top=defaultNamedNotOptArg):
		"""Undocks a controlbar with specified name"""
		return self._oleobj_.InvokeTypes(18, LCID, 1, (24, 0), ((8, 0), (3, 0), (3, 0)),Name
			, Left, Top)

	def GetColumnCount(self, sTabName=defaultNamedNotOptArg):
		"""Gets total number of columns in a specified grid."""
		return self._oleobj_.InvokeTypes(106, LCID, 1, (3, 0), ((8, 0),),sTabName
			)

	def GetComponent(self, ProgId=defaultNamedNotOptArg):
		"""Gets instance of specified component loaded through the user interface"""
		ret = self._oleobj_.InvokeTypes(89, LCID, 1, (9, 0), ((8, 0),),ProgId
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetComponent', None, UnicodeToString=0)
		return ret

	def GetInstance(self, ProgId=defaultNamedNotOptArg):
		"""Gets instance of specified component"""
		ret = self._oleobj_.InvokeTypes(72, LCID, 1, (9, 0), ((8, 0),),ProgId
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetInstance', None, UnicodeToString=0)
		return ret

	def GetInternalComponent(self, ProgId=defaultNamedNotOptArg):
		"""Gets instance of a specified component loaded internally"""
		ret = self._oleobj_.InvokeTypes(88, LCID, 1, (9, 0), ((8, 0),),ProgId
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetInternalComponent', None, UnicodeToString=0)
		return ret

	def GetRowCount(self, sTabName=defaultNamedNotOptArg):
		"""Gets total number of rows in a specified grid."""
		return self._oleobj_.InvokeTypes(107, LCID, 1, (3, 0), ((8, 0),),sTabName
			)

	def GetUuid(self):
		"""Returns a unique identifier."""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(103, LCID, 1, (8, 0), (),)

	# Result is of type Range2D
	def GetWindowPosition(self):
		"""Returns a window position (Left, Top, Right, Bottom)."""
		ret = self._oleobj_.InvokeTypes(104, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetWindowPosition', '{78D416E3-00BF-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type GridDialog
	def GridDialog(self, Title=defaultNamedNotOptArg, Prompt=defaultNamedNotOptArg):
		"""Creates dialog with grid for entering data"""
		ret = self._oleobj_.InvokeTypes(64, LCID, 1, (13, 0), ((8, 0), (8, 0)),Title
			, Prompt)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GridDialog', '{5DEC2CE3-628D-11D2-AD39-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type ImageSimulator
	def ImageSimulator(self):
		"""Gets the image simulator configuration object"""
		ret = self._oleobj_.InvokeTypes(76, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'ImageSimulator', '{65B16A7B-E63E-11D2-AD9E-00A0241857FD}', UnicodeToString=0)
		return ret

	def InfoDialog(self, Message=defaultNamedNotOptArg):
		"""Shows a info dialog"""
		return self._oleobj_.InvokeTypes(59, LCID, 1, (24, 0), ((8, 0),),Message
			)

	def InstallComponent(self, ProgId=defaultNamedNotOptArg):
		"""Installs specified component"""
		return self._oleobj_.InvokeTypes(67, LCID, 1, (11, 0), ((8, 0),),ProgId
			)

	def IsComponentInstalled(self, ProgId=defaultNamedNotOptArg):
		"""Checks if a specified component is installed"""
		return self._oleobj_.InvokeTypes(66, LCID, 1, (11, 0), ((8, 0),),ProgId
			)

	def IsEqual(self, DisplayObject1=defaultNamedNotOptArg, DisplayObject2=defaultNamedNotOptArg):
		"""Compares display objects"""
		return self._oleobj_.InvokeTypes(65, LCID, 1, (11, 0), ((9, 0), (9, 0)),DisplayObject1
			, DisplayObject2)

	def IsGridExists(self, sTabName=defaultNamedNotOptArg):
		"""Returns true if the grid with the specified name already exists."""
		return self._oleobj_.InvokeTypes(98, LCID, 1, (11, 0), ((8, 0),),sTabName
			)

	def IsLayoutWorkspaceExists(self, sWorkspaceName=defaultNamedNotOptArg):
		"""return true if layout workspace of the specified name exists."""
		return self._oleobj_.InvokeTypes(92, LCID, 1, (11, 0), ((8, 0),),sWorkspaceName
			)

	def Lock(self):
		"""Locks interface"""
		return self._oleobj_.InvokeTypes(73, LCID, 1, (3, 0), (),)

	# Result is of type Matrix
	def Matrix(self, XX=1.0, XY=0.0, YX=0.0, YY=1.0):
		"""Creates a Matrix object"""
		ret = self._oleobj_.InvokeTypes(53, LCID, 1, (13, 0), ((5, 48), (5, 48), (5, 48), (5, 48)),XX
			, XY, YX, YY)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Matrix', '{B396F1A3-6430-11D2-AD39-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Menu
	def Menu(self):
		"""Creates a Menu object"""
		ret = self._oleobj_.InvokeTypes(19, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Menu', '{C7FB4FF1-13C5-11D2-AD14-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Microscope
	def Microscope(self):
		"""Gets the microscope interface"""
		ret = self._oleobj_.InvokeTypes(43, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Microscope', '{14180859-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def OpenDisplayWindow(self, FilePath=defaultNamedNotOptArg):
		"""Opens display window with specified full path"""
		ret = self._oleobj_.InvokeTypes(78, LCID, 1, (13, 0), ((8, 0),),FilePath
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'OpenDisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def OpenHelp(self):
		"""Opens the on-line documentation"""
		return self._oleobj_.InvokeTypes(85, LCID, 1, (24, 0), (),)

	def OpenWorkspace(self, Name=defaultNamedNotOptArg):
		"""Opens a workspace by name"""
		return self._oleobj_.InvokeTypes(23, LCID, 1, (11, 0), ((8, 0),),Name
			)

	# Result is of type OutputWindow
	def OutputWindow(self):
		"""Gets output window"""
		ret = self._oleobj_.InvokeTypes(22, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'OutputWindow', '{A24C2A77-DA76-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type PeelsServer
	def PeelsServer(self):
		"""Gets the PEELS server"""
		ret = self._oleobj_.InvokeTypes(40, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'PeelsServer', '{65B16A73-E63E-11D2-AD9E-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Position2D
	def Position2D(self, X=0.0, Y=0.0):
		"""Creates a Position2D object"""
		ret = self._oleobj_.InvokeTypes(44, LCID, 1, (13, 0), ((5, 48), (5, 48)),X
			, Y)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Position2D', '{5E82E162-F3EC-11D1-AD09-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type PositionCollection
	def PositionCollection(self):
		"""Creates a PositionCollection object"""
		ret = self._oleobj_.InvokeTypes(50, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'PositionCollection', '{14180823-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type ProcessingSystem
	def ProcessingSystem(self):
		"""Gets a processing system object"""
		ret = self._oleobj_.InvokeTypes(36, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'ProcessingSystem', '{88ABD2A8-DAAE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type PropertiesWindow
	def PropertiesWindow(self):
		"""Gets properties window"""
		ret = self._oleobj_.InvokeTypes(21, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'PropertiesWindow', '{5576BC1A-5372-11D2-AD27-00A0241857FD}', UnicodeToString=0)
		return ret

	def QuestionDialog(self, Message=defaultNamedNotOptArg):
		"""Shows a question dialog"""
		return self._oleobj_.InvokeTypes(57, LCID, 1, (11, 0), ((8, 0),),Message
			)

	# Result is of type Range1D
	def Range1D(self, Start=defaultNamedNotOptArg, End=defaultNamedNotOptArg):
		"""Creates a Range1D object"""
		ret = self._oleobj_.InvokeTypes(45, LCID, 1, (13, 0), ((5, 0), (5, 0)),Start
			, End)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Range1D', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range2D
	def Range2D(self, StartX=defaultNamedNotOptArg, StartY=defaultNamedNotOptArg, EndX=defaultNamedNotOptArg, EndY=defaultNamedNotOptArg):
		"""Creates a Range2D object"""
		ret = self._oleobj_.InvokeTypes(46, LCID, 1, (13, 0), ((5, 0), (5, 0), (5, 0), (5, 0)),StartX
			, StartY, EndX, EndY)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Range2D', '{78D416E3-00BF-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def ReadOnlyGridCell(self, sTabName=defaultNamedNotOptArg, nRow=defaultNamedNotOptArg, nCol=defaultNamedNotOptArg, bReadOnly=defaultNamedNotOptArg):
		"""Make a specified grid cell as read only or writable."""
		return self._oleobj_.InvokeTypes(99, LCID, 1, (24, 0), ((8, 0), (3, 0), (3, 0), (11, 0)),sTabName
			, nRow, nCol, bReadOnly)

	def ReleaseInstance(self, ProgId=defaultNamedNotOptArg):
		"""Releases instance of specified component"""
		return self._oleobj_.InvokeTypes(71, LCID, 1, (11, 0), ((8, 0),),ProgId
			)

	def RemoveGrid(self, sTabName=defaultNamedNotOptArg):
		"""Removes specified tab from the grid"""
		return self._oleobj_.InvokeTypes(94, LCID, 1, (24, 0), ((8, 0),),sTabName
			)

	def RemoveRows(self, sTabName=defaultNamedNotOptArg, nFrom=defaultNamedNotOptArg, nTo=defaultNamedNotOptArg):
		"""Removes specified rows from the grid."""
		return self._oleobj_.InvokeTypes(96, LCID, 1, (24, 0), ((8, 0), (3, 0), (3, 0)),sTabName
			, nFrom, nTo)

	def RestoreLayoutWorkspace(self, sWorkspaceName=defaultNamedNotOptArg):
		"""Creates new layout workspace if not exists otherwise opens the existing laout workspace"""
		return self._oleobj_.InvokeTypes(9, LCID, 1, (11, 0), ((8, 0),),sWorkspaceName
			)

	# Result is of type RoiTable
	def RoiTable(self):
		"""Returns the application's RoiTable"""
		ret = self._oleobj_.InvokeTypes(80, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'RoiTable', '{5B08C067-8012-40C3-833E-2363F506BC10}', UnicodeToString=0)
		return ret

	def SaveDisplayWindow(self, Name=defaultNamedNotOptArg, FilePath=defaultNamedNotOptArg):
		"""Saves display window with specified full path"""
		return self._oleobj_.InvokeTypes(79, LCID, 1, (24, 0), ((8, 0), (8, 0)),Name
			, FilePath)

	def SaveLayoutWorkspace(self, sWorkspaceName=defaultNamedNotOptArg):
		"""Saves existing layout workspace"""
		return self._oleobj_.InvokeTypes(10, LCID, 1, (24, 0), ((8, 0),),sWorkspaceName
			)

	def SaveWorkspace(self, Name=defaultNamedNotOptArg):
		"""Saves a workspace"""
		return self._oleobj_.InvokeTypes(24, LCID, 1, (11, 0), ((8, 0),),Name
			)

	# Result is of type ScanningServer
	def ScanningServer(self):
		"""Gets the scanning server"""
		ret = self._oleobj_.InvokeTypes(39, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'ScanningServer', '{65B16A79-E63E-11D2-AD9E-00A0241857FD}', UnicodeToString=0)
		return ret

	def SetWindowPosition(self, Left=defaultNamedNotOptArg, Top=defaultNamedNotOptArg, Right=defaultNamedNotOptArg, Bottom=defaultNamedNotOptArg):
		"""Sets frame window position and size"""
		return self._oleobj_.InvokeTypes(14, LCID, 1, (24, 0), ((3, 0), (3, 0), (3, 0), (3, 0)),Left
			, Top, Right, Bottom)

	# Result is of type SetupListDialog
	def SetupListDialog(self, CaptionName=defaultNamedNotOptArg, SetupLabel=defaultNamedNotOptArg, SetupNames=defaultNamedNotOptArg, ActiveSetup=defaultNamedNotOptArg):
		"""Creates a SetupList dialog"""
		ret = self._oleobj_.InvokeTypes(84, LCID, 1, (13, 0), ((8, 0), (8, 0), (13, 0), (8, 0)),CaptionName
			, SetupLabel, SetupNames, ActiveSetup)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'SetupListDialog', '{206A7F2B-0416-4BF3-8189-95E4D1150667}', UnicodeToString=0)
		return ret

	# Result is of type ShortcutBar
	def ShortcutBar(self):
		"""Creates a ShortcutBar object"""
		ret = self._oleobj_.InvokeTypes(20, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'ShortcutBar', '{80B79741-15DE-11D2-AD14-00A0241857FD}', UnicodeToString=0)
		return ret

	def ShowMaximized(self):
		"""Maximizes frame window of application"""
		return self._oleobj_.InvokeTypes(11, LCID, 1, (24, 0), (),)

	def ShowMinimized(self):
		"""Minimizes frame window of application"""
		return self._oleobj_.InvokeTypes(12, LCID, 1, (24, 0), (),)

	def ShowRestored(self):
		"""Restores frame window position and size of minimized or maximized application"""
		return self._oleobj_.InvokeTypes(13, LCID, 1, (24, 0), (),)

	# Result is of type SpatialUnit
	def SpatialUnit(self, Unit='um'):
		"""Creates a SpatialUnit object"""
		return self._ApplyTypes_(55, 1, (13, 32), ((8, 48),), 'SpatialUnit', '{97033EE5-566E-11D2-AD28-00A0241857FD}',Unit
			)

	# Result is of type StandardsTable
	def StandardsTable(self):
		"""Returns the application's StandardsTable"""
		ret = self._oleobj_.InvokeTypes(82, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'StandardsTable', '{C0075CCE-F9EA-44F2-9DBD-B90CC8E1395B}', UnicodeToString=0)
		return ret

	# Result is of type StatusDialog
	def StatusDialog(self, CaptionName=defaultNamedNotOptArg, StatusMessage=defaultNamedNotOptArg):
		"""Creates a Status dialog"""
		ret = self._oleobj_.InvokeTypes(87, LCID, 1, (13, 0), ((8, 0), (8, 0)),CaptionName
			, StatusMessage)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'StatusDialog', '{6C7035D8-2583-4C77-A8DC-495F56C3032A}', UnicodeToString=0)
		return ret

	# Result is of type StringCollection
	def StringCollection(self):
		"""Creates a StringCollection object"""
		ret = self._oleobj_.InvokeTypes(51, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'StringCollection', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type StringDialog
	def StringDialog(self, Title=defaultNamedNotOptArg, Prompt=defaultNamedNotOptArg, String=''):
		"""Creates dialog for entering a string"""
		return self._ApplyTypes_(60, 1, (13, 32), ((8, 0), (8, 0), (8, 48)), 'StringDialog', '{285304C3-63C4-11D2-AD39-00A0241857FD}',Title
			, Prompt, String)

	# Result is of type StringListDialog
	def StringListDialog(self, Title=defaultNamedNotOptArg, Prompt=defaultNamedNotOptArg, String=defaultNamedNotOptArg, List=defaultNamedNotOptArg):
		"""Creates dialog for selecting a string from a list"""
		ret = self._oleobj_.InvokeTypes(61, LCID, 1, (13, 0), ((8, 0), (8, 0), (8, 0), (9, 0)),Title
			, Prompt, String, List)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'StringListDialog', '{285304C6-63C4-11D2-AD39-00A0241857FD}', UnicodeToString=0)
		return ret

	def UninstallComponent(self, ProgId=defaultNamedNotOptArg):
		"""Uninstalls specified component"""
		return self._oleobj_.InvokeTypes(68, LCID, 1, (11, 0), ((8, 0),),ProgId
			)

	def Unlock(self, Key=defaultNamedNotOptArg):
		"""Unlocks interface"""
		return self._oleobj_.InvokeTypes(74, LCID, 1, (11, 0), ((3, 0),),Key
			)

	def UpdateGridData(self, sTabName=defaultNamedNotOptArg, pData=defaultNamedNotOptArg):
		"""Updates data for a specified grid."""
		return self._oleobj_.InvokeTypes(95, LCID, 1, (24, 0), ((8, 0), (9, 0)),sTabName
			, pData)

	def UserIsAdmin(self):
		"""Returns the user's Administrator status"""
		return self._oleobj_.InvokeTypes(86, LCID, 1, (11, 0), (),)

	# Result is of type ValueDialog
	def ValueDialog(self, Title=defaultNamedNotOptArg, Prompt=defaultNamedNotOptArg, Value=defaultNamedNotOptArg, SigDigits=4
			, Test=7, Min=0.0, Max=0.0, Unit=''):
		"""Creates dialog for entering float values"""
		return self._ApplyTypes_(63, 1, (13, 32), ((8, 0), (8, 0), (5, 0), (3, 48), (3, 48), (5, 48), (5, 48), (8, 48)), 'ValueDialog', '{285304CC-63C4-11D2-AD39-00A0241857FD}',Title
			, Prompt, Value, SigDigits, Test, Min
			, Max, Unit)

	# Result is of type Vector
	def Vector(self, X=0.0, Y=0.0):
		"""Creates a Vector object"""
		ret = self._oleobj_.InvokeTypes(52, LCID, 1, (13, 0), ((5, 48), (5, 48)),X
			, Y)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Vector', '{B396F1A1-6430-11D2-AD39-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type VideoServer
	def VideoServer(self):
		"""Gets the video server"""
		ret = self._oleobj_.InvokeTypes(38, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'VideoServer', '{65B16A77-E63E-11D2-AD9E-00A0241857FD}', UnicodeToString=0)
		return ret

	def Wait(self, Milliseconds=defaultNamedNotOptArg):
		"""Returns after the selected number of milliseconds"""
		return self._oleobj_.InvokeTypes(91, LCID, 1, (24, 0), ((3, 0),),Milliseconds
			)

	def WarningDialog(self, Message=defaultNamedNotOptArg):
		"""Shows a warning dialog"""
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), ((8, 0),),Message
			)

	# Result is of type XrayServer
	def XrayServer(self):
		"""Gets the X-ray server"""
		ret = self._oleobj_.InvokeTypes(41, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'XrayServer', '{65B16A71-E63E-11D2-AD9E-00A0241857FD}', UnicodeToString=0)
		return ret

	_prop_map_get_ = {
		"AcquireGuiEnabled": (3, 2, (11, 0), (), "AcquireGuiEnabled", None),
		"CaptionVisible": (4, 2, (11, 0), (), "CaptionVisible", None),
		"Enabled": (2, 2, (11, 0), (), "Enabled", None),
		"Locked": (7, 2, (11, 0), (), "Locked", None),
		"StopRequest": (8, 2, (11, 0), (), "StopRequest", None),
		"Visible": (1, 2, (11, 0), (), "Visible", None),
		"WindowResizable": (5, 2, (11, 0), (), "WindowResizable", None),
		"WorkbookMode": (6, 2, (11, 0), (), "WorkbookMode", None),
	}
	_prop_map_put_ = {
		"AcquireGuiEnabled" : ((3, LCID, 4, 0),()),
		"CaptionVisible" : ((4, LCID, 4, 0),()),
		"Enabled" : ((2, LCID, 4, 0),()),
		"Locked" : ((7, LCID, 4, 0),()),
		"StopRequest" : ((8, LCID, 4, 0),()),
		"Visible" : ((1, LCID, 4, 0),()),
		"WindowResizable" : ((5, LCID, 4, 0),()),
		"WorkbookMode" : ((6, LCID, 4, 0),()),
	}

class IApplicationEvents:
	"""Application event interface"""
	CLSID = CLSID_Sink = IID('{D20B86BA-1214-11D2-AD14-00A0241857FD}')
	coclass_clsid = IID('{D20B86BB-1214-11D2-AD14-00A0241857FD}')
	_public_methods_ = [] # For COM Server support
	_dispid_to_func_ = {
		       42 : "OnViewStandard",
		       65 : "OnSelectEelsStandard",
		        3 : "OnDisplayWindowRemoved",
		       54 : "OnBiasDataChanged",
		       56 : "OnSetBeamBlanking",
		       43 : "OnAcquisitionStarting",
		       24 : "OnPositionChanged",
		       13 : "OnDisplayObjectRemoved",
		       29 : "OnAcquisitionStopped",
		       18 : "OnDragStart",
		        5 : "OnDisplayWindowDeselected",
		       35 : "OnMenuItemClicked",
		       62 : "OnEelsQuantEdgeFamilyChanged",
		       12 : "OnDisplayObjectToRemove",
		       23 : "OnStateChanged",
		       52 : "OnCalibrationSelected",
		       50 : "OnBeamControlUpdate",
		        9 : "OnDisplaySelected",
		       51 : "OnCalibrationListChanged",
		       27 : "OnCalibrationChanged",
		       40 : "OnDeleteStandard",
		       17 : "OnViewStateChanged",
		       28 : "OnAcquisitionStarted",
		       67 : "OnSetDefaultEelsRange",
		       21 : "OnHideStateChanged",
		       61 : "OnEelsQuantElementChanged",
		       11 : "OnDisplayObjectAdded",
		       41 : "OnEditStandard",
		       14 : "OnDisplayObjectSelected",
		       46 : "OnEditSetup",
		       55 : "OnGainDataChanged",
		       36 : "OnShortcutItemClicked",
		       60 : "OnApplicationInitialized",
		       33 : "OnBeamPosMarkerToChange",
		       31 : "OnAcquisitionCompleted",
		        8 : "OnDisplayRemoved",
		       10 : "OnDisplayDeselected",
		       34 : "OnBeamPosMarkerChanged",
		       15 : "OnDisplayObjectDeselected",
		       20 : "OnNameChanged",
		       48 : "OnUpdateAcquisition",
		       53 : "OnPeelsBiasDisabled",
		        4 : "OnDisplayWindowSelected",
		       64 : "OnDeleteEelsStandard",
		        6 : "OnDisplayAdded",
		       66 : "OnViewEelsStandard",
		        1 : "OnDisplayWindowAdded",
		       22 : "OnLockStateChanged",
		       25 : "OnRangeChanged",
		       45 : "OnDeleteSetup",
		       38 : "OnSpecimenCenter",
		       16 : "OnDisplayRangeChanged",
		       30 : "OnAcquisitionReset",
		       59 : "OnProcessingButtonClicked",
		        2 : "OnDisplayWindowToRemove",
		       47 : "OnRenameSetup",
		       49 : "OnHelpRequest",
		       19 : "OnDragEnd",
		       44 : "OnAddSetup",
		       37 : "OnAcquisitionError",
		       57 : "OnFileServerMessage",
		       58 : "OnGridDataUpdated",
		        7 : "OnDisplayToRemove",
		       32 : "OnAcquisitionSetupChanged",
		       63 : "OnCreateEelsStandard",
		       39 : "OnCreateStandard",
		       26 : "OnDataChanged",
		}

	def __init__(self, oobj = None):
		if oobj is None:
			self._olecp = None
		else:
			import win32com.server.util
			from win32com.server.policy import EventHandlerPolicy
			cpc=oobj._oleobj_.QueryInterface(pythoncom.IID_IConnectionPointContainer)
			cp=cpc.FindConnectionPoint(self.CLSID_Sink)
			cookie=cp.Advise(win32com.server.util.wrap(self, usePolicy=EventHandlerPolicy))
			self._olecp,self._olecp_cookie = cp,cookie
	def __del__(self):
		try:
			self.close()
		except pythoncom.com_error:
			pass
	def close(self):
		if self._olecp is not None:
			cp,cookie,self._olecp,self._olecp_cookie = self._olecp,self._olecp_cookie,None,None
			cp.Unadvise(cookie)
	def _query_interface_(self, iid):
		import win32com.server.util
		if iid==self.CLSID_Sink: return win32com.server.util.wrap(self)

	# Event Handlers
	# If you create handlers, they should have the following prototypes:
#	def OnViewStandard(self, AtomicNumber=defaultNamedNotOptArg):
#		"""Occurs when there is a request to view a standard"""
#	def OnSelectEelsStandard(self, AtomicNumber=defaultNamedNotOptArg):
#		"""Occurs when there is a request to select an EELS standard"""
#	def OnDisplayWindowRemoved(self, DisplayWindow=defaultNamedNotOptArg):
#		"""Occurs when a display window was closed"""
#	def OnBiasDataChanged(self, ServerName=defaultNamedNotOptArg):
#		"""Occurs when new bias data is selected due to a change in acquisition parameters"""
#	def OnSetBeamBlanking(self, State=defaultNamedNotOptArg):
#		"""Occurs when there is a request to blank the beam"""
#	def OnAcquisitionStarting(self):
#		"""Occurs just before acquisition starts"""
#	def OnPositionChanged(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when the position of a display object changes"""
#	def OnDisplayObjectRemoved(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when a display object was removed from a display"""
#	def OnAcquisitionStopped(self):
#		"""Occurs when acquisition is stopped"""
#	def OnDragStart(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when a dragging of a display object is started"""
#	def OnDisplayWindowDeselected(self, DisplayWindow=defaultNamedNotOptArg):
#		"""Occurs when a display window is deactivated"""
#	def OnMenuItemClicked(self, Menu=defaultNamedNotOptArg, Item=defaultNamedNotOptArg):
#		"""Occurs when a custom menu item is clicked"""
#	def OnEelsQuantEdgeFamilyChanged(self, AtomicNumber=defaultNamedNotOptArg, EelsEdgeFamily=defaultNamedNotOptArg):
#		"""Occurs when the quantification edge family is changed in the EELS Quant tab of the periodic table"""
#	def OnDisplayObjectToRemove(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when a display object is about to be removed from a display"""
#	def OnStateChanged(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when any property of a display object changes"""
#	def OnCalibrationSelected(self, ServerName=defaultNamedNotOptArg):
#		"""Occurs when a different calibration is selected for an acquisition server"""
#	def OnBeamControlUpdate(self, SignalName=defaultNamedNotOptArg, NewData=defaultNamedNotOptArg):
#		"""Occurs when the beam control object has new data"""
#	def OnDisplaySelected(self, Display=defaultNamedNotOptArg):
#		"""Occurs when a display is selected"""
#	def OnCalibrationListChanged(self, ServerName=defaultNamedNotOptArg):
#		"""Occurs when the calibration list of an acquisition server changes"""
#	def OnCalibrationChanged(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when the calibration of a display object changes"""
#	def OnDeleteStandard(self, AtomicNumber=defaultNamedNotOptArg):
#		"""Occurs when there is a request to delete a standard"""
#	def OnViewStateChanged(self, Display=defaultNamedNotOptArg):
#		"""Occurs when a calibration view state changes"""
#	def OnAcquisitionStarted(self):
#		"""Occurs when acquisition is started"""
#	def OnSetDefaultEelsRange(self, AtomicNumber=defaultNamedNotOptArg):
#		"""Occurs when there is a request to set an EELS element to its default range"""
#	def OnHideStateChanged(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when the hide state of a display object changes"""
#	def OnEelsQuantElementChanged(self, AtomicNumber=defaultNamedNotOptArg, Enabled=defaultNamedNotOptArg):
#		"""Occurs when an element is enabled or disabled in the EELS Quant tab of the periodic table"""
#	def OnDisplayObjectAdded(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when a display object is added to a display"""
#	def OnEditStandard(self, AtomicNumber=defaultNamedNotOptArg):
#		"""Occurs when there is a request to edit a standard"""
#	def OnDisplayObjectSelected(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when a display object is selected"""
#	def OnEditSetup(self, SetupName=defaultNamedNotOptArg):
#		"""Occurs just before acquisition starts"""
#	def OnGainDataChanged(self, ServerName=defaultNamedNotOptArg):
#		"""Occurs when new gain data is selected due to a change in acquisition parameters"""
#	def OnShortcutItemClicked(self, Section=defaultNamedNotOptArg, Item=defaultNamedNotOptArg):
#		"""Occurs when a custom shortcut bat button is clicked"""
#	def OnApplicationInitialized(self):
#		"""Occurs when application completely initialized itself."""
#	def OnBeamPosMarkerToChange(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when the beam position marker is about to change"""
#	def OnAcquisitionCompleted(self):
#		"""Occurs when acquisition is completed"""
#	def OnDisplayRemoved(self, Display=defaultNamedNotOptArg):
#		"""Occurs when a display was removed from a display window"""
#	def OnDisplayDeselected(self, Display=defaultNamedNotOptArg):
#		"""Occurs when a display is deselected"""
#	def OnBeamPosMarkerChanged(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when the beam position marker has changed"""
#	def OnDisplayObjectDeselected(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when a display object is deselected"""
#	def OnNameChanged(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when the name of a display object changes"""
#	def OnUpdateAcquisition(self):
#		"""Occurs when new acquisition data is read"""
#	def OnPeelsBiasDisabled(self):
#		"""Occurs when the PEELS bias is disabled due to a change in CCD parameters"""
#	def OnDisplayWindowSelected(self, DisplayWindow=defaultNamedNotOptArg):
#		"""Occurs when a display window is activated"""
#	def OnDeleteEelsStandard(self, AtomicNumber=defaultNamedNotOptArg):
#		"""Occurs when there is a request to delete an EELS standard"""
#	def OnDisplayAdded(self, Display=defaultNamedNotOptArg):
#		"""Occurs when a display is added to a display window"""
#	def OnViewEelsStandard(self, AtomicNumber=defaultNamedNotOptArg):
#		"""Occurs when there is a request to view an EELS standard"""
#	def OnDisplayWindowAdded(self, DisplayWindow=defaultNamedNotOptArg):
#		"""Occurs when a display window is opened or created"""
#	def OnLockStateChanged(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when the lock state of a display object changes"""
#	def OnRangeChanged(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when the range of a display object changes"""
#	def OnDeleteSetup(self, SetupName=defaultNamedNotOptArg):
#		"""Occurs just before acquisition starts"""
#	def OnSpecimenCenter(self, Image=defaultNamedNotOptArg, Position=defaultNamedNotOptArg):
#		"""Occurs when there is a click with the specimen center tool"""
#	def OnDisplayRangeChanged(self, Display=defaultNamedNotOptArg):
#		"""Occurs when a display range changes"""
#	def OnAcquisitionReset(self):
#		"""Occurs when acquisition is reset"""
#	def OnProcessingButtonClicked(self, Button=defaultNamedNotOptArg):
#		"""Occurs when processing button is clicked"""
#	def OnDisplayWindowToRemove(self, DisplayWindow=defaultNamedNotOptArg):
#		"""Occurs when a display window is about to be closed"""
#	def OnRenameSetup(self, OldName=defaultNamedNotOptArg, NewName=defaultNamedNotOptArg):
#		"""Occurs just before acquisition starts"""
#	def OnHelpRequest(self):
#		"""Occurs when help is activated"""
#	def OnDragEnd(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when a dragging of a display object is ended"""
#	def OnAddSetup(self, SetupName=defaultNamedNotOptArg, BaseName=defaultNamedNotOptArg):
#		"""Occurs just before acquisition starts"""
#	def OnAcquisitionError(self):
#		"""Occurs when there is an acquisition error"""
#	def OnFileServerMessage(self, Message=defaultNamedNotOptArg):
#		"""Occurs when the FileServer has completed an action"""
#	def OnGridDataUpdated(self, NewData=defaultNamedNotOptArg):
#		"""Occurs when dynamic grid cell data is changed"""
#	def OnDisplayToRemove(self, Display=defaultNamedNotOptArg):
#		"""Occurs when a display is about to be removed from a display window"""
#	def OnAcquisitionSetupChanged(self):
#		"""Occurs when an acquisition setup is changed"""
#	def OnCreateEelsStandard(self, AtomicNumber=defaultNamedNotOptArg):
#		"""Occurs when there is a request to create an EELS standard"""
#	def OnCreateStandard(self, AtomicNumber=defaultNamedNotOptArg):
#		"""Occurs when there is a request to create a standard"""
#	def OnDataChanged(self, DisplayObject=defaultNamedNotOptArg):
#		"""Occurs when the data of a display object changes"""


class IAutoIdTable(DispatchBaseClass):
	CLSID = IID('{077318CA-8D59-403F-8161-51CF6EFA7B63}')
	coclass_clsid = IID('{A1E56058-1B75-49A2-8C41-27027A934EEE}')

	# The method SetState is actually a property, but must be used as a method to correctly pass the arguments
	def SetState(self, AtomicNumber=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets the current enabled state of an element"""
		return self._oleobj_.InvokeTypes(65538, LCID, 4, (24, 0), ((3, 0), (11, 0)),AtomicNumber
			, arg1)

	# The method State is actually a property, but must be used as a method to correctly pass the arguments
	def State(self, AtomicNumber=defaultNamedNotOptArg):
		"""Gets the current enabled state of an element"""
		return self._oleobj_.InvokeTypes(65538, LCID, 2, (11, 0), ((3, 0),),AtomicNumber
			)

	_prop_map_get_ = {
		"SelectedElements": (65537, 2, (12, 0), (), "SelectedElements", None),
	}
	_prop_map_put_ = {
		"SelectedElements" : ((65537, LCID, 4, 0),()),
	}

class IBeamControl(DispatchBaseClass):
	CLSID = IID('{950FC140-DC44-11D1-8884-00A0241857FD}')
	coclass_clsid = IID('{950FC141-DC44-11D1-8884-00A0241857FD}')

	def CanStart(self):
		"""Queries if beam control can start"""
		return self._oleobj_.InvokeTypes(13, LCID, 1, (11, 0), (),)

	def DisableAllSignals(self):
		"""Disables input signals during scanning"""
		return self._oleobj_.InvokeTypes(16, LCID, 1, (24, 0), (),)

	def EnableSignals(self, SignalNames=defaultNamedNotOptArg):
		"""Enables input signals during scanning"""
		return self._oleobj_.InvokeTypes(15, LCID, 1, (24, 0), ((13, 0),),SignalNames
			)

	def IsScanning(self):
		"""Queries if beam is scanning"""
		return self._oleobj_.InvokeTypes(14, LCID, 1, (11, 0), (),)

	def LoadPositions(self, Positions=defaultNamedNotOptArg):
		"""Loads a set of positions for beam control"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (24, 0), ((13, 0),),Positions
			)

	def MoveBeam(self, PositionX=defaultNamedNotOptArg, PositionY=defaultNamedNotOptArg):
		"""Moves the beam to a specified position"""
		return self._oleobj_.InvokeTypes(12, LCID, 1, (24, 0), ((5, 0), (5, 0)),PositionX
			, PositionY)

	def Reset(self):
		"""Resets beam control"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (24, 0), (),)

	def SetBeamPositions(self, Positions=defaultNamedNotOptArg):
		"""Loads a set of positions for beam control from an array"""
		return self._oleobj_.InvokeTypes(6, LCID, 1, (24, 0), ((12, 0),),Positions
			)

	def SetContinuousScan(self):
		"""Sets the scan mode to a continuous scanning"""
		return self._oleobj_.InvokeTypes(11, LCID, 1, (24, 0), (),)

	def SetFrameScan(self, pScanRange=defaultNamedNotOptArg, NumberPointsX=defaultNamedNotOptArg, NumberPointsY=defaultNamedNotOptArg):
		"""Sets a frame scan range for beam control"""
		return self._oleobj_.InvokeTypes(8, LCID, 1, (24, 0), ((13, 0), (3, 0), (3, 0)),pScanRange
			, NumberPointsX, NumberPointsY)

	def SetLineScan(self, pStartPoint=defaultNamedNotOptArg, pEndPoint=defaultNamedNotOptArg, NumberPoints=defaultNamedNotOptArg):
		"""Sets a line scan range for beam control"""
		return self._oleobj_.InvokeTypes(9, LCID, 1, (24, 0), ((13, 0), (13, 0), (3, 0)),pStartPoint
			, pEndPoint, NumberPoints)

	def SetSingleScan(self):
		"""Sets the scan mode to a single scan"""
		return self._oleobj_.InvokeTypes(10, LCID, 1, (24, 0), (),)

	def Start(self):
		"""Starts beam control"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), (),)

	def Stop(self):
		"""Stops beam control"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (24, 0), (),)

	_prop_map_get_ = {
		"DwellTime": (1, 2, (5, 0), (), "DwellTime", None),
		"PositionCalibrated": (2, 2, (11, 0), (), "PositionCalibrated", None),
	}
	_prop_map_put_ = {
		"DwellTime" : ((1, LCID, 4, 0),()),
		"PositionCalibrated" : ((2, LCID, 4, 0),()),
	}

class IBeamPositionMarker(DispatchBaseClass):
	CLSID = IID('{57EE3A54-83EF-11D2-AD6F-00A0241857FD}')
	coclass_clsid = IID('{57EE3A55-83EF-11D2-AD6F-00A0241857FD}')

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (11, 0), (),)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		"Lock": (65541, 2, (11, 0), (), "Lock", None),
		"Name": (65538, 2, (8, 0), (), "Name", None),
		"Ordinal": (65539, 2, (3, 0), (), "Ordinal", None),
		# Property 'Position' is an object of type 'Position2D'
		"Position": (1, 2, (13, 0), (), "Position", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		"Selectable": (65542, 2, (11, 0), (), "Selectable", None),
		"Style": (65540, 2, (8, 0), (), "Style", None),
		"Visible": (65537, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Lock" : ((65541, LCID, 4, 0),()),
		"Name" : ((65538, LCID, 4, 0),()),
		"Ordinal" : ((65539, LCID, 4, 0),()),
		"Position" : ((1, LCID, 4, 0),()),
		"Selectable" : ((65542, LCID, 4, 0),()),
		"Style" : ((65540, LCID, 4, 0),()),
		"Visible" : ((65537, LCID, 4, 0),()),
	}

class ICalibration1D(DispatchBaseClass):
	CLSID = IID('{E1B6CE11-0BE5-11D2-AD13-00A0241857FD}')
	coclass_clsid = IID('{E1B6CE12-0BE5-11D2-AD13-00A0241857FD}')

	def Set(self, Offset=defaultNamedNotOptArg, Delta=defaultNamedNotOptArg, CalIndex=0):
		"""Sets 1D calibration parameters"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (24, 0), ((5, 0), (5, 0), (3, 48)),Offset
			, Delta, CalIndex)

	_prop_map_get_ = {
		"CalIndex": (3, 2, (3, 0), (), "CalIndex", None),
		"Delta": (2, 2, (5, 0), (), "Delta", None),
		"Offset": (1, 2, (5, 0), (), "Offset", None),
	}
	_prop_map_put_ = {
		"CalIndex" : ((3, LCID, 4, 0),()),
		"Delta" : ((2, LCID, 4, 0),()),
		"Offset" : ((1, LCID, 4, 0),()),
	}

class ICalibration2D(DispatchBaseClass):
	CLSID = IID('{14180825-DCFE-11D1-8884-00A0241857FD}')
	coclass_clsid = IID('{14180826-DCFE-11D1-8884-00A0241857FD}')

	def Set(self, OffsetX=defaultNamedNotOptArg, OffsetY=defaultNamedNotOptArg, DeltaX=defaultNamedNotOptArg, DeltaY=defaultNamedNotOptArg
			, CalIndexX=0, CalIndexY=0):
		"""Sets 2D calibration parameters"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (24, 0), ((5, 0), (5, 0), (5, 0), (5, 0), (3, 48), (3, 48)),OffsetX
			, OffsetY, DeltaX, DeltaY, CalIndexX, CalIndexY
			)

	_prop_map_get_ = {
		"CalIndexX": (5, 2, (3, 0), (), "CalIndexX", None),
		"CalIndexY": (6, 2, (3, 0), (), "CalIndexY", None),
		"DeltaX": (3, 2, (5, 0), (), "DeltaX", None),
		"DeltaY": (4, 2, (5, 0), (), "DeltaY", None),
		"OffsetX": (1, 2, (5, 0), (), "OffsetX", None),
		"OffsetY": (2, 2, (5, 0), (), "OffsetY", None),
	}
	_prop_map_put_ = {
		"CalIndexX" : ((5, LCID, 4, 0),()),
		"CalIndexY" : ((6, LCID, 4, 0),()),
		"DeltaX" : ((3, LCID, 4, 0),()),
		"DeltaY" : ((4, LCID, 4, 0),()),
		"OffsetX" : ((1, LCID, 4, 0),()),
		"OffsetY" : ((2, LCID, 4, 0),()),
	}

class ICcdCameraServer(DispatchBaseClass):
	CLSID = IID('{72362A75-268C-4E7F-9B69-A4C3E71AC9DE}')
	coclass_clsid = IID('{BB61130C-F540-4A0A-92DA-E6AD2D4F027A}')

	def SetLinearizationData(self, LinearizationData=defaultNamedNotOptArg, Binning=defaultNamedNotOptArg, PixelReadoutRange=defaultNamedNotOptArg):
		"""Sets the passed in linearization data to the camera"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (24, 0), ((13, 0), (3, 0), (13, 0)),LinearizationData
			, Binning, PixelReadoutRange)

	_prop_map_get_ = {
		"Acquisition": (1, 2, (13, 0), (), "Acquisition", None),
		"CameraControl": (2, 2, (13, 0), (), "CameraControl", None),
		"LinearizationCorrectionEnabled": (6, 2, (11, 0), (), "LinearizationCorrectionEnabled", None),
		"ReadoutAreaDependentGain": (5, 2, (11, 0), (), "ReadoutAreaDependentGain", None),
		"RequiresLinearization": (3, 2, (11, 0), (), "RequiresLinearization", None),
	}
	_prop_map_put_ = {
		"Acquisition" : ((1, LCID, 4, 0),()),
		"CameraControl" : ((2, LCID, 4, 0),()),
		"LinearizationCorrectionEnabled" : ((6, LCID, 4, 0),()),
		"ReadoutAreaDependentGain" : ((5, LCID, 4, 0),()),
		"RequiresLinearization" : ((3, LCID, 4, 0),()),
	}

class ICcdServer(DispatchBaseClass):
	CLSID = IID('{65B16A74-E63E-11D2-AD9E-00A0241857FD}')
	coclass_clsid = IID('{65B16A75-E63E-11D2-AD9E-00A0241857FD}')

	def AcquireBiasImage(self, nrImages=defaultNamedNotOptArg):
		"""Setups the camera for acquiring a bias image"""
		return self._oleobj_.InvokeTypes(10, LCID, 1, (24, 0), ((3, 0),),nrImages
			)

	def AcquireGainImage(self, nrImages=defaultNamedNotOptArg):
		"""Setups the camera for acquiring a gain image"""
		return self._oleobj_.InvokeTypes(12, LCID, 1, (24, 0), ((3, 0),),nrImages
			)

	# Result is of type StringCollection
	def BinningValues(self):
		"""Returns a string collection with all possible binning values"""
		ret = self._oleobj_.InvokeTypes(4, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'BinningValues', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type StringCollection
	def CameraNames(self):
		"""Returns a string collection with all camera names"""
		ret = self._oleobj_.InvokeTypes(65550, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'CameraNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def CanAcquireBiasImage(self):
		"""Gets whether the camera supports acquiring its own bias images"""
		return self._oleobj_.InvokeTypes(9, LCID, 1, (11, 0), (),)

	def CanAcquireGainImage(self):
		"""Gets whether the camera supports acquiring its own gain images"""
		return self._oleobj_.InvokeTypes(11, LCID, 1, (11, 0), (),)

	def ClearBiasImages(self):
		"""Clears the bias images"""
		return self._oleobj_.InvokeTypes(8, LCID, 1, (24, 0), (),)

	def CreateMagnification(self, Magnification=defaultNamedNotOptArg, ImageRange=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg):
		"""Creates a new magnification calibration"""
		return self._oleobj_.InvokeTypes(131081, LCID, 1, (24, 0), ((5, 0), (13, 0), (3, 0)),Magnification
			, ImageRange, MicroscopeMode)

	def DeleteMagnification(self, Name=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg):
		"""Deletes a magnification calibration"""
		return self._oleobj_.InvokeTypes(131082, LCID, 1, (24, 0), ((8, 0), (3, 0)),Name
			, MicroscopeMode)

	def GetAdditionalParameters(self):
		"""Gets spatial parameters as a xml in key/value pair."""
		ret = self._oleobj_.InvokeTypes(131088, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetAdditionalParameters', None, UnicodeToString=0)
		return ret

	# Result is of type Data2D
	def GetBiasImage(self):
		"""Gets the bias image for the current acquisition parameters"""
		ret = self._oleobj_.InvokeTypes(65553, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetBiasImage', '{1418082A-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def GetCameraDetectorPosition(self):
		"""Gets the camera detector postion"""
		return self._oleobj_.InvokeTypes(18, LCID, 1, (3, 0), (),)

	def GetCameraLocation(self):
		"""Gets the camera location"""
		return self._oleobj_.InvokeTypes(16, LCID, 1, (3, 0), (),)

	def GetExposureFactor(self, Binning=defaultNamedNotOptArg):
		"""Gets the exposure factor for giving binning"""
		return self._oleobj_.InvokeTypes(21, LCID, 1, (5, 0), ((3, 0),),Binning
			)

	# Result is of type Data2D
	def GetGainImage(self):
		"""Gets the gain image"""
		ret = self._oleobj_.InvokeTypes(65554, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetGainImage', '{1418082A-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def GetIntegrationTimeRange(self):
		"""Gets allowable range of integration times"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetIntegrationTimeRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range2D
	def GetMagnificationReadoutRange(self, MagnificationName=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg):
		"""Returns readout range for a specific magnification"""
		ret = self._oleobj_.InvokeTypes(131085, LCID, 1, (13, 0), ((8, 0), (3, 0)),MagnificationName
			, MicroscopeMode)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetMagnificationReadoutRange', '{78D416E3-00BF-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def GetPixelDepth(self):
		"""Gets the pixeldepth (nr of bits) of the selected camera"""
		return self._oleobj_.InvokeTypes(19, LCID, 1, (3, 0), (),)

	# Result is of type Range2D
	def GetTotalPixelReadoutRange(self):
		"""Gets the total pixel readout range of a camera"""
		ret = self._oleobj_.InvokeTypes(65546, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetTotalPixelReadoutRange', '{78D416E3-00BF-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range2D
	def GetTotalReadoutRange(self):
		"""Gets the total readout range of a camera"""
		ret = self._oleobj_.InvokeTypes(65545, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetTotalReadoutRange', '{78D416E3-00BF-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def HasBiasImage(self):
		"""Queries if a bias image is available"""
		return self._oleobj_.InvokeTypes(65547, LCID, 1, (11, 0), (),)

	def HasGainImage(self):
		"""Queries if a gain image is available"""
		return self._oleobj_.InvokeTypes(65548, LCID, 1, (11, 0), (),)

	def HasShutterControl(self):
		"""Queries if the camera has shutter control"""
		return self._oleobj_.InvokeTypes(6, LCID, 1, (11, 0), (),)

	def IsCameraRetractable(self):
		"""Queries if the camera is retractable"""
		return self._oleobj_.InvokeTypes(65551, LCID, 1, (11, 0), (),)

	def IsFixedFrameRate(self):
		"""Queries if the camera acquires at a fixed frame rate"""
		return self._oleobj_.InvokeTypes(65552, LCID, 1, (11, 0), (),)

	def MagnificationName(self, Magnification=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg):
		"""Returns the name of a magnification calibration"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(131084, LCID, 1, (8, 0), ((5, 0), (3, 0)),Magnification
			, MicroscopeMode)

	# Result is of type StringCollection
	def MagnificationNames(self, MicroscopeMode=defaultNamedNotOptArg):
		"""Returns the names of all magnification calibrations"""
		ret = self._oleobj_.InvokeTypes(131083, LCID, 1, (13, 0), ((3, 0),),MicroscopeMode
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'MagnificationNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type StringCollection
	def ReadoutRates(self):
		"""Returns a string collection with all possible readout rates"""
		ret = self._oleobj_.InvokeTypes(3, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'ReadoutRates', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def SetAdditionalParameters(self, AdditionalParameters=defaultNamedNotOptArg):
		"""Sets spatial parameters passed as xml in key/value pair."""
		return self._oleobj_.InvokeTypes(131087, LCID, 1, (24, 0), ((9, 0),),AdditionalParameters
			)

	def SetBiasImage(self, Image=defaultNamedNotOptArg, Binning=defaultNamedNotOptArg):
		"""Sets the bias image"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (24, 0), ((13, 0), (3, 0)),Image
			, Binning)

	def SetDriftRate(self, X=defaultNamedNotOptArg, Y=defaultNamedNotOptArg):
		"""Sets the drift-compensation rate"""
		return self._oleobj_.InvokeTypes(131080, LCID, 1, (24, 0), ((5, 0), (5, 0)),X
			, Y)

	def SetGainImage(self, Image=defaultNamedNotOptArg, Binning=defaultNamedNotOptArg):
		"""Sets the gain image"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (24, 0), ((13, 0), (3, 0)),Image
			, Binning)

	def SetMagnificationReadoutRange(self, MagnificationName=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg, Range=defaultNamedNotOptArg):
		"""Sets readout range for a specific magnification"""
		return self._oleobj_.InvokeTypes(131086, LCID, 1, (24, 0), ((8, 0), (3, 0), (13, 0)),MagnificationName
			, MicroscopeMode, Range)

	def SupportAlternateShutter(self):
		"""Gets whether the camera supports alternate shutter"""
		return self._oleobj_.InvokeTypes(13, LCID, 1, (11, 0), (),)

	def SupportCameraDetectorPosition(self):
		"""Gets whether the camera supports giving back the detector position of the camera"""
		return self._oleobj_.InvokeTypes(17, LCID, 1, (11, 0), (),)

	def SupportCameraLocation(self):
		"""Gets whether the camera supports giving back the camera location"""
		return self._oleobj_.InvokeTypes(15, LCID, 1, (11, 0), (),)

	def TargetGainDwellTime(self):
		"""Gets the target dwell time for a gain reference image"""
		return self._oleobj_.InvokeTypes(65555, LCID, 1, (5, 0), (),)

	_prop_map_get_ = {
		"AcquireMode": (131073, 2, (3, 0), (), "AcquireMode", None),
		"AcquisitionType": (20, 2, (3, 0), (), "AcquisitionType", None),
		"BiasCorrection": (65540, 2, (11, 0), (), "BiasCorrection", None),
		"Binning": (2, 2, (3, 0), (), "Binning", None),
		"Camera": (65542, 2, (8, 0), (), "Camera", None),
		"CameraInserted": (65543, 2, (11, 0), (), "CameraInserted", None),
		# Property 'CcdCameraServer' is an object of type 'ICcdCameraServer'
		"CcdCameraServer": (22, 2, (9, 0), (), "CcdCameraServer", '{72362A75-268C-4E7F-9B69-A4C3E71AC9DE}'),
		"DriftRateX": (131075, 2, (5, 0), (), "DriftRateX", None),
		"DriftRateY": (131076, 2, (5, 0), (), "DriftRateY", None),
		"GainCorrection": (65541, 2, (11, 0), (), "GainCorrection", None),
		"IntegrationTime": (65537, 2, (5, 0), (), "IntegrationTime", None),
		"Name": (131079, 2, (8, 0), (), "Name", None),
		"NumberFrames": (131078, 2, (3, 0), (), "NumberFrames", None),
		# Property 'PixelReadoutRange' is an object of type 'Range2D'
		"PixelReadoutRange": (65539, 2, (13, 0), (), "PixelReadoutRange", '{78D416E3-00BF-11D2-AD12-00A0241857FD}'),
		# Property 'ReadoutRange' is an object of type 'Range2D'
		"ReadoutRange": (65538, 2, (13, 0), (), "ReadoutRange", '{78D416E3-00BF-11D2-AD12-00A0241857FD}'),
		"ReadoutRate": (1, 2, (5, 0), (), "ReadoutRate", None),
		# Property 'ReferencePosition' is an object of type 'Position2D'
		"ReferencePosition": (131074, 2, (13, 0), (), "ReferencePosition", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		"SeriesSize": (131077, 2, (3, 0), (), "SeriesSize", None),
		"UseAlternateShutter": (14, 2, (11, 0), (), "UseAlternateShutter", None),
	}
	_prop_map_put_ = {
		"AcquireMode" : ((131073, LCID, 4, 0),()),
		"AcquisitionType" : ((20, LCID, 4, 0),()),
		"BiasCorrection" : ((65540, LCID, 4, 0),()),
		"Binning" : ((2, LCID, 4, 0),()),
		"Camera" : ((65542, LCID, 4, 0),()),
		"CameraInserted" : ((65543, LCID, 4, 0),()),
		"CcdCameraServer" : ((22, LCID, 4, 0),()),
		"DriftRateX" : ((131075, LCID, 4, 0),()),
		"DriftRateY" : ((131076, LCID, 4, 0),()),
		"GainCorrection" : ((65541, LCID, 4, 0),()),
		"IntegrationTime" : ((65537, LCID, 4, 0),()),
		"Name" : ((131079, LCID, 4, 0),()),
		"NumberFrames" : ((131078, LCID, 4, 0),()),
		"PixelReadoutRange" : ((65539, LCID, 4, 0),()),
		"ReadoutRange" : ((65538, LCID, 4, 0),()),
		"ReadoutRate" : ((1, LCID, 4, 0),()),
		"ReferencePosition" : ((131074, LCID, 4, 0),()),
		"SeriesSize" : ((131077, LCID, 4, 0),()),
		"UseAlternateShutter" : ((14, LCID, 4, 0),()),
	}

class IColor(DispatchBaseClass):
	CLSID = IID('{5C31ED14-6DDC-4663-B114-DFD6BA829BC2}')
	coclass_clsid = IID('{9324C861-D521-4FB8-B592-950C55615970}')

	_prop_map_get_ = {
		"Blue": (3, 2, (2, 0), (), "Blue", None),
		"Green": (2, 2, (2, 0), (), "Green", None),
		"Red": (1, 2, (2, 0), (), "Red", None),
	}
	_prop_map_put_ = {
		"Blue" : ((3, LCID, 4, 0),()),
		"Green" : ((2, LCID, 4, 0),()),
		"Red" : ((1, LCID, 4, 0),()),
	}

class IComplexNumber(DispatchBaseClass):
	CLSID = IID('{DB3B5180-0BC2-11D2-AD13-00A0241857FD}')
	coclass_clsid = IID('{DB3B5181-0BC2-11D2-AD13-00A0241857FD}')

	def Set(self, Real=defaultNamedNotOptArg, Imag=0.0):
		"""Sets the real and imaginary part of a number"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), ((5, 0), (5, 48)),Real
			, Imag)

	def String(self):
		"""Gets a string that is a representation of the number"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(4, LCID, 1, (8, 0), (),)

	_prop_map_get_ = {
		"Imag": (2, 2, (5, 0), (), "Imag", None),
		"Real": (1, 2, (5, 0), (), "Real", None),
		"_Real": (0, 2, (5, 0), (), "_Real", None),
	}
	_prop_map_put_ = {
		"Imag" : ((2, LCID, 4, 0),()),
		"Real" : ((1, LCID, 4, 0),()),
		"_Real" : ((0, LCID, 4, 0),()),
	}
	# Default property for this class is '_Real'
	def __call__(self):
		return self._ApplyTypes_(*(0, 2, (5, 0), (), "_Real", None))
	# str(ob) and int(ob) will use __call__
	def __unicode__(self, *args):
		try:
			return unicode(self.__call__(*args))
		except pythoncom.com_error:
			return repr(self)
	def __str__(self, *args):
		return str(self.__unicode__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))

class IControlBar(DispatchBaseClass):
	CLSID = IID('{88ABD292-DAAE-11D1-8884-00A0241857FD}')
	coclass_clsid = IID('{88ABD294-DAAE-11D1-8884-00A0241857FD}')

	def AdjustSize(self):
		"""Adjusts the size of a control bar to optimally fit all controls"""
		return self._oleobj_.InvokeTypes(8, LCID, 1, (24, 0), (),)

	def IsFloating(self):
		"""Queries if control bar is docked or floating"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (11, 0), (),)

	_prop_map_get_ = {
		"DockColumn": (3, 2, (3, 0), (), "DockColumn", None),
		"DockRow": (2, 2, (3, 0), (), "DockRow", None),
		"DockSize": (6, 2, (3, 0), (), "DockSize", None),
		"DockSizePercentage": (5, 2, (5, 0), (), "DockSizePercentage", None),
		"EsDockSite": (4, 2, (3, 0), (), "EsDockSite", None),
		"Visible": (1, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"DockColumn" : ((3, LCID, 4, 0),()),
		"DockRow" : ((2, LCID, 4, 0),()),
		"DockSize" : ((6, LCID, 4, 0),()),
		"DockSizePercentage" : ((5, LCID, 4, 0),()),
		"EsDockSite" : ((4, LCID, 4, 0),()),
		"Visible" : ((1, LCID, 4, 0),()),
	}

class ICountDialog(DispatchBaseClass):
	CLSID = IID('{285304C7-63C4-11D2-AD39-00A0241857FD}')
	coclass_clsid = IID('{285304C9-63C4-11D2-AD39-00A0241857FD}')

	def Entry(self):
		"""Retrieves a user entry in a dialog"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (3, 0), (),)

	def Show(self):
		"""Shows a dialog"""
		return self._oleobj_.InvokeTypes(1, LCID, 1, (11, 0), (),)

	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}

class IData1D(DispatchBaseClass):
	CLSID = IID('{E1B6CE13-0BE5-11D2-AD13-00A0241857FD}')
	coclass_clsid = IID('{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}')

	def Dispose(self):
		"""Releases the internal data"""
		return self._oleobj_.InvokeTypes(13, LCID, 1, (24, 0), (),)

	# Result is of type ComplexNumber
	# The method Intensity is actually a property, but must be used as a method to correctly pass the arguments
	def Intensity(self, Position=defaultNamedNotOptArg):
		"""Gets or sets the intensity of 1D data at a specified position"""
		ret = self._oleobj_.InvokeTypes(9, LCID, 2, (13, 0), ((5, 0),),Position
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Intensity', '{DB3B5181-0BC2-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type ComplexNumber
	# The method PointIntensity is actually a property, but must be used as a method to correctly pass the arguments
	def PointIntensity(self, X=defaultNamedNotOptArg):
		"""Gets or sets the intensity of 1D data for a specified point"""
		ret = self._oleobj_.InvokeTypes(10, LCID, 2, (13, 0), ((3, 0),),X
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'PointIntensity', '{DB3B5181-0BC2-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Data1D
	def PointSelection(self, Start=defaultNamedNotOptArg, End=defaultNamedNotOptArg):
		"""Extracts 1D data for a specified range of points"""
		ret = self._oleobj_.InvokeTypes(4, LCID, 1, (13, 0), ((3, 0), (3, 0)),Start
			, End)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'PointSelection', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	def Points(self):
		"""Gets the number of points contained in 1D data"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (3, 0), (),)

	# Result is of type Range1D
	def Range(self):
		"""Gets the range of 1D data"""
		ret = self._oleobj_.InvokeTypes(6, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Range', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def Replace(self, Data=defaultNamedNotOptArg):
		"""Replaces all or part of 1D data with new data"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (24, 0), ((13, 0),),Data
			)

	# Result is of type Data1D
	def Selection(self, Range=defaultNamedNotOptArg):
		"""Extracts 1D data for a specified range"""
		ret = self._oleobj_.InvokeTypes(3, LCID, 1, (13, 0), ((13, 0),),Range
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Selection', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# The method SetIntensity is actually a property, but must be used as a method to correctly pass the arguments
	def SetIntensity(self, Position=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets or sets the intensity of 1D data at a specified position"""
		return self._oleobj_.InvokeTypes(9, LCID, 8, (24, 0), ((5, 0), (13, 0)),Position
			, arg1)

	# The method SetPointIntensity is actually a property, but must be used as a method to correctly pass the arguments
	def SetPointIntensity(self, X=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets or sets the intensity of 1D data for a specified point"""
		return self._oleobj_.InvokeTypes(10, LCID, 8, (24, 0), ((3, 0), (13, 0)),X
			, arg1)

	def SetSize(self, Points=defaultNamedNotOptArg):
		"""Sets the number of points contained in 1D data"""
		return self._oleobj_.InvokeTypes(8, LCID, 1, (24, 0), ((3, 0),),Points
			)

	_prop_map_get_ = {
		"Array": (1, 2, (12, 0), (), "Array", None),
		# Property 'Calibration' is an object of type 'Calibration1D'
		"Calibration": (2, 2, (13, 0), (), "Calibration", '{E1B6CE12-0BE5-11D2-AD13-00A0241857FD}'),
		"Imag": (12, 2, (12, 0), (), "Imag", None),
		"Real": (11, 2, (12, 0), (), "Real", None),
		"_Array": (0, 2, (12, 0), (), "_Array", None),
	}
	_prop_map_put_ = {
		"Array" : ((1, LCID, 4, 0),()),
		"Calibration" : ((2, LCID, 4, 0),()),
		"Imag" : ((12, LCID, 4, 0),()),
		"Real" : ((11, LCID, 4, 0),()),
		"_Array" : ((0, LCID, 4, 0),()),
	}
	# Default property for this class is '_Array'
	def __call__(self):
		return self._ApplyTypes_(*(0, 2, (12, 0), (), "_Array", None))
	# str(ob) and int(ob) will use __call__
	def __unicode__(self, *args):
		try:
			return unicode(self.__call__(*args))
		except pythoncom.com_error:
			return repr(self)
	def __str__(self, *args):
		return str(self.__unicode__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))

class IData2D(DispatchBaseClass):
	CLSID = IID('{14180829-DCFE-11D1-8884-00A0241857FD}')
	coclass_clsid = IID('{1418082A-DCFE-11D1-8884-00A0241857FD}')

	def Dispose(self):
		"""Releases the internal data"""
		return self._oleobj_.InvokeTypes(14, LCID, 1, (24, 0), (),)

	# Result is of type ComplexNumber
	# The method Intensity is actually a property, but must be used as a method to correctly pass the arguments
	def Intensity(self, Position=defaultNamedNotOptArg):
		"""Gets or sets the intensity of 2D data at a specified position"""
		ret = self._oleobj_.InvokeTypes(12, LCID, 2, (13, 0), ((13, 0),),Position
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Intensity', '{DB3B5181-0BC2-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Data1D
	# The method LineAtX is actually a property, but must be used as a method to correctly pass the arguments
	def LineAtX(self, X=defaultNamedNotOptArg):
		"""Gets or sets a line at specified position"""
		ret = self._oleobj_.InvokeTypes(9, LCID, 2, (13, 0), ((3, 0),),X
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'LineAtX', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Data1D
	# The method LineAtY is actually a property, but must be used as a method to correctly pass the arguments
	def LineAtY(self, Y=defaultNamedNotOptArg):
		"""Gets or sets a line at specified position"""
		ret = self._oleobj_.InvokeTypes(10, LCID, 2, (13, 0), ((3, 0),),Y
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'LineAtY', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type ComplexNumber
	# The method PixelIntensity is actually a property, but must be used as a method to correctly pass the arguments
	def PixelIntensity(self, X=defaultNamedNotOptArg, Y=defaultNamedNotOptArg):
		"""Gets or sets the intensity of 2D data for a specified pixel"""
		ret = self._oleobj_.InvokeTypes(13, LCID, 2, (13, 0), ((3, 0), (3, 0)),X
			, Y)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'PixelIntensity', '{DB3B5181-0BC2-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Data2D
	def PixelSelection(self, StartX=defaultNamedNotOptArg, StartY=defaultNamedNotOptArg, EndX=defaultNamedNotOptArg, EndY=defaultNamedNotOptArg):
		"""Extracts 2D data for a specified range of pixels"""
		ret = self._oleobj_.InvokeTypes(4, LCID, 1, (13, 0), ((3, 0), (3, 0), (3, 0), (3, 0)),StartX
			, StartY, EndX, EndY)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'PixelSelection', '{1418082A-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def PixelsX(self):
		"""Gets the number of pixels in X-direction contained in 2D data"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (3, 0), (),)

	def PixelsY(self):
		"""Gets the number of pixels in Y-direction contained in 2D data"""
		return self._oleobj_.InvokeTypes(8, LCID, 1, (3, 0), (),)

	# Result is of type Range2D
	def Range(self):
		"""Gets the range of 2D data"""
		ret = self._oleobj_.InvokeTypes(6, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Range', '{78D416E3-00BF-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def Replace(self, Data=defaultNamedNotOptArg):
		"""Replaces all or part of 2D data with new data"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (24, 0), ((13, 0),),Data
			)

	# Result is of type Data2D
	def Selection(self, Range=defaultNamedNotOptArg):
		"""Extracts 2D data for a specified range"""
		ret = self._oleobj_.InvokeTypes(3, LCID, 1, (13, 0), ((13, 0),),Range
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Selection', '{1418082A-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# The method SetIntensity is actually a property, but must be used as a method to correctly pass the arguments
	def SetIntensity(self, Position=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets or sets the intensity of 2D data at a specified position"""
		return self._oleobj_.InvokeTypes(12, LCID, 8, (24, 0), ((13, 0), (13, 0)),Position
			, arg1)

	# The method SetLineAtX is actually a property, but must be used as a method to correctly pass the arguments
	def SetLineAtX(self, X=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets or sets a line at specified position"""
		return self._oleobj_.InvokeTypes(9, LCID, 8, (24, 0), ((3, 0), (13, 0)),X
			, arg1)

	# The method SetLineAtY is actually a property, but must be used as a method to correctly pass the arguments
	def SetLineAtY(self, Y=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets or sets a line at specified position"""
		return self._oleobj_.InvokeTypes(10, LCID, 8, (24, 0), ((3, 0), (13, 0)),Y
			, arg1)

	# The method SetPixelIntensity is actually a property, but must be used as a method to correctly pass the arguments
	def SetPixelIntensity(self, X=defaultNamedNotOptArg, Y=defaultNamedNotOptArg, arg2=defaultUnnamedArg):
		"""Gets or sets the intensity of 2D data for a specified pixel"""
		return self._oleobj_.InvokeTypes(13, LCID, 8, (24, 0), ((3, 0), (3, 0), (13, 0)),X
			, Y, arg2)

	def SetSize(self, PixelsX=defaultNamedNotOptArg, PixelsY=defaultNamedNotOptArg):
		"""Sets the number of pixels in the 2D data"""
		return self._oleobj_.InvokeTypes(11, LCID, 1, (24, 0), ((3, 0), (3, 0)),PixelsX
			, PixelsY)

	_prop_map_get_ = {
		"Array": (1, 2, (12, 0), (), "Array", None),
		# Property 'Calibration' is an object of type 'Calibration2D'
		"Calibration": (2, 2, (13, 0), (), "Calibration", '{14180826-DCFE-11D1-8884-00A0241857FD}'),
		"_Array": (0, 2, (12, 0), (), "_Array", None),
	}
	_prop_map_put_ = {
		"Array" : ((1, LCID, 4, 0),()),
		"Calibration" : ((2, LCID, 4, 0),()),
		"_Array" : ((0, LCID, 4, 0),()),
	}
	# Default property for this class is '_Array'
	def __call__(self):
		return self._ApplyTypes_(*(0, 2, (12, 0), (), "_Array", None))
	# str(ob) and int(ob) will use __call__
	def __unicode__(self, *args):
		try:
			return unicode(self.__call__(*args))
		except pythoncom.com_error:
			return repr(self)
	def __str__(self, *args):
		return str(self.__unicode__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))

class IDigitalIoServer(DispatchBaseClass):
	CLSID = IID('{7F37A869-7BE5-4153-BC6F-D2BBB8803192}')
	coclass_clsid = IID('{79DE1525-0A05-4093-ABFA-6E282EF6910F}')

	def GetSignalState(self, SignalName=defaultNamedNotOptArg):
		"""Gets the state of a Digital I/O line"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (11, 0), ((8, 0),),SignalName
			)

	def SetSignalState(self, SignalName=defaultNamedNotOptArg, State=defaultNamedNotOptArg):
		"""Sets the state of a Digital I/O line"""
		return self._oleobj_.InvokeTypes(1, LCID, 1, (24, 0), ((8, 0), (11, 0)),SignalName
			, State)

	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}

class IDisplayWindow(DispatchBaseClass):
	CLSID = IID('{A95A2BC5-B871-11D1-887C-00A0241857FD}')
	coclass_clsid = IID('{A95A2BC3-B871-11D1-887C-00A0241857FD}')

	def AddDisplay(self, Name=defaultNamedNotOptArg, DisplayType=defaultNamedNotOptArg, DisplaySubType=defaultNamedNotOptArg, SplitDirection=defaultNamedNotOptArg
			, NewSplitPortion=defaultNamedNotOptArg, SplitDisplay=defaultNamedOptArg):
		"""Adds a new Display and split display window"""
		ret = self._oleobj_.InvokeTypes(9, LCID, 1, (9, 0), ((8, 0), (3, 0), (3, 0), (3, 0), (5, 0), (12, 16)),Name
			, DisplayType, DisplaySubType, SplitDirection, NewSplitPortion, SplitDisplay
			)
		if ret is not None:
			ret = Dispatch(ret, 'AddDisplay', None, UnicodeToString=0)
		return ret

	def AddHiddenDisplay(self, Name=defaultNamedNotOptArg, DisplayType=defaultNamedNotOptArg, DisplaySubType=defaultNamedNotOptArg):
		"""Adds a new hidden Display"""
		ret = self._oleobj_.InvokeTypes(10, LCID, 1, (9, 0), ((8, 0), (3, 0), (3, 0)),Name
			, DisplayType, DisplaySubType)
		if ret is not None:
			ret = Dispatch(ret, 'AddHiddenDisplay', None, UnicodeToString=0)
		return ret

	def ArrangePanes(self):
		"""Arrange all panes in a regularly sized matrix"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), (),)

	def CreateBinaryProcessingLink(self, LinkType=defaultNamedNotOptArg, SourceDisplayObject1=defaultNamedNotOptArg, SourceObject2=defaultNamedNotOptArg, TargetDisplayObject=defaultNamedNotOptArg
			, Selection=defaultNamedNotOptArg, Parameters=defaultNamedNotOptArg, AutoscaleType=defaultNamedNotOptArg):
		"""Establishes a arithmetic link between display objects"""
		return self._oleobj_.InvokeTypes(27, LCID, 1, (24, 0), ((3, 0), (9, 0), (9, 0), (9, 0), (12, 0), (12, 0), (3, 0)),LinkType
			, SourceDisplayObject1, SourceObject2, TargetDisplayObject, Selection, Parameters
			, AutoscaleType)

	def CreateEnergyWindowStyle(self, Name=defaultNamedNotOptArg, WindowFillColor=defaultNamedNotOptArg, SpectrumFillColor=defaultNamedNotOptArg, BorderColor=defaultNamedNotOptArg
			, HasOrdinal=defaultNamedNotOptArg):
		"""Creates an energy window style of the given characteristics"""
		return self._oleobj_.InvokeTypes(22, LCID, 1, (24, 0), ((8, 0), (13, 0), (13, 0), (13, 0), (11, 0)),Name
			, WindowFillColor, SpectrumFillColor, BorderColor, HasOrdinal)

	def CreateImageAutoscaleStyle(self, Name=defaultNamedNotOptArg, HorizGridLines=defaultNamedNotOptArg, VertGridLines=defaultNamedNotOptArg, HistogramRange=defaultNamedNotOptArg
			, AutoscaleMode=defaultNamedNotOptArg):
		"""Creates an image style with specified autoscale parameters"""
		return self._oleobj_.InvokeTypes(30, LCID, 1, (24, 0), ((8, 0), (3, 0), (3, 0), (5, 0), (3, 0)),Name
			, HorizGridLines, VertGridLines, HistogramRange, AutoscaleMode)

	def CreateImagePositionMarkerStyle(self, Name=defaultNamedNotOptArg, LineColor=defaultNamedNotOptArg, HasOrdinal=defaultNamedNotOptArg, IsLocked=defaultNamedNotOptArg):
		"""Creates a image position marker style of the given characteristics"""
		return self._oleobj_.InvokeTypes(29, LCID, 1, (24, 0), ((8, 0), (13, 0), (11, 0), (11, 0)),Name
			, LineColor, HasOrdinal, IsLocked)

	def CreateLineMarkerStyle(self, Name=defaultNamedNotOptArg, LineColor=defaultNamedNotOptArg, HasOrdinal=defaultNamedNotOptArg, IsLocked=defaultNamedNotOptArg
			, Outline=defaultNamedNotOptArg, ThickLine=defaultNamedNotOptArg, DirectedLine=defaultNamedNotOptArg):
		"""Creates a line marker style of the given characteristics"""
		return self._oleobj_.InvokeTypes(24, LCID, 1, (24, 0), ((8, 0), (13, 0), (11, 0), (11, 0), (11, 0), (11, 0), (11, 0)),Name
			, LineColor, HasOrdinal, IsLocked, Outline, ThickLine
			, DirectedLine)

	def CreateMonochromeImageStyle(self, Name=defaultNamedNotOptArg, Red=defaultNamedNotOptArg, Green=defaultNamedNotOptArg, Blue=defaultNamedNotOptArg):
		"""Creates a monochrome image style of a given color"""
		return self._oleobj_.InvokeTypes(19, LCID, 1, (24, 0), ((8, 0), (2, 0), (2, 0), (2, 0)),Name
			, Red, Green, Blue)

	def CreateObjectLink(self, DisplayObject1=defaultNamedNotOptArg, DisplayObject2=defaultNamedNotOptArg, Type=defaultNamedNotOptArg):
		"""Establishes a link between display objects"""
		return self._oleobj_.InvokeTypes(12, LCID, 1, (24, 0), ((9, 0), (9, 0), (3, 0)),DisplayObject1
			, DisplayObject2, Type)

	def CreateOvalMarkerStyle(self, Name=defaultNamedNotOptArg, LineColor=defaultNamedNotOptArg, HasOrdinal=defaultNamedNotOptArg, IsLocked=defaultNamedNotOptArg
			, Outline=defaultNamedNotOptArg, ThickLine=defaultNamedNotOptArg):
		"""Creates an oval marker style of the given characteristics"""
		return self._oleobj_.InvokeTypes(25, LCID, 1, (24, 0), ((8, 0), (13, 0), (11, 0), (11, 0), (11, 0), (11, 0)),Name
			, LineColor, HasOrdinal, IsLocked, Outline, ThickLine
			)

	def CreateProfileStyle(self, Name=defaultNamedNotOptArg, HasPoints=defaultNamedNotOptArg, HasLines=defaultNamedNotOptArg, HasFill=defaultNamedNotOptArg
			, LineColor=defaultNamedNotOptArg, FillColor=defaultNamedNotOptArg, PointType=defaultNamedNotOptArg, HasOrdinal=defaultNamedNotOptArg):
		"""Creates a profile style of the given characteristics"""
		return self._oleobj_.InvokeTypes(21, LCID, 1, (24, 0), ((8, 0), (11, 0), (11, 0), (11, 0), (13, 0), (13, 0), (3, 0), (11, 0)),Name
			, HasPoints, HasLines, HasFill, LineColor, FillColor
			, PointType, HasOrdinal)

	def CreateScalarProcessingLink(self, LinkType=defaultNamedNotOptArg, SourceDisplayObject=defaultNamedNotOptArg, Selection=defaultNamedNotOptArg, Parameters=defaultNamedNotOptArg):
		"""Establishes a statistics link with a display object"""
		return self._oleobj_.InvokeTypes(28, LCID, 1, (24, 0), ((3, 0), (9, 0), (12, 0), (12, 0)),LinkType
			, SourceDisplayObject, Selection, Parameters)

	def CreateSpectrumStyle(self, Name=defaultNamedNotOptArg, HasBorder=defaultNamedNotOptArg, HasFill=defaultNamedNotOptArg, BorderColor=defaultNamedNotOptArg
			, FillColor=defaultNamedNotOptArg, HasOrdinal=defaultNamedNotOptArg):
		"""Creates a spectrum style of the given characteristics"""
		return self._oleobj_.InvokeTypes(20, LCID, 1, (24, 0), ((8, 0), (11, 0), (11, 0), (13, 0), (13, 0), (11, 0)),Name
			, HasBorder, HasFill, BorderColor, FillColor, HasOrdinal
			)

	def CreateUnaryProcessingLink(self, LinkType=defaultNamedNotOptArg, SourceDisplayObject=defaultNamedNotOptArg, TargetDisplayObject=defaultNamedNotOptArg, Selection=defaultNamedNotOptArg
			, Parameters=defaultNamedNotOptArg, AutoscaleType=defaultNamedNotOptArg):
		"""Establishes a processing link between display objects"""
		return self._oleobj_.InvokeTypes(14, LCID, 1, (24, 0), ((3, 0), (9, 0), (9, 0), (12, 0), (12, 0), (3, 0)),LinkType
			, SourceDisplayObject, TargetDisplayObject, Selection, Parameters, AutoscaleType
			)

	def DeleteDisplay(self, Display=defaultNamedNotOptArg):
		"""Delete the specified display"""
		return self._oleobj_.InvokeTypes(11, LCID, 1, (24, 0), ((9, 0),),Display
			)

	def DeleteEmptyPanes(self):
		"""Delete all empty panes"""
		return self._oleobj_.InvokeTypes(31, LCID, 1, (24, 0), (),)

	def DeleteObjectLinks(self, DisplayObject=defaultNamedNotOptArg):
		"""Deletes all links with specified display object"""
		return self._oleobj_.InvokeTypes(13, LCID, 1, (24, 0), ((9, 0),),DisplayObject
			)

	def DeletePane(self, Display=defaultNamedNotOptArg):
		"""Delete the specified display and its associated pane"""
		return self._oleobj_.InvokeTypes(23, LCID, 1, (24, 0), ((9, 0),),Display
			)

	def DeleteProcessingLinks(self, DisplayObject=defaultNamedNotOptArg):
		"""Deletes all links with specified display object"""
		return self._oleobj_.InvokeTypes(15, LCID, 1, (24, 0), ((9, 0),),DisplayObject
			)

	# Result is of type StringCollection
	def DisplayNames(self):
		"""Returns a string collection with the names of all Displays present in the Display Window"""
		ret = self._oleobj_.InvokeTypes(4, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def FindDisplay(self, Name=defaultNamedNotOptArg):
		"""Finds the display with the specified name"""
		ret = self._oleobj_.InvokeTypes(5, LCID, 1, (9, 0), ((8, 0),),Name
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindDisplay', None, UnicodeToString=0)
		return ret

	def GetFilePath(self):
		"""Gets the current file path"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(26, LCID, 1, (8, 0), (),)

	def IsNull(self):
		"""Queries if the object refers to a valid display window."""
		return self._oleobj_.InvokeTypes(18, LCID, 1, (11, 0), (),)

	def SelectedDisplay(self):
		"""Finds the currently selected Display"""
		ret = self._oleobj_.InvokeTypes(6, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'SelectedDisplay', None, UnicodeToString=0)
		return ret

	# Result is of type StringCollection
	def SelectedDisplayNames(self):
		"""Get the names of all the selected displays"""
		ret = self._oleobj_.InvokeTypes(32, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'SelectedDisplayNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def SelectedObject(self):
		"""Finds the currently selected Display Object"""
		ret = self._oleobj_.InvokeTypes(7, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'SelectedObject', None, UnicodeToString=0)
		return ret

	# Result is of type StringCollection
	def SelectedObjectNames(self):
		"""Returns a string collection with the names of all selected objects present in the Display Window"""
		ret = self._oleobj_.InvokeTypes(16, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'SelectedObjectNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type StringCollection
	def SelectedObjectPaths(self):
		"""Returns a string collection with the paths of all selected objects present in the Display Window"""
		ret = self._oleobj_.InvokeTypes(17, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'SelectedObjectPaths', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def UnhideDisplay(self, Display=defaultNamedNotOptArg, SplitDirection=defaultNamedNotOptArg, NewSplitPortion=defaultNamedNotOptArg, SplitDisplay=defaultNamedOptArg):
		"""Unhides a Display"""
		return self._oleobj_.InvokeTypes(8, LCID, 1, (24, 0), ((9, 0), (3, 0), (5, 0), (12, 16)),Display
			, SplitDirection, NewSplitPortion, SplitDisplay)

	_prop_map_get_ = {
		"Name": (1, 2, (8, 0), (), "Name", None),
		"Update": (2, 2, (11, 0), (), "Update", None),
	}
	_prop_map_put_ = {
		"Name" : ((1, LCID, 4, 0),()),
		"Update" : ((2, LCID, 4, 0),()),
	}

class IDxp(DispatchBaseClass):
	CLSID = IID('{111763C0-67CF-11D3-B149-00A0C9E5C10B}')
	coclass_clsid = IID('{111763C1-67CF-11D3-B149-00A0C9E5C10B}')

	# Result is of type StringCollection
	def DataTypes(self):
		"""Returns all types of diagnostic data"""
		ret = self._oleobj_.InvokeTypes(7, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DataTypes', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type StringCollection
	def FloatParameterNames(self):
		"""Returns all float parameter names"""
		ret = self._oleobj_.InvokeTypes(8, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'FloatParameterNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def FloatParameterRange(self, ParameterName=defaultNamedNotOptArg):
		"""Returns the range of valid values of the named parameter"""
		ret = self._oleobj_.InvokeTypes(4, LCID, 1, (13, 0), ((8, 0),),ParameterName
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'FloatParameterRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def GetDiagnosticData(self, DataType=defaultNamedNotOptArg):
		"""Returns an array of diagnostic data of the selected type"""
		return self._ApplyTypes_(1, 1, (12, 0), ((8, 0),), 'GetDiagnosticData', None,DataType
			)

	def GetParameter(self, ParameterName=defaultNamedNotOptArg):
		"""Gets the value of the named parameter"""
		return self._ApplyTypes_(2, 1, (12, 0), ((8, 0),), 'GetParameter', None,ParameterName
			)

	def Label(self, ParameterName=defaultNamedNotOptArg):
		"""Returns the descriptive label associated with a parameter name"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(6, LCID, 1, (8, 0), ((8, 0),),ParameterName
			)

	def SetParameter(self, ParameterName=defaultNamedNotOptArg, ParameterValue=defaultNamedNotOptArg):
		"""Sets the value of the named parameter"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), ((8, 0), (12, 0)),ParameterName
			, ParameterValue)

	# Result is of type StringCollection
	def StringParameterNames(self):
		"""Returns all string parameter names"""
		ret = self._oleobj_.InvokeTypes(9, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'StringParameterNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type StringCollection
	def StringParameterValues(self, ParameterName=defaultNamedNotOptArg):
		"""Returns the valid values of the named parameter"""
		ret = self._oleobj_.InvokeTypes(5, LCID, 1, (13, 0), ((8, 0),),ParameterName
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'StringParameterValues', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}

class IEelsQuantTable(DispatchBaseClass):
	CLSID = IID('{8FB8AAE2-65B1-45B5-94A6-E7D99278F7A1}')
	coclass_clsid = IID('{31091EDA-1A38-484F-97BE-14E4489F1E42}')

	# The method QuantifyFamily is actually a property, but must be used as a method to correctly pass the arguments
	def QuantifyFamily(self, AtomicNumber=defaultNamedNotOptArg):
		"""Gets the current quantification family for an element"""
		return self._oleobj_.InvokeTypes(1, LCID, 2, (3, 0), ((3, 0),),AtomicNumber
			)

	# The method SetQuantifyFamily is actually a property, but must be used as a method to correctly pass the arguments
	def SetQuantifyFamily(self, AtomicNumber=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets the current quantification family for an element"""
		return self._oleobj_.InvokeTypes(1, LCID, 4, (24, 0), ((3, 0), (3, 0)),AtomicNumber
			, arg1)

	# The method SetState is actually a property, but must be used as a method to correctly pass the arguments
	def SetState(self, AtomicNumber=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets the current enabled state of an element"""
		return self._oleobj_.InvokeTypes(65538, LCID, 4, (24, 0), ((3, 0), (11, 0)),AtomicNumber
			, arg1)

	# The method State is actually a property, but must be used as a method to correctly pass the arguments
	def State(self, AtomicNumber=defaultNamedNotOptArg):
		"""Gets the current enabled state of an element"""
		return self._oleobj_.InvokeTypes(65538, LCID, 2, (11, 0), ((3, 0),),AtomicNumber
			)

	_prop_map_get_ = {
		"SelectedElements": (65537, 2, (12, 0), (), "SelectedElements", None),
	}
	_prop_map_put_ = {
		"SelectedElements" : ((65537, LCID, 4, 0),()),
	}

class IEelsStandardsTable(DispatchBaseClass):
	CLSID = IID('{6ADA6906-EBF6-4D17-B2E2-6035702087B2}')
	coclass_clsid = IID('{21E3AC78-349D-497C-AED4-B7177A84B675}')

	def SetStandardsState(self, pStandardsNode=defaultNamedNotOptArg):
		"""Sets the state of the EelsStandardsTable"""
		return self._oleobj_.InvokeTypes(1, LCID, 1, (24, 0), ((9, 0),),pStandardsNode
			)

	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}

class IEnergyMarker(DispatchBaseClass):
	CLSID = IID('{57EE3A64-83EF-11D2-AD6F-00A0241857FD}')
	coclass_clsid = IID('{57EE3A65-83EF-11D2-AD6F-00A0241857FD}')

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (11, 0), (),)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		"Lock": (65541, 2, (11, 0), (), "Lock", None),
		"Name": (65538, 2, (8, 0), (), "Name", None),
		"Ordinal": (65539, 2, (3, 0), (), "Ordinal", None),
		"Position": (1, 2, (5, 0), (), "Position", None),
		"Selectable": (65542, 2, (11, 0), (), "Selectable", None),
		"Style": (65540, 2, (8, 0), (), "Style", None),
		"Visible": (65537, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Lock" : ((65541, LCID, 4, 0),()),
		"Name" : ((65538, LCID, 4, 0),()),
		"Ordinal" : ((65539, LCID, 4, 0),()),
		"Position" : ((1, LCID, 4, 0),()),
		"Selectable" : ((65542, LCID, 4, 0),()),
		"Style" : ((65540, LCID, 4, 0),()),
		"Visible" : ((65537, LCID, 4, 0),()),
	}

class IEnergyWindow(DispatchBaseClass):
	CLSID = IID('{57EE3A66-83EF-11D2-AD6F-00A0241857FD}')
	coclass_clsid = IID('{57EE3A67-83EF-11D2-AD6F-00A0241857FD}')

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (11, 0), (),)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		"Lock": (65541, 2, (11, 0), (), "Lock", None),
		"Name": (65538, 2, (8, 0), (), "Name", None),
		"Ordinal": (65539, 2, (3, 0), (), "Ordinal", None),
		"Position": (1, 2, (5, 0), (), "Position", None),
		# Property 'Range' is an object of type 'Range1D'
		"Range": (2, 2, (13, 0), (), "Range", '{D5837263-03D9-11D2-AD12-00A0241857FD}'),
		"Selectable": (65542, 2, (11, 0), (), "Selectable", None),
		"Style": (65540, 2, (8, 0), (), "Style", None),
		"Visible": (65537, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Lock" : ((65541, LCID, 4, 0),()),
		"Name" : ((65538, LCID, 4, 0),()),
		"Ordinal" : ((65539, LCID, 4, 0),()),
		"Position" : ((1, LCID, 4, 0),()),
		"Range" : ((2, LCID, 4, 0),()),
		"Selectable" : ((65542, LCID, 4, 0),()),
		"Style" : ((65540, LCID, 4, 0),()),
		"Visible" : ((65537, LCID, 4, 0),()),
	}

class IGridDialog(DispatchBaseClass):
	CLSID = IID('{5DEC2CE1-628D-11D2-AD39-00A0241857FD}')
	coclass_clsid = IID('{5DEC2CE3-628D-11D2-AD39-00A0241857FD}')

	def AddCheckBox(self, Prompt=defaultNamedNotOptArg, Checked=defaultNamedNotOptArg):
		"""Adds an check box to the grid dialog for input of boolean settings"""
		return self._oleobj_.InvokeTypes(6, LCID, 1, (24, 0), ((8, 0), (11, 0)),Prompt
			, Checked)

	def AddComboBox(self, Prompt=defaultNamedNotOptArg, String=defaultNamedNotOptArg, List=defaultNamedNotOptArg):
		"""Adds an combo box to the grid dialog for entry or selection of strings"""
		return self._oleobj_.InvokeTypes(8, LCID, 1, (24, 0), ((8, 0), (8, 0), (13, 0)),Prompt
			, String, List)

	def AddCountEditBox(self, Prompt=defaultNamedNotOptArg, Count=defaultNamedNotOptArg, Test=7, Min=0
			, Max=0):
		"""Adds an edit box to the grid dialog for input of integer numbers"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (24, 0), ((8, 0), (3, 0), (3, 48), (3, 48), (3, 48)),Prompt
			, Count, Test, Min, Max)

	def AddListBox(self, Prompt=defaultNamedNotOptArg, String=defaultNamedNotOptArg, List=defaultNamedNotOptArg):
		"""Adds an list box to the grid dialog for selection of strings"""
		return self._oleobj_.InvokeTypes(9, LCID, 1, (24, 0), ((8, 0), (8, 0), (13, 0)),Prompt
			, String, List)

	def AddSpinBox(self, Prompt=defaultNamedNotOptArg, Count=defaultNamedNotOptArg, Test=7, Min=0
			, Max=0):
		"""Adds a spin box to the grid dialog for input of integer numbers"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (24, 0), ((8, 0), (3, 0), (3, 48), (3, 48), (3, 48)),Prompt
			, Count, Test, Min, Max)

	def AddStringEditBox(self, Prompt=defaultNamedNotOptArg, String=defaultNamedNotOptArg):
		"""Adds an edit box to the grid dialog for input of strings"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), ((8, 0), (8, 0)),Prompt
			, String)

	def AddValueEditBox(self, Prompt=defaultNamedNotOptArg, Value=defaultNamedNotOptArg, SigDigits=4, Test=7
			, Min=0.0, Max=0.0):
		"""Adds an edit box to the grid dialog for input of float numbers"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (24, 0), ((8, 0), (5, 0), (3, 48), (3, 48), (5, 48), (5, 48)),Prompt
			, Value, SigDigits, Test, Min, Max
			)

	def Entry(self, Prompt=defaultNamedNotOptArg):
		"""Retrieves a user entry in a dialog"""
		return self._ApplyTypes_(2, 1, (12, 0), ((8, 0),), 'Entry', None,Prompt
			)

	def Show(self):
		"""Shows a dialog"""
		return self._oleobj_.InvokeTypes(1, LCID, 1, (11, 0), (),)

	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}

class IImage(DispatchBaseClass):
	CLSID = IID('{57EE3A50-83EF-11D2-AD6F-00A0241857FD}')
	coclass_clsid = IID('{57EE3A51-83EF-11D2-AD6F-00A0241857FD}')

	# Result is of type Data2D
	def AddSeries(self, Range=defaultNamedNotOptArg):
		"""Adds data in a series"""
		ret = self._oleobj_.InvokeTypes(65548, LCID, 1, (13, 0), ((13, 0),),Range
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddSeries', '{1418082A-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def AppendData(self, ImageData=defaultNamedNotOptArg, Tag=defaultNamedOptArg):
		"""Appends the supplied data to the series of an Image"""
		return self._oleobj_.InvokeTypes(11, LCID, 1, (24, 0), ((13, 0), (12, 16)),ImageData
			, Tag)

	def AppendSeries(self, Image=defaultNamedNotOptArg):
		"""Appends the data series of an Image to another Image"""
		return self._oleobj_.InvokeTypes(10, LCID, 1, (24, 0), ((13, 0),),Image
			)

	def ClearSeries(self):
		"""Clears the data series"""
		return self._oleobj_.InvokeTypes(65541, LCID, 1, (24, 0), (),)

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(131080, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(131079, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def ExecuteAutoscale(self):
		"""Executes an autoscale on the image"""
		return self._oleobj_.InvokeTypes(17, LCID, 1, (24, 0), (),)

	# Result is of type Range1D
	def GetSeriesRange(self):
		"""Gets the valid range of images in a series contained in an Image object"""
		ret = self._oleobj_.InvokeTypes(65545, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetSeriesRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Data1D
	def Histogram(self, HistogramSize=defaultNamedNotOptArg):
		"""Calculates histogram of image"""
		ret = self._oleobj_.InvokeTypes(14, LCID, 1, (13, 0), ((3, 0),),HistogramSize
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Histogram', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def IntensityRange(self, Threshold=defaultNamedNotOptArg):
		"""Calculates the intensity range in the image from the histogram"""
		ret = self._oleobj_.InvokeTypes(15, LCID, 1, (13, 0), ((5, 0),),Threshold
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'IntensityRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(131081, LCID, 1, (11, 0), (),)

	def MoveSeries(self, Image=defaultNamedNotOptArg):
		"""Moves the data series of an Image to another Image"""
		return self._oleobj_.InvokeTypes(12, LCID, 1, (24, 0), ((13, 0),),Image
			)

	def SeriesCalibration(self):
		"""Gets the calibration if one is associated with a data series"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'SeriesCalibration', None, UnicodeToString=0)
		return ret

	# Result is of type Data2D
	def SeriesData(self, Index=defaultNamedNotOptArg):
		"""Gets data at specified index in data series"""
		ret = self._oleobj_.InvokeTypes(65542, LCID, 1, (13, 0), ((3, 0),),Index
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'SeriesData', '{1418082A-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def SeriesTag(self, Index=defaultNamedNotOptArg):
		"""Gets tag at specified index in data series"""
		return self._ApplyTypes_(65543, 1, (12, 0), ((3, 0),), 'SeriesTag', None,Index
			)

	def Set1DFileSeries(self, Path=defaultNamedNotOptArg, Size=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Associates a 1D data series with an Image"""
		return self._oleobj_.InvokeTypes(65546, LCID, 1, (24, 0), ((8, 0), (3, 0), (13, 0)),Path
			, Size, Calibration)

	def Set2DFileSeries(self, Path=defaultNamedNotOptArg, SizeX=defaultNamedNotOptArg, SizeY=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Associates a 2D data series with an Image"""
		return self._oleobj_.InvokeTypes(65547, LCID, 1, (24, 0), ((8, 0), (3, 0), (3, 0), (13, 0)),Path
			, SizeX, SizeY, Calibration)

	def SetDataRegion(self, Data=defaultNamedNotOptArg):
		"""Replaces a region of the existing data with new data"""
		return self._oleobj_.InvokeTypes(13, LCID, 1, (24, 0), ((13, 0),),Data
			)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(9, LCID, 1, (3, 0), (),)

	def Write(self, Path=defaultNamedNotOptArg, Format=defaultNamedNotOptArg):
		"""Saves data in a selected format"""
		return self._oleobj_.InvokeTypes(65549, LCID, 1, (24, 0), ((8, 0), (8, 0)),Path
			, Format)

	_prop_map_get_ = {
		"Autoscale": (6, 2, (11, 0), (), "Autoscale", None),
		"Brightness": (3, 2, (5, 0), (), "Brightness", None),
		# Property 'Calibration' is an object of type 'Calibration2D'
		"Calibration": (2, 2, (13, 0), (), "Calibration", '{14180826-DCFE-11D1-8884-00A0241857FD}'),
		"Contrast": (4, 2, (5, 0), (), "Contrast", None),
		# Property 'Data' is an object of type 'Data2D'
		"Data": (1, 2, (13, 0), (), "Data", '{1418082A-DCFE-11D1-8884-00A0241857FD}'),
		# Property 'DisplayIntensityRange' is an object of type 'Range1D'
		"DisplayIntensityRange": (7, 2, (13, 0), (), "DisplayIntensityRange", '{D5837263-03D9-11D2-AD12-00A0241857FD}'),
		"Gamma": (5, 2, (5, 0), (), "Gamma", None),
		"IntensityScaling": (16, 2, (3, 0), (), "IntensityScaling", None),
		"Lock": (131077, 2, (11, 0), (), "Lock", None),
		"Name": (131074, 2, (8, 0), (), "Name", None),
		"NumberInSeries": (65537, 2, (3, 0), (), "NumberInSeries", None),
		"ObjectInfo": (65539, 2, (9, 0), (), "ObjectInfo", None),
		"Ordinal": (131075, 2, (3, 0), (), "Ordinal", None),
		"ScaleMarker": (8, 2, (11, 0), (), "ScaleMarker", None),
		"Selectable": (131078, 2, (11, 0), (), "Selectable", None),
		"SeriesCount": (65538, 2, (3, 0), (), "SeriesCount", None),
		"SeriesFilePath": (65540, 2, (8, 0), (), "SeriesFilePath", None),
		"Style": (131076, 2, (8, 0), (), "Style", None),
		"Visible": (131073, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Autoscale" : ((6, LCID, 4, 0),()),
		"Brightness" : ((3, LCID, 4, 0),()),
		"Calibration" : ((2, LCID, 4, 0),()),
		"Contrast" : ((4, LCID, 4, 0),()),
		"Data" : ((1, LCID, 4, 0),()),
		"DisplayIntensityRange" : ((7, LCID, 4, 0),()),
		"Gamma" : ((5, LCID, 4, 0),()),
		"IntensityScaling" : ((16, LCID, 4, 0),()),
		"Lock" : ((131077, LCID, 4, 0),()),
		"Name" : ((131074, LCID, 4, 0),()),
		"NumberInSeries" : ((65537, LCID, 4, 0),()),
		"ObjectInfo" : ((65539, LCID, 4, 0),()),
		"Ordinal" : ((131075, LCID, 4, 0),()),
		"ScaleMarker" : ((8, LCID, 4, 0),()),
		"Selectable" : ((131078, LCID, 4, 0),()),
		"SeriesCount" : ((65538, LCID, 4, 0),()),
		"SeriesFilePath" : ((65540, LCID, 4, 0),()),
		"Style" : ((131076, LCID, 4, 0),()),
		"Visible" : ((131073, LCID, 4, 0),()),
	}

class IImageDisplay(DispatchBaseClass):
	"""Dispatch interface for ImageDisplay Control"""
	CLSID = IID('{01D66567-80D1-11D2-AD6D-00A0241857FD}')
	coclass_clsid = IID('{01D66568-80D1-11D2-AD6D-00A0241857FD}')

	# Result is of type BeamPositionMarker
	def AddBeamPositionMarker(self, Name=defaultNamedNotOptArg, Position=defaultNamedNotOptArg):
		"""Adds a new beam position marker"""
		ret = self._oleobj_.InvokeTypes(6, LCID, 1, (13, 0), ((8, 0), (13, 0)),Name
			, Position)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddBeamPositionMarker', '{57EE3A55-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Image
	def AddImage(self, Name=defaultNamedNotOptArg, SizeX=defaultNamedNotOptArg, SizeY=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Adds a new image"""
		ret = self._oleobj_.InvokeTypes(4, LCID, 1, (13, 0), ((8, 0), (3, 0), (3, 0), (13, 0)),Name
			, SizeX, SizeY, Calibration)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddImage', '{57EE3A51-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type ImagePositionMarker
	def AddImagePositionMarker(self, Name=defaultNamedNotOptArg, Position=defaultNamedNotOptArg):
		"""Adds a new image position marker"""
		ret = self._oleobj_.InvokeTypes(5, LCID, 1, (13, 0), ((8, 0), (13, 0)),Name
			, Position)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddImagePositionMarker', '{57EE3A53-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type ImageSelectionMarker
	def AddImageSelectionMarker(self, Name=defaultNamedNotOptArg, Range=defaultNamedNotOptArg):
		"""Adds a new image selection marker"""
		ret = self._oleobj_.InvokeTypes(7, LCID, 1, (13, 0), ((8, 0), (13, 0)),Name
			, Range)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddImageSelectionMarker', '{57EE3A57-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type LineMarker
	def AddLineMarker(self, Name=defaultNamedNotOptArg, StartPosition=defaultNamedNotOptArg, EndPosition=defaultNamedNotOptArg):
		"""Adds a new line marker"""
		ret = self._oleobj_.InvokeTypes(9, LCID, 1, (13, 0), ((8, 0), (13, 0), (13, 0)),Name
			, StartPosition, EndPosition)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddLineMarker', '{57EE3A5B-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type OvalMarker
	def AddOvalMarker(self, Name=defaultNamedNotOptArg, Range=defaultNamedNotOptArg):
		"""Adds a new oval marker"""
		ret = self._oleobj_.InvokeTypes(8, LCID, 1, (13, 0), ((8, 0), (13, 0)),Name
			, Range)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddOvalMarker', '{57EE3A59-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type TextMarker
	def AddTextMarker(self, Name=defaultNamedNotOptArg, Range=defaultNamedNotOptArg):
		"""Adds a new text marker"""
		ret = self._oleobj_.InvokeTypes(11, LCID, 1, (13, 0), ((8, 0), (13, 0)),Name
			, Range)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddTextMarker', '{6044AD84-5853-4458-BA2B-FB3C3391C8AD}', UnicodeToString=0)
		return ret

	def Autoscale(self, Type=defaultNamedNotOptArg):
		"""Performs an automatic scaling operation on a Display"""
		return self._oleobj_.InvokeTypes(65548, LCID, 1, (24, 0), ((3, 0),),Type
			)

	def DeleteObject(self, DisplayObject=defaultNamedNotOptArg):
		"""Deletes the specified display object"""
		return self._oleobj_.InvokeTypes(65551, LCID, 1, (24, 0), ((9, 0),),DisplayObject
			)

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display"""
		ret = self._oleobj_.InvokeTypes(65550, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def FindObject(self, Name=defaultNamedNotOptArg):
		"""Finds the display object with the specified name"""
		ret = self._oleobj_.InvokeTypes(65546, LCID, 1, (9, 0), ((8, 0),),Name
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindObject', None, UnicodeToString=0)
		return ret

	# Result is of type Image
	def Image(self):
		"""Gets the image that is contained in this display"""
		ret = self._oleobj_.InvokeTypes(10, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Image', '{57EE3A51-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid display."""
		return self._oleobj_.InvokeTypes(65552, LCID, 1, (11, 0), (),)

	# Result is of type StringCollection
	def ObjectNames(self):
		"""Return a string collection with the names of all Display Objects present in the Display"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'ObjectNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def OrganizeObjects(self, Type=defaultNamedNotOptArg):
		"""Organizes the names and the ordinals of all object of the specified type"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (24, 0), ((3, 0),),Type
			)

	def Path(self):
		"""Gets the path to the Display"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(65547, LCID, 1, (8, 0), (),)

	def SetGrid(self, Style=defaultNamedNotOptArg):
		"""Sets grid lines"""
		return self._oleobj_.InvokeTypes(65549, LCID, 1, (24, 0), ((3, 0),),Style
			)

	# Result is of type StringCollection
	def SortedObjectNames(self, Type=defaultNamedNotOptArg):
		"""Return a string collection with the names of all Display Objects with a specific type present in the Display"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (13, 0), ((3, 0),),Type
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'SortedObjectNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def SubType(self):
		"""Gets the subtype of a Display."""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (3, 0), (),)

	def Type(self):
		"""Gets the type of a Display."""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		"CalibratedView": (12, 2, (11, 0), (), "CalibratedView", None),
		# Property 'DisplayRange' is an object of type 'Range2D'
		"DisplayRange": (65539, 2, (13, 0), (), "DisplayRange", '{78D416E3-00BF-11D2-AD12-00A0241857FD}'),
		"Legend": (65540, 2, (11, 0), (), "Legend", None),
		"Lock": (65542, 2, (11, 0), (), "Lock", None),
		"Name": (65537, 2, (8, 0), (), "Name", None),
		# Property 'SpatialUnit' is an object of type 'SpatialUnit'
		"SpatialUnit": (1, 2, (13, 0), (), "SpatialUnit", '{97033EE5-566E-11D2-AD28-00A0241857FD}'),
		"Style": (65541, 2, (8, 0), (), "Style", None),
		"Visible": (65538, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"CalibratedView" : ((12, LCID, 4, 0),()),
		"DisplayRange" : ((65539, LCID, 4, 0),()),
		"Legend" : ((65540, LCID, 4, 0),()),
		"Lock" : ((65542, LCID, 4, 0),()),
		"Name" : ((65537, LCID, 4, 0),()),
		"SpatialUnit" : ((1, LCID, 4, 0),()),
		"Style" : ((65541, LCID, 4, 0),()),
		"Visible" : ((65538, LCID, 4, 0),()),
	}

class IImagePositionMarker(DispatchBaseClass):
	CLSID = IID('{57EE3A52-83EF-11D2-AD6F-00A0241857FD}')
	coclass_clsid = IID('{57EE3A53-83EF-11D2-AD6F-00A0241857FD}')

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (11, 0), (),)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		"Lock": (65541, 2, (11, 0), (), "Lock", None),
		"Name": (65538, 2, (8, 0), (), "Name", None),
		"Ordinal": (65539, 2, (3, 0), (), "Ordinal", None),
		# Property 'Position' is an object of type 'Position2D'
		"Position": (1, 2, (13, 0), (), "Position", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		"Selectable": (65542, 2, (11, 0), (), "Selectable", None),
		"Style": (65540, 2, (8, 0), (), "Style", None),
		"Visible": (65537, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Lock" : ((65541, LCID, 4, 0),()),
		"Name" : ((65538, LCID, 4, 0),()),
		"Ordinal" : ((65539, LCID, 4, 0),()),
		"Position" : ((1, LCID, 4, 0),()),
		"Selectable" : ((65542, LCID, 4, 0),()),
		"Style" : ((65540, LCID, 4, 0),()),
		"Visible" : ((65537, LCID, 4, 0),()),
	}

class IImageSelectionMarker(DispatchBaseClass):
	CLSID = IID('{57EE3A56-83EF-11D2-AD6F-00A0241857FD}')
	coclass_clsid = IID('{57EE3A57-83EF-11D2-AD6F-00A0241857FD}')

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (11, 0), (),)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		"Lock": (65541, 2, (11, 0), (), "Lock", None),
		"Name": (65538, 2, (8, 0), (), "Name", None),
		"Ordinal": (65539, 2, (3, 0), (), "Ordinal", None),
		# Property 'Position' is an object of type 'Position2D'
		"Position": (1, 2, (13, 0), (), "Position", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		# Property 'Range' is an object of type 'Range2D'
		"Range": (2, 2, (13, 0), (), "Range", '{78D416E3-00BF-11D2-AD12-00A0241857FD}'),
		"Selectable": (65542, 2, (11, 0), (), "Selectable", None),
		"Style": (65540, 2, (8, 0), (), "Style", None),
		"Visible": (65537, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Lock" : ((65541, LCID, 4, 0),()),
		"Name" : ((65538, LCID, 4, 0),()),
		"Ordinal" : ((65539, LCID, 4, 0),()),
		"Position" : ((1, LCID, 4, 0),()),
		"Range" : ((2, LCID, 4, 0),()),
		"Selectable" : ((65542, LCID, 4, 0),()),
		"Style" : ((65540, LCID, 4, 0),()),
		"Visible" : ((65537, LCID, 4, 0),()),
	}

class IImageSimulator(DispatchBaseClass):
	CLSID = IID('{65B16A7A-E63E-11D2-AD9E-00A0241857FD}')
	coclass_clsid = IID('{65B16A7B-E63E-11D2-AD9E-00A0241857FD}')

	_prop_map_get_ = {
		# Property 'Shift' is an object of type 'Vector'
		"Shift": (1, 2, (13, 0), (), "Shift", '{B396F1A1-6430-11D2-AD39-00A0241857FD}'),
	}
	_prop_map_put_ = {
		"Shift" : ((1, LCID, 4, 0),()),
	}

class ILineMarker(DispatchBaseClass):
	CLSID = IID('{57EE3A5A-83EF-11D2-AD6F-00A0241857FD}')
	coclass_clsid = IID('{57EE3A5B-83EF-11D2-AD6F-00A0241857FD}')

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (11, 0), (),)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		# Property 'EndPosition' is an object of type 'Position2D'
		"EndPosition": (4, 2, (13, 0), (), "EndPosition", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		"Lock": (65541, 2, (11, 0), (), "Lock", None),
		"Name": (65538, 2, (8, 0), (), "Name", None),
		"Ordinal": (65539, 2, (3, 0), (), "Ordinal", None),
		# Property 'Position' is an object of type 'Position2D'
		"Position": (1, 2, (13, 0), (), "Position", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		# Property 'Range' is an object of type 'Range2D'
		"Range": (2, 2, (13, 0), (), "Range", '{78D416E3-00BF-11D2-AD12-00A0241857FD}'),
		"Selectable": (65542, 2, (11, 0), (), "Selectable", None),
		# Property 'StartPosition' is an object of type 'Position2D'
		"StartPosition": (3, 2, (13, 0), (), "StartPosition", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		"Style": (65540, 2, (8, 0), (), "Style", None),
		"Visible": (65537, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"EndPosition" : ((4, LCID, 4, 0),()),
		"Lock" : ((65541, LCID, 4, 0),()),
		"Name" : ((65538, LCID, 4, 0),()),
		"Ordinal" : ((65539, LCID, 4, 0),()),
		"Position" : ((1, LCID, 4, 0),()),
		"Range" : ((2, LCID, 4, 0),()),
		"Selectable" : ((65542, LCID, 4, 0),()),
		"StartPosition" : ((3, LCID, 4, 0),()),
		"Style" : ((65540, LCID, 4, 0),()),
		"Visible" : ((65537, LCID, 4, 0),()),
	}

class IMatrix(DispatchBaseClass):
	CLSID = IID('{B396F1A2-6430-11D2-AD39-00A0241857FD}')
	coclass_clsid = IID('{B396F1A3-6430-11D2-AD39-00A0241857FD}')

	def Set(self, XX=defaultNamedNotOptArg, XY=defaultNamedNotOptArg, YX=defaultNamedNotOptArg, YY=defaultNamedNotOptArg):
		"""Sets the elements of a matrix"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (24, 0), ((5, 0), (5, 0), (5, 0), (5, 0)),XX
			, XY, YX, YY)

	_prop_map_get_ = {
		"XX": (1, 2, (5, 0), (), "XX", None),
		"XY": (2, 2, (5, 0), (), "XY", None),
		"YX": (3, 2, (5, 0), (), "YX", None),
		"YY": (4, 2, (5, 0), (), "YY", None),
	}
	_prop_map_put_ = {
		"XX" : ((1, LCID, 4, 0),()),
		"XY" : ((2, LCID, 4, 0),()),
		"YX" : ((3, LCID, 4, 0),()),
		"YY" : ((4, LCID, 4, 0),()),
	}

class IMenu(DispatchBaseClass):
	CLSID = IID('{C7FB4FF0-13C5-11D2-AD14-00A0241857FD}')
	coclass_clsid = IID('{C7FB4FF1-13C5-11D2-AD14-00A0241857FD}')

	def AppendItem(self, MenuType=defaultNamedNotOptArg, Menu=defaultNamedNotOptArg, Item=defaultNamedNotOptArg):
		"""Appends an item to the specified menu"""
		return self._oleobj_.InvokeTypes(1, LCID, 1, (24, 0), ((3, 0), (8, 0), (8, 0)),MenuType
			, Menu, Item)

	def AppendSeparator(self, MenuType=defaultNamedNotOptArg, Menu=defaultNamedNotOptArg):
		"""Appends a separator to the specified menu"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (24, 0), ((3, 0), (8, 0)),MenuType
			, Menu)

	def RemoveAll(self):
		"""Removes all separators and items previously added to this Menu object"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), (),)

	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}

class IMicroscope(DispatchBaseClass):
	CLSID = IID('{14180858-DCFE-11D1-8884-00A0241857FD}')
	coclass_clsid = IID('{14180859-DCFE-11D1-8884-00A0241857FD}')

	def SetMicroscopeTrueImageHeaderInfo(self, HeaderXml=defaultNamedNotOptArg):
		"""Sets or gets the true image header xml"""
		return self._oleobj_.InvokeTypes(9, LCID, 1, (24, 0), ((9, 0),),HeaderXml
			)

	_prop_map_get_ = {
		"AcceleratingVoltage": (5, 2, (5, 0), (), "AcceleratingVoltage", None),
		"ExperimentalDescription": (8, 2, (8, 0), (), "ExperimentalDescription", None),
		"StemMagnification": (4, 2, (5, 0), (), "StemMagnification", None),
		"StemMode": (2, 2, (3, 0), (), "StemMode", None),
		"TemMagnification": (3, 2, (5, 0), (), "TemMagnification", None),
		"TemMode": (1, 2, (3, 0), (), "TemMode", None),
		"Tilt1": (6, 2, (5, 0), (), "Tilt1", None),
		"Tilt2": (7, 2, (5, 0), (), "Tilt2", None),
	}
	_prop_map_put_ = {
		"AcceleratingVoltage" : ((5, LCID, 4, 0),()),
		"ExperimentalDescription" : ((8, LCID, 4, 0),()),
		"StemMagnification" : ((4, LCID, 4, 0),()),
		"StemMode" : ((2, LCID, 4, 0),()),
		"TemMagnification" : ((3, LCID, 4, 0),()),
		"TemMode" : ((1, LCID, 4, 0),()),
		"Tilt1" : ((6, LCID, 4, 0),()),
		"Tilt2" : ((7, LCID, 4, 0),()),
	}

class IOutputWindow(DispatchBaseClass):
	CLSID = IID('{A24C2A75-DA76-11D1-8884-00A0241857FD}')
	coclass_clsid = IID('{A24C2A77-DA76-11D1-8884-00A0241857FD}')

	def AppendText(self, Text=defaultNamedNotOptArg):
		"""Appends text to text present in current tab"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (24, 0), ((8, 0),),Text
			)

	def Clear(self):
		"""Clears all text present in current tab"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (24, 0), (),)

	def DirectOutput(self, Tab=defaultNamedNotOptArg):
		"""Directs all text written to the Output Window with the AppendText method to specified tab"""
		return self._oleobj_.InvokeTypes(6, LCID, 1, (24, 0), ((3, 0),),Tab
			)

	def Save(self, FilePath=defaultNamedNotOptArg):
		"""Saves all text in the currently selected tab to a file"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (24, 0), ((8, 0),),FilePath
			)

	_prop_map_get_ = {
		"Tab": (3, 2, (3, 0), (), "Tab", None),
		"Text": (2, 2, (8, 0), (), "Text", None),
		"Visible": (1, 2, (11, 0), (), "Visible", None),
		"_Text": (0, 2, (8, 0), (), "_Text", None),
	}
	_prop_map_put_ = {
		"Tab" : ((3, LCID, 4, 0),()),
		"Text" : ((2, LCID, 4, 0),()),
		"Visible" : ((1, LCID, 4, 0),()),
		"_Text" : ((0, LCID, 4, 0),()),
	}
	# Default property for this class is '_Text'
	def __call__(self):
		return self._ApplyTypes_(*(0, 2, (8, 0), (), "_Text", None))
	# str(ob) and int(ob) will use __call__
	def __unicode__(self, *args):
		try:
			return unicode(self.__call__(*args))
		except pythoncom.com_error:
			return repr(self)
	def __str__(self, *args):
		return str(self.__unicode__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))

class IOvalMarker(DispatchBaseClass):
	CLSID = IID('{57EE3A58-83EF-11D2-AD6F-00A0241857FD}')
	coclass_clsid = IID('{57EE3A59-83EF-11D2-AD6F-00A0241857FD}')

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (11, 0), (),)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		"Lock": (65541, 2, (11, 0), (), "Lock", None),
		"Name": (65538, 2, (8, 0), (), "Name", None),
		"Ordinal": (65539, 2, (3, 0), (), "Ordinal", None),
		# Property 'Position' is an object of type 'Position2D'
		"Position": (1, 2, (13, 0), (), "Position", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		# Property 'Range' is an object of type 'Range2D'
		"Range": (2, 2, (13, 0), (), "Range", '{78D416E3-00BF-11D2-AD12-00A0241857FD}'),
		"Selectable": (65542, 2, (11, 0), (), "Selectable", None),
		"Style": (65540, 2, (8, 0), (), "Style", None),
		"Visible": (65537, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Lock" : ((65541, LCID, 4, 0),()),
		"Name" : ((65538, LCID, 4, 0),()),
		"Ordinal" : ((65539, LCID, 4, 0),()),
		"Position" : ((1, LCID, 4, 0),()),
		"Range" : ((2, LCID, 4, 0),()),
		"Selectable" : ((65542, LCID, 4, 0),()),
		"Style" : ((65540, LCID, 4, 0),()),
		"Visible" : ((65537, LCID, 4, 0),()),
	}

class IPeelsServer(DispatchBaseClass):
	CLSID = IID('{65B16A72-E63E-11D2-AD9E-00A0241857FD}')
	coclass_clsid = IID('{65B16A73-E63E-11D2-AD9E-00A0241857FD}')

	# Result is of type StringCollection
	def CcdBinningValues(self):
		"""Gets the valid CCD binning values"""
		ret = self._oleobj_.InvokeTypes(18, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'CcdBinningValues', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def CcdCameraName(self):
		"""Gets the name of the Ccd camera"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(24, LCID, 1, (8, 0), (),)

	# Result is of type CcdServer
	def CcdServer(self):
		"""Gets the CCD server for a CcdPeels"""
		ret = self._oleobj_.InvokeTypes(26, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'CcdServer', '{65B16A75-E63E-11D2-AD9E-00A0241857FD}', UnicodeToString=0)
		return ret

	def CcdSignalName(self):
		"""Gets the name of the CCD signal for a CcdPeels"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(27, LCID, 1, (8, 0), (),)

	def CcdTotalReadoutSize(self):
		"""Gets the total readout size of the CCD detector"""
		return self._oleobj_.InvokeTypes(17, LCID, 1, (3, 0), (),)

	def ChangeDispersion(self, Name=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg, EnergyRange=defaultNamedNotOptArg):
		"""Resets the values for a dispersion"""
		return self._oleobj_.InvokeTypes(65550, LCID, 1, (24, 0), ((8, 0), (13, 0), (13, 0)),Name
			, Calibration, EnergyRange)

	def ClearBiasSpectra(self):
		"""Clears all bias spectra"""
		return self._oleobj_.InvokeTypes(13, LCID, 1, (24, 0), (),)

	def CopyOffset(self, Spectrum=defaultNamedNotOptArg):
		"""Copies the offset and calibration channel of the specified spectrum to the PEELS server"""
		return self._oleobj_.InvokeTypes(9, LCID, 1, (24, 0), ((13, 0),),Spectrum
			)

	def CreateDispersion(self, Name=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg, EnergyRange=defaultNamedNotOptArg):
		"""Creates a new dispersion"""
		return self._oleobj_.InvokeTypes(65547, LCID, 1, (24, 0), ((8, 0), (13, 0), (13, 0)),Name
			, Calibration, EnergyRange)

	def DeleteDispersion(self, Name=defaultNamedNotOptArg):
		"""Deletes a dispersion"""
		return self._oleobj_.InvokeTypes(65548, LCID, 1, (24, 0), ((8, 0),),Name
			)

	# Result is of type StringCollection
	def DispersionNames(self):
		"""Return a string collection with the names of all available dispersions"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DispersionNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Data1D
	def GetBiasSpectrum(self, IntegrationTime=defaultNamedNotOptArg):
		"""Gets the bias spectrum for a particular dwell time"""
		ret = self._oleobj_.InvokeTypes(19, LCID, 1, (13, 0), ((5, 0),),IntegrationTime
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetBiasSpectrum', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Data2D
	def GetCcdGainImage(self):
		"""Gets the CCD gain image"""
		ret = self._oleobj_.InvokeTypes(25, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetCcdGainImage', '{1418082A-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def GetDwellTimeRange(self):
		"""Gets allowable range of dwell times"""
		ret = self._oleobj_.InvokeTypes(65545, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetDwellTimeRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Data1D
	def GetGainSpectrum(self):
		"""Gets the gain spectrum"""
		ret = self._oleobj_.InvokeTypes(20, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetGainSpectrum', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def GetTotalAcquireRange(self):
		"""Gets allowable acquire range"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetTotalAcquireRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def HasBiasSpectrum(self):
		"""Queries if a bias spectrum is available"""
		return self._oleobj_.InvokeTypes(10, LCID, 1, (11, 0), (),)

	def HasGainSpectrum(self):
		"""Queries if a gain spectrum is available"""
		return self._oleobj_.InvokeTypes(11, LCID, 1, (11, 0), (),)

	def IsCcdFixedFrameRate(self):
		"""Queries if the CCD detector is has a fixed frame rate readout"""
		return self._oleobj_.InvokeTypes(23, LCID, 1, (11, 0), (),)

	def IsDetectorCcd(self):
		"""Queries if the detector is a CCD camera"""
		return self._oleobj_.InvokeTypes(16, LCID, 1, (11, 0), (),)

	def NumberChannels(self):
		"""Returns the total number of channels of the detector"""
		return self._oleobj_.InvokeTypes(65549, LCID, 1, (3, 0), (),)

	def SetBiasSpectrum(self, Spectrum=defaultNamedNotOptArg, IntegrationTime=defaultNamedNotOptArg):
		"""Sets the bias spectrum"""
		return self._oleobj_.InvokeTypes(12, LCID, 1, (24, 0), ((13, 0), (5, 0)),Spectrum
			, IntegrationTime)

	def SetGainSpectrum(self, Spectrum=defaultNamedNotOptArg):
		"""Sets the gain spectrum"""
		return self._oleobj_.InvokeTypes(14, LCID, 1, (24, 0), ((13, 0),),Spectrum
			)

	def SpectrumNumber(self):
		"""Gets the current spectrum number in an acquisition"""
		return self._oleobj_.InvokeTypes(15, LCID, 1, (3, 0), (),)

	def TargetGainDwellTime(self):
		"""Gets the target dwell time for a gain reference spectrum"""
		return self._oleobj_.InvokeTypes(21, LCID, 1, (5, 0), (),)

	def TimeRemaining(self):
		"""Gets remaining acquisition time"""
		return self._oleobj_.InvokeTypes(65546, LCID, 1, (5, 0), (),)

	_prop_map_get_ = {
		"AcquireMode": (65538, 2, (3, 0), (), "AcquireMode", None),
		# Property 'AcquireRange' is an object of type 'Range1D'
		"AcquireRange": (65540, 2, (13, 0), (), "AcquireRange", '{D5837263-03D9-11D2-AD12-00A0241857FD}'),
		"BiasCorrection": (4, 2, (11, 0), (), "BiasCorrection", None),
		"CcdBinning": (6, 2, (3, 0), (), "CcdBinning", None),
		"CcdReadoutAngle": (22, 2, (5, 0), (), "CcdReadoutAngle", None),
		"CcdReadoutCenter": (8, 2, (3, 0), (), "CcdReadoutCenter", None),
		"CcdReadoutSize": (7, 2, (3, 0), (), "CcdReadoutSize", None),
		"Dispersion": (65539, 2, (8, 0), (), "Dispersion", None),
		"DwellTime": (65537, 2, (5, 0), (), "DwellTime", None),
		"GainCorrection": (5, 2, (11, 0), (), "GainCorrection", None),
		"Name": (65542, 2, (8, 0), (), "Name", None),
		"NumberSpectra": (1, 2, (3, 0), (), "NumberSpectra", None),
		"SeriesSize": (65541, 2, (3, 0), (), "SeriesSize", None),
		"SpectrumCalChannel": (3, 2, (3, 0), (), "SpectrumCalChannel", None),
		"SpectrumOffset": (2, 2, (5, 0), (), "SpectrumOffset", None),
	}
	_prop_map_put_ = {
		"AcquireMode" : ((65538, LCID, 4, 0),()),
		"AcquireRange" : ((65540, LCID, 4, 0),()),
		"BiasCorrection" : ((4, LCID, 4, 0),()),
		"CcdBinning" : ((6, LCID, 4, 0),()),
		"CcdReadoutAngle" : ((22, LCID, 4, 0),()),
		"CcdReadoutCenter" : ((8, LCID, 4, 0),()),
		"CcdReadoutSize" : ((7, LCID, 4, 0),()),
		"Dispersion" : ((65539, LCID, 4, 0),()),
		"DwellTime" : ((65537, LCID, 4, 0),()),
		"GainCorrection" : ((5, LCID, 4, 0),()),
		"Name" : ((65542, LCID, 4, 0),()),
		"NumberSpectra" : ((1, LCID, 4, 0),()),
		"SeriesSize" : ((65541, LCID, 4, 0),()),
		"SpectrumCalChannel" : ((3, LCID, 4, 0),()),
		"SpectrumOffset" : ((2, LCID, 4, 0),()),
	}

class IPosition2D(DispatchBaseClass):
	CLSID = IID('{5E82E161-F3EC-11D1-AD09-00A0241857FD}')
	coclass_clsid = IID('{5E82E162-F3EC-11D1-AD09-00A0241857FD}')

	def IsEqual(self, Position=defaultNamedNotOptArg):
		"""Tests if positions are equal"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (11, 0), ((9, 0),),Position
			)

	def Move(self, X=defaultNamedNotOptArg, Y=defaultNamedNotOptArg):
		"""Moves the coordinates of a two-dimensional position"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (24, 0), ((5, 0), (5, 0)),X
			, Y)

	def Set(self, X=defaultNamedNotOptArg, Y=defaultNamedNotOptArg):
		"""Sets the coordinates of a two-dimensional position"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), ((5, 0), (5, 0)),X
			, Y)

	_prop_map_get_ = {
		"X": (1, 2, (5, 0), (), "X", None),
		"Y": (2, 2, (5, 0), (), "Y", None),
	}
	_prop_map_put_ = {
		"X" : ((1, LCID, 4, 0),()),
		"Y" : ((2, LCID, 4, 0),()),
	}

class IPositionCollection(DispatchBaseClass):
	CLSID = IID('{14180822-DCFE-11D1-8884-00A0241857FD}')
	coclass_clsid = IID('{14180823-DCFE-11D1-8884-00A0241857FD}')

	def Add(self, Position=defaultNamedNotOptArg):
		"""Adds a new item to a position collection"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), ((13, 0),),Position
			)

	def AddPosition(self, X=defaultNamedNotOptArg, Y=defaultNamedNotOptArg):
		"""Adds a new item to a position collection"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (24, 0), ((5, 0), (5, 0)),X
			, Y)

	# Result is of type Position2D
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index=defaultNamedNotOptArg):
		"""Gets or sets the item at a given index in a position collection"""
		ret = self._oleobj_.InvokeTypes(8, LCID, 2, (13, 0), ((3, 0),),Index
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Item', '{5E82E162-F3EC-11D1-AD09-00A0241857FD}', UnicodeToString=0)
		return ret

	def RemoveAll(self):
		"""Removes all items from a position collection"""
		return self._oleobj_.InvokeTypes(6, LCID, 1, (24, 0), (),)

	def Selection(self, Start=defaultNamedNotOptArg, End=defaultNamedNotOptArg):
		"""Gets a selection of the position collection"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (24, 0), ((3, 0), (3, 0)),Start
			, End)

	def SetGridPattern(self, Range=defaultNamedNotOptArg, SizeX=defaultNamedNotOptArg, SizeY=defaultNamedNotOptArg):
		"""Sets the position collection to a rectangular grid pattern"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (24, 0), ((13, 0), (3, 0), (3, 0)),Range
			, SizeX, SizeY)

	# The method SetItem is actually a property, but must be used as a method to correctly pass the arguments
	def SetItem(self, Index=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets or sets the item at a given index in a position collection"""
		return self._oleobj_.InvokeTypes(8, LCID, 8, (24, 0), ((3, 0), (13, 0)),Index
			, arg1)

	def SetLinePattern(self, StartPosition=defaultNamedNotOptArg, EndPosition=defaultNamedNotOptArg, Size=defaultNamedNotOptArg):
		"""Sets the position collection to a equidistant line pattern"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (24, 0), ((13, 0), (13, 0), (3, 0)),StartPosition
			, EndPosition, Size)

	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
	}
	_prop_map_put_ = {
		"Count" : ((1, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		return win32com.client.util.Iterator(ob)
	def _NewEnum(self):
		"Create an enumerator from this object"
		return win32com.client.util.WrapEnum(self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),()),'{5E82E162-F3EC-11D1-AD09-00A0241857FD}')
	def __getitem__(self, index):
		"Allow this class to be accessed as a collection"
		if not self.__dict__.has_key('_enum_'):
			self.__dict__['_enum_'] = self._NewEnum()
		return self._enum_.__getitem__(index)
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IProcessingSystem(DispatchBaseClass):
	CLSID = IID('{88ABD2A7-DAAE-11D1-8884-00A0241857FD}')
	coclass_clsid = IID('{88ABD2A8-DAAE-11D1-8884-00A0241857FD}')

	def Add(self, Data1=defaultNamedNotOptArg, Data2=defaultNamedNotOptArg):
		"""Adds two datasets"""
		ret = self._oleobj_.InvokeTypes(5, LCID, 1, (9, 0), ((9, 0), (9, 0)),Data1
			, Data2)
		if ret is not None:
			ret = Dispatch(ret, 'Add', None, UnicodeToString=0)
		return ret

	def Angle(self, Vector=defaultNamedNotOptArg):
		"""Angle of a vector"""
		return self._oleobj_.InvokeTypes(42, LCID, 1, (5, 0), ((13, 0),),Vector
			)

	# Result is of type Data1D
	def CalculatePolynomial(self, Coefficients=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg, NumberPoints=defaultNamedNotOptArg):
		"""Calculates the value of a polynomial with the provided coefficients, calibration, and size"""
		ret = self._oleobj_.InvokeTypes(57, LCID, 1, (13, 0), ((12, 0), (13, 0), (3, 0)),Coefficients
			, Calibration, NumberPoints)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'CalculatePolynomial', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Position2D
	def CenterOfMass(self, Data=defaultNamedNotOptArg, Range=defaultNamedNotOptArg):
		"""Center of mass calculation"""
		ret = self._oleobj_.InvokeTypes(45, LCID, 1, (13, 0), ((9, 0), (13, 0)),Data
			, Range)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'CenterOfMass', '{5E82E162-F3EC-11D1-AD09-00A0241857FD}', UnicodeToString=0)
		return ret

	def Clip(self, Data=defaultNamedNotOptArg, ClipValue=defaultNamedNotOptArg, ClipType=defaultNamedNotOptArg):
		"""Clip function"""
		ret = self._oleobj_.InvokeTypes(53, LCID, 1, (9, 0), ((9, 0), (5, 0), (3, 0)),Data
			, ClipValue, ClipType)
		if ret is not None:
			ret = Dispatch(ret, 'Clip', None, UnicodeToString=0)
		return ret

	def CrossCorrelation(self, Data1=defaultNamedNotOptArg, Data2=defaultNamedNotOptArg):
		"""Cross correlation between two datasets"""
		ret = self._oleobj_.InvokeTypes(30, LCID, 1, (9, 0), ((9, 0), (9, 0)),Data1
			, Data2)
		if ret is not None:
			ret = Dispatch(ret, 'CrossCorrelation', None, UnicodeToString=0)
		return ret

	def Distance(self, Position1=defaultNamedNotOptArg, Position2=defaultNamedNotOptArg):
		"""Distance between two positions"""
		return self._oleobj_.InvokeTypes(40, LCID, 1, (5, 0), ((13, 0), (13, 0)),Position1
			, Position2)

	def Div(self, Data1=defaultNamedNotOptArg, Data2=defaultNamedNotOptArg):
		"""Divides two datasets"""
		ret = self._oleobj_.InvokeTypes(8, LCID, 1, (9, 0), ((9, 0), (9, 0)),Data1
			, Data2)
		if ret is not None:
			ret = Dispatch(ret, 'Div', None, UnicodeToString=0)
		return ret

	def FFT(self, Data=defaultNamedNotOptArg):
		"""Forward Fourier transform"""
		ret = self._oleobj_.InvokeTypes(28, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'FFT', None, UnicodeToString=0)
		return ret

	def FitPolynomial(self, Xvalues=defaultNamedNotOptArg, Yvalues=defaultNamedNotOptArg, PolynomialOrder=defaultNamedNotOptArg):
		"""Calculates the coefficients from fitting a multi-order polynomial to the supplied X and Y values"""
		return self._ApplyTypes_(56, 1, (12, 0), ((13, 0), (13, 0), (3, 0)), 'FitPolynomial', None,Xvalues
			, Yvalues, PolynomialOrder)

	def GeneralizedCrossCorrelation(self, Data1=defaultNamedNotOptArg, Data2=defaultNamedNotOptArg, FilterStart=defaultNamedNotOptArg, FilterEnd=defaultNamedNotOptArg):
		"""Cross correlation between two datasets (Filtered version)"""
		ret = self._oleobj_.InvokeTypes(34, LCID, 1, (9, 0), ((9, 0), (9, 0), (5, 0), (5, 0)),Data1
			, Data2, FilterStart, FilterEnd)
		if ret is not None:
			ret = Dispatch(ret, 'GeneralizedCrossCorrelation', None, UnicodeToString=0)
		return ret

	# Result is of type Data2D
	def HanningWindow2D(self, SizeX=defaultNamedNotOptArg, SizeY=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Calculates a 2-D Hanning Window"""
		ret = self._oleobj_.InvokeTypes(54, LCID, 1, (13, 0), ((3, 0), (3, 0), (13, 0)),SizeX
			, SizeY, Calibration)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'HanningWindow2D', '{1418082A-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def IFT(self, Data=defaultNamedNotOptArg):
		"""Inverse Fourier transform"""
		ret = self._oleobj_.InvokeTypes(29, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'IFT', None, UnicodeToString=0)
		return ret

	def Imag(self, Data=defaultNamedNotOptArg):
		"""imag function. Calculates imaginary part of complex data."""
		ret = self._oleobj_.InvokeTypes(24, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'Imag', None, UnicodeToString=0)
		return ret

	def ImageSpectrumToSpectrumImage(self, ImageSpectrumPath=defaultNamedNotOptArg, SpectrumImagePath=defaultNamedNotOptArg, Binning=defaultNamedNotOptArg):
		"""Create a SpectrumImage from an ImageSpectrum"""
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((8, 0), (8, 0), (3, 0)),ImageSpectrumPath
			, SpectrumImagePath, Binning)

	def IntegratedIntensity(self, Data=defaultNamedNotOptArg, Selection=defaultNamedNotOptArg):
		"""Integrated intensity from a selection of an array"""
		return self._oleobj_.InvokeTypes(49, LCID, 1, (5, 0), ((9, 0), (9, 0)),Data
			, Selection)

	def InterpolatedPositionMax(self, Data=defaultNamedNotOptArg):
		"""Returns position of maximum intensity with quadratic interpolation"""
		return self._ApplyTypes_(32, 1, (12, 0), ((9, 0),), 'InterpolatedPositionMax', None,Data
			)

	def Invert(self, Matrix=defaultNamedNotOptArg):
		"""Invertion of a matrix"""
		ret = self._oleobj_.InvokeTypes(43, LCID, 1, (9, 0), ((13, 0),),Matrix
			)
		if ret is not None:
			ret = Dispatch(ret, 'Invert', None, UnicodeToString=0)
		return ret

	def Length(self, Vector=defaultNamedNotOptArg):
		""" Length of a vector"""
		return self._oleobj_.InvokeTypes(41, LCID, 1, (5, 0), ((13, 0),),Vector
			)

	# Result is of type Data1D
	def LineScan(self, Data=defaultNamedNotOptArg, StartPosition=defaultNamedNotOptArg, EndPosition=defaultNamedNotOptArg, Width=defaultNamedNotOptArg):
		"""Line scan"""
		ret = self._oleobj_.InvokeTypes(47, LCID, 1, (13, 0), ((9, 0), (9, 0), (9, 0), (5, 0)),Data
			, StartPosition, EndPosition, Width)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'LineScan', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	def Max(self, Data=defaultNamedNotOptArg):
		"""Max function"""
		ret = self._oleobj_.InvokeTypes(36, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'Max', None, UnicodeToString=0)
		return ret

	def Mean(self, Data=defaultNamedNotOptArg):
		"""Mean function"""
		ret = self._oleobj_.InvokeTypes(38, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'Mean', None, UnicodeToString=0)
		return ret

	def MeasureShift(self, Data1=defaultNamedNotOptArg, Data2=defaultNamedNotOptArg):
		"""Measures shift between two datasets"""
		ret = self._oleobj_.InvokeTypes(33, LCID, 1, (9, 0), ((9, 0), (9, 0)),Data1
			, Data2)
		if ret is not None:
			ret = Dispatch(ret, 'MeasureShift', None, UnicodeToString=0)
		return ret

	def Min(self, Data=defaultNamedNotOptArg):
		"""Min function"""
		ret = self._oleobj_.InvokeTypes(35, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'Min', None, UnicodeToString=0)
		return ret

	def Mul(self, Data1=defaultNamedNotOptArg, Data2=defaultNamedNotOptArg):
		"""Multiplies two datasets"""
		ret = self._oleobj_.InvokeTypes(7, LCID, 1, (9, 0), ((9, 0), (9, 0)),Data1
			, Data2)
		if ret is not None:
			ret = Dispatch(ret, 'Mul', None, UnicodeToString=0)
		return ret

	def PositionMax(self, Data=defaultNamedNotOptArg):
		"""Returns position of maximum intensity"""
		return self._ApplyTypes_(31, 1, (12, 0), ((9, 0),), 'PositionMax', None,Data
			)

	def ProcessedFft(self, Data=defaultNamedNotOptArg, SamplingInterval=defaultNamedNotOptArg, Window=defaultNamedNotOptArg, ComplexConversion=defaultNamedNotOptArg
			, IntensityScaling=defaultNamedNotOptArg):
		"""Calculates a FFT with binning, complex conversion, and additional processing"""
		ret = self._oleobj_.InvokeTypes(55, LCID, 1, (9, 0), ((9, 0), (3, 0), (3, 0), (3, 0), (3, 0)),Data
			, SamplingInterval, Window, ComplexConversion, IntensityScaling)
		if ret is not None:
			ret = Dispatch(ret, 'ProcessedFft', None, UnicodeToString=0)
		return ret

	# Result is of type Data1D
	def Project(self, Data=defaultNamedNotOptArg, Direction=defaultNamedNotOptArg):
		"""Horizontal or vertical projection"""
		ret = self._oleobj_.InvokeTypes(46, LCID, 1, (13, 0), ((9, 0), (3, 0)),Data
			, Direction)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Project', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Data1D
	def Ramp1D(self, Size=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Generates a 1D ramp"""
		ret = self._oleobj_.InvokeTypes(3, LCID, 1, (13, 0), ((3, 0), (13, 0)),Size
			, Calibration)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Ramp1D', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Data2D
	def Ramp2D(self, Type=defaultNamedNotOptArg, SizeX=defaultNamedNotOptArg, SizeY=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Generates a 2D ramp"""
		ret = self._oleobj_.InvokeTypes(4, LCID, 1, (13, 0), ((3, 0), (3, 0), (3, 0), (13, 0)),Type
			, SizeX, SizeY, Calibration)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Ramp2D', '{1418082A-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def Real(self, Data=defaultNamedNotOptArg):
		"""real function. Calculates real part of complex data."""
		ret = self._oleobj_.InvokeTypes(23, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'Real', None, UnicodeToString=0)
		return ret

	def ReducedFft(self, Data=defaultNamedNotOptArg, SamplingInterval=defaultNamedNotOptArg):
		"""Reduced FFT"""
		ret = self._oleobj_.InvokeTypes(48, LCID, 1, (9, 0), ((9, 0), (3, 0)),Data
			, SamplingInterval)
		if ret is not None:
			ret = Dispatch(ret, 'ReducedFft', None, UnicodeToString=0)
		return ret

	def SpectrumImageToImageSpectrum(self, SpectrumImagePath=defaultNamedNotOptArg, ImageSpectrumPath=defaultNamedNotOptArg, EnergyCalibration=defaultNamedNotOptArg):
		"""Create an ImageSpectrum from a SpectrumImage"""
		return self._oleobj_.InvokeTypes(50, LCID, 1, (24, 0), ((8, 0), (8, 0), (13, 0)),SpectrumImagePath
			, ImageSpectrumPath, EnergyCalibration)

	def Sub(self, Data1=defaultNamedNotOptArg, Data2=defaultNamedNotOptArg):
		"""Subtracts two datasets"""
		ret = self._oleobj_.InvokeTypes(6, LCID, 1, (9, 0), ((9, 0), (9, 0)),Data1
			, Data2)
		if ret is not None:
			ret = Dispatch(ret, 'Sub', None, UnicodeToString=0)
		return ret

	def Sum(self, Data=defaultNamedNotOptArg):
		"""Sum function"""
		ret = self._oleobj_.InvokeTypes(37, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'Sum', None, UnicodeToString=0)
		return ret

	def Variance(self, Data=defaultNamedNotOptArg):
		"""Variance function"""
		ret = self._oleobj_.InvokeTypes(39, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'Variance', None, UnicodeToString=0)
		return ret

	def abs(self, Data=defaultNamedNotOptArg):
		"""abs function"""
		ret = self._oleobj_.InvokeTypes(9, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'abs', None, UnicodeToString=0)
		return ret

	def acos(self, Data=defaultNamedNotOptArg):
		"""acos function"""
		ret = self._oleobj_.InvokeTypes(10, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'acos', None, UnicodeToString=0)
		return ret

	def arg(self, Data=defaultNamedNotOptArg):
		"""arg function. Calculates argument of complex data."""
		ret = self._oleobj_.InvokeTypes(26, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'arg', None, UnicodeToString=0)
		return ret

	def asin(self, Data=defaultNamedNotOptArg):
		"""asin function"""
		ret = self._oleobj_.InvokeTypes(11, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'asin', None, UnicodeToString=0)
		return ret

	def atan(self, Data=defaultNamedNotOptArg):
		"""atan function"""
		ret = self._oleobj_.InvokeTypes(12, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'atan', None, UnicodeToString=0)
		return ret

	def conj(self, Data=defaultNamedNotOptArg):
		"""conj function. Calculates conjugate of complex data."""
		ret = self._oleobj_.InvokeTypes(27, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'conj', None, UnicodeToString=0)
		return ret

	def cos(self, Data=defaultNamedNotOptArg):
		"""cos function"""
		ret = self._oleobj_.InvokeTypes(13, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'cos', None, UnicodeToString=0)
		return ret

	def cosh(self, Data=defaultNamedNotOptArg):
		"""cosh function"""
		ret = self._oleobj_.InvokeTypes(14, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'cosh', None, UnicodeToString=0)
		return ret

	def exp(self, Data=defaultNamedNotOptArg):
		"""exp function"""
		ret = self._oleobj_.InvokeTypes(15, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'exp', None, UnicodeToString=0)
		return ret

	def log(self, Data=defaultNamedNotOptArg):
		"""log function"""
		ret = self._oleobj_.InvokeTypes(52, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'log', None, UnicodeToString=0)
		return ret

	def log10(self, Data=defaultNamedNotOptArg):
		"""log10 function"""
		ret = self._oleobj_.InvokeTypes(16, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'log10', None, UnicodeToString=0)
		return ret

	def norm(self, Data=defaultNamedNotOptArg):
		"""norm function. Calculates magnitude part of complex data."""
		ret = self._oleobj_.InvokeTypes(25, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'norm', None, UnicodeToString=0)
		return ret

	def sin(self, Data=defaultNamedNotOptArg):
		"""sin function"""
		ret = self._oleobj_.InvokeTypes(17, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'sin', None, UnicodeToString=0)
		return ret

	def sinh(self, Data=defaultNamedNotOptArg):
		"""sinh function"""
		ret = self._oleobj_.InvokeTypes(18, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'sinh', None, UnicodeToString=0)
		return ret

	def sqr(self, Data=defaultNamedNotOptArg):
		"""sqr function"""
		ret = self._oleobj_.InvokeTypes(19, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'sqr', None, UnicodeToString=0)
		return ret

	def sqrt(self, Data=defaultNamedNotOptArg):
		"""sqrt function"""
		ret = self._oleobj_.InvokeTypes(20, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'sqrt', None, UnicodeToString=0)
		return ret

	def tan(self, Data=defaultNamedNotOptArg):
		"""tan function"""
		ret = self._oleobj_.InvokeTypes(21, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'tan', None, UnicodeToString=0)
		return ret

	def tanh(self, Data=defaultNamedNotOptArg):
		"""tanh function"""
		ret = self._oleobj_.InvokeTypes(22, LCID, 1, (9, 0), ((9, 0),),Data
			)
		if ret is not None:
			ret = Dispatch(ret, 'tanh', None, UnicodeToString=0)
		return ret

	def vmMul(self, Vector=defaultNamedNotOptArg, Matrix=defaultNamedNotOptArg):
		"""Multiplication of a matrix and a vector"""
		ret = self._oleobj_.InvokeTypes(44, LCID, 1, (9, 0), ((13, 0), (13, 0)),Vector
			, Matrix)
		if ret is not None:
			ret = Dispatch(ret, 'vmMul', None, UnicodeToString=0)
		return ret

	_prop_map_get_ = {
		"FilterEnd": (2, 2, (5, 0), (), "FilterEnd", None),
		"FilterStart": (1, 2, (5, 0), (), "FilterStart", None),
	}
	_prop_map_put_ = {
		"FilterEnd" : ((2, LCID, 4, 0),()),
		"FilterStart" : ((1, LCID, 4, 0),()),
	}

class IProfile(DispatchBaseClass):
	CLSID = IID('{57EE3A5C-83EF-11D2-AD6F-00A0241857FD}')
	coclass_clsid = IID('{57EE3A5D-83EF-11D2-AD6F-00A0241857FD}')

	# Result is of type Data1D
	def AddSeries(self, Range=defaultNamedNotOptArg):
		"""Adds data in a series"""
		ret = self._oleobj_.InvokeTypes(65548, LCID, 1, (13, 0), ((13, 0),),Range
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddSeries', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	def AppendData(self, ProfileData=defaultNamedNotOptArg, Tag=defaultNamedOptArg):
		"""Appends the supplied data to the series of a Profile"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (24, 0), ((13, 0), (12, 16)),ProfileData
			, Tag)

	def AppendSeries(self, Profile=defaultNamedNotOptArg):
		"""Appends the data series of a Profile to another Profile"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (24, 0), ((13, 0),),Profile
			)

	def ClearSeries(self):
		"""Clears the data series"""
		return self._oleobj_.InvokeTypes(65541, LCID, 1, (24, 0), (),)

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(131080, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(131079, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def GetSeriesRange(self):
		"""Gets the valid range of images in a series contained in an Image object"""
		ret = self._oleobj_.InvokeTypes(65545, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetSeriesRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(131081, LCID, 1, (11, 0), (),)

	def MoveSeries(self, Profile=defaultNamedNotOptArg):
		"""Moves the data series of an Profile to another Profile"""
		return self._oleobj_.InvokeTypes(6, LCID, 1, (24, 0), ((13, 0),),Profile
			)

	def SeriesCalibration(self):
		"""Gets the calibration if one is associated with a data series"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'SeriesCalibration', None, UnicodeToString=0)
		return ret

	# Result is of type Data1D
	def SeriesData(self, Index=defaultNamedNotOptArg):
		"""Gets data at specified index in data series"""
		ret = self._oleobj_.InvokeTypes(65542, LCID, 1, (13, 0), ((3, 0),),Index
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'SeriesData', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	def SeriesTag(self, Index=defaultNamedNotOptArg):
		"""Gets tag at specified index in data series"""
		return self._ApplyTypes_(65543, 1, (12, 0), ((3, 0),), 'SeriesTag', None,Index
			)

	def Set1DFileSeries(self, Path=defaultNamedNotOptArg, Size=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Associates a 1D data series with an Image"""
		return self._oleobj_.InvokeTypes(65546, LCID, 1, (24, 0), ((8, 0), (3, 0), (13, 0)),Path
			, Size, Calibration)

	def Set2DFileSeries(self, Path=defaultNamedNotOptArg, SizeX=defaultNamedNotOptArg, SizeY=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Associates a 2D data series with an Image"""
		return self._oleobj_.InvokeTypes(65547, LCID, 1, (24, 0), ((8, 0), (3, 0), (3, 0), (13, 0)),Path
			, SizeX, SizeY, Calibration)

	def SetDataRegion(self, Data=defaultNamedNotOptArg):
		"""Replaces a region of the existing data with new data"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (24, 0), ((13, 0),),Data
			)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (3, 0), (),)

	def Write(self, Path=defaultNamedNotOptArg, Format=defaultNamedNotOptArg):
		"""Saves data in a selected format"""
		return self._oleobj_.InvokeTypes(65549, LCID, 1, (24, 0), ((8, 0), (8, 0)),Path
			, Format)

	_prop_map_get_ = {
		# Property 'Calibration' is an object of type 'Calibration1D'
		"Calibration": (2, 2, (13, 0), (), "Calibration", '{E1B6CE12-0BE5-11D2-AD13-00A0241857FD}'),
		# Property 'Data' is an object of type 'Data1D'
		"Data": (1, 2, (13, 0), (), "Data", '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}'),
		"Lock": (131077, 2, (11, 0), (), "Lock", None),
		"Name": (131074, 2, (8, 0), (), "Name", None),
		"NumberInSeries": (65537, 2, (3, 0), (), "NumberInSeries", None),
		"ObjectInfo": (65539, 2, (9, 0), (), "ObjectInfo", None),
		"Ordinal": (131075, 2, (3, 0), (), "Ordinal", None),
		"Selectable": (131078, 2, (11, 0), (), "Selectable", None),
		"SeriesCount": (65538, 2, (3, 0), (), "SeriesCount", None),
		"SeriesFilePath": (65540, 2, (8, 0), (), "SeriesFilePath", None),
		"Style": (131076, 2, (8, 0), (), "Style", None),
		"Visible": (131073, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Calibration" : ((2, LCID, 4, 0),()),
		"Data" : ((1, LCID, 4, 0),()),
		"Lock" : ((131077, LCID, 4, 0),()),
		"Name" : ((131074, LCID, 4, 0),()),
		"NumberInSeries" : ((65537, LCID, 4, 0),()),
		"ObjectInfo" : ((65539, LCID, 4, 0),()),
		"Ordinal" : ((131075, LCID, 4, 0),()),
		"Selectable" : ((131078, LCID, 4, 0),()),
		"SeriesCount" : ((65538, LCID, 4, 0),()),
		"SeriesFilePath" : ((65540, LCID, 4, 0),()),
		"Style" : ((131076, LCID, 4, 0),()),
		"Visible" : ((131073, LCID, 4, 0),()),
	}

class IProfileDisplay(DispatchBaseClass):
	"""Dispatch interface for ProfileDisplay Control"""
	CLSID = IID('{01D66569-80D1-11D2-AD6D-00A0241857FD}')
	coclass_clsid = IID('{01D6656A-80D1-11D2-AD6D-00A0241857FD}')

	# Result is of type Profile
	def AddProfile(self, Name=defaultNamedNotOptArg, Size=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Adds a new profile"""
		ret = self._oleobj_.InvokeTypes(4, LCID, 1, (13, 0), ((8, 0), (3, 0), (13, 0)),Name
			, Size, Calibration)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddProfile', '{57EE3A5D-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type ProfileMarker
	def AddProfileMarker(self, Name=defaultNamedNotOptArg, Position=defaultNamedNotOptArg):
		"""Adds a new profile marker"""
		ret = self._oleobj_.InvokeTypes(5, LCID, 1, (13, 0), ((8, 0), (5, 0)),Name
			, Position)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddProfileMarker', '{57EE3A5F-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type ProfileSelectionMarker
	def AddProfileSelectionMarker(self, Name=defaultNamedNotOptArg, Range=defaultNamedNotOptArg):
		"""Adds a new profile selection marker"""
		ret = self._oleobj_.InvokeTypes(6, LCID, 1, (13, 0), ((8, 0), (13, 0)),Name
			, Range)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddProfileSelectionMarker', '{57EE3A61-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	def Autoscale(self, Type=defaultNamedNotOptArg):
		"""Performs an automatic scaling operation on a Display"""
		return self._oleobj_.InvokeTypes(65548, LCID, 1, (24, 0), ((3, 0),),Type
			)

	def DeleteObject(self, DisplayObject=defaultNamedNotOptArg):
		"""Deletes the specified display object"""
		return self._oleobj_.InvokeTypes(65551, LCID, 1, (24, 0), ((9, 0),),DisplayObject
			)

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display"""
		ret = self._oleobj_.InvokeTypes(65550, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def FindObject(self, Name=defaultNamedNotOptArg):
		"""Finds the display object with the specified name"""
		ret = self._oleobj_.InvokeTypes(65546, LCID, 1, (9, 0), ((8, 0),),Name
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindObject', None, UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid display."""
		return self._oleobj_.InvokeTypes(65552, LCID, 1, (11, 0), (),)

	# Result is of type StringCollection
	def ObjectNames(self):
		"""Return a string collection with the names of all Display Objects present in the Display"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'ObjectNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def OrganizeObjects(self, Type=defaultNamedNotOptArg):
		"""Organizes the names and the ordinals of all object of the specified type"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (24, 0), ((3, 0),),Type
			)

	def Path(self):
		"""Gets the path to the Display"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(65547, LCID, 1, (8, 0), (),)

	def SetArbitraryUnitX(self, Unit=defaultNamedNotOptArg):
		"""Sets arbitrary unit of X axis in calibrated view."""
		return self._oleobj_.InvokeTypes(10, LCID, 1, (24, 0), ((8, 0),),Unit
			)

	def SetArbitraryUnitY(self, Unit=defaultNamedNotOptArg):
		"""Sets arbitrary unit of Y axis in uncalibrated view."""
		return self._oleobj_.InvokeTypes(11, LCID, 1, (24, 0), ((8, 0),),Unit
			)

	def SetGrid(self, Style=defaultNamedNotOptArg):
		"""Sets grid lines"""
		return self._oleobj_.InvokeTypes(65549, LCID, 1, (24, 0), ((3, 0),),Style
			)

	# Result is of type StringCollection
	def SortedObjectNames(self, Type=defaultNamedNotOptArg):
		"""Return a string collection with the names of all Display Objects with a specific type present in the Display"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (13, 0), ((3, 0),),Type
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'SortedObjectNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def SubType(self):
		"""Gets the subtype of a Display."""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (3, 0), (),)

	# Result is of type Profile
	def TopProfile(self):
		"""Gets the profile at the top of the display order that is contained in this display"""
		ret = self._oleobj_.InvokeTypes(7, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'TopProfile', '{57EE3A5D-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	def Type(self):
		"""Gets the type of a Display"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		# Property 'DisplayRange' is an object of type 'Range2D'
		"DisplayRange": (65539, 2, (13, 0), (), "DisplayRange", '{78D416E3-00BF-11D2-AD12-00A0241857FD}'),
		"Legend": (65540, 2, (11, 0), (), "Legend", None),
		"Lock": (65542, 2, (11, 0), (), "Lock", None),
		"Name": (65537, 2, (8, 0), (), "Name", None),
		# Property 'SpatialUnit' is an object of type 'SpatialUnit'
		"SpatialUnit": (1, 2, (13, 0), (), "SpatialUnit", '{97033EE5-566E-11D2-AD28-00A0241857FD}'),
		"Style": (65541, 2, (8, 0), (), "Style", None),
		"Visible": (65538, 2, (11, 0), (), "Visible", None),
		"XAxisCalibratedView": (8, 2, (11, 0), (), "XAxisCalibratedView", None),
		"YAxisCalibratedView": (9, 2, (11, 0), (), "YAxisCalibratedView", None),
	}
	_prop_map_put_ = {
		"DisplayRange" : ((65539, LCID, 4, 0),()),
		"Legend" : ((65540, LCID, 4, 0),()),
		"Lock" : ((65542, LCID, 4, 0),()),
		"Name" : ((65537, LCID, 4, 0),()),
		"SpatialUnit" : ((1, LCID, 4, 0),()),
		"Style" : ((65541, LCID, 4, 0),()),
		"Visible" : ((65538, LCID, 4, 0),()),
		"XAxisCalibratedView" : ((8, LCID, 4, 0),()),
		"YAxisCalibratedView" : ((9, LCID, 4, 0),()),
	}

class IProfileMarker(DispatchBaseClass):
	CLSID = IID('{57EE3A5E-83EF-11D2-AD6F-00A0241857FD}')
	coclass_clsid = IID('{57EE3A5F-83EF-11D2-AD6F-00A0241857FD}')

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (11, 0), (),)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		"Lock": (65541, 2, (11, 0), (), "Lock", None),
		"Name": (65538, 2, (8, 0), (), "Name", None),
		"Ordinal": (65539, 2, (3, 0), (), "Ordinal", None),
		"Position": (1, 2, (5, 0), (), "Position", None),
		"Selectable": (65542, 2, (11, 0), (), "Selectable", None),
		"Style": (65540, 2, (8, 0), (), "Style", None),
		"Visible": (65537, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Lock" : ((65541, LCID, 4, 0),()),
		"Name" : ((65538, LCID, 4, 0),()),
		"Ordinal" : ((65539, LCID, 4, 0),()),
		"Position" : ((1, LCID, 4, 0),()),
		"Selectable" : ((65542, LCID, 4, 0),()),
		"Style" : ((65540, LCID, 4, 0),()),
		"Visible" : ((65537, LCID, 4, 0),()),
	}

class IProfileSelectionMarker(DispatchBaseClass):
	CLSID = IID('{57EE3A60-83EF-11D2-AD6F-00A0241857FD}')
	coclass_clsid = IID('{57EE3A61-83EF-11D2-AD6F-00A0241857FD}')

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (11, 0), (),)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		"Lock": (65541, 2, (11, 0), (), "Lock", None),
		"Name": (65538, 2, (8, 0), (), "Name", None),
		"Ordinal": (65539, 2, (3, 0), (), "Ordinal", None),
		"Position": (1, 2, (5, 0), (), "Position", None),
		# Property 'Range' is an object of type 'Range1D'
		"Range": (2, 2, (13, 0), (), "Range", '{D5837263-03D9-11D2-AD12-00A0241857FD}'),
		"Selectable": (65542, 2, (11, 0), (), "Selectable", None),
		"Style": (65540, 2, (8, 0), (), "Style", None),
		"Visible": (65537, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Lock" : ((65541, LCID, 4, 0),()),
		"Name" : ((65538, LCID, 4, 0),()),
		"Ordinal" : ((65539, LCID, 4, 0),()),
		"Position" : ((1, LCID, 4, 0),()),
		"Range" : ((2, LCID, 4, 0),()),
		"Selectable" : ((65542, LCID, 4, 0),()),
		"Style" : ((65540, LCID, 4, 0),()),
		"Visible" : ((65537, LCID, 4, 0),()),
	}

class IPropertiesWindow(DispatchBaseClass):
	CLSID = IID('{5576BC18-5372-11D2-AD27-00A0241857FD}')
	coclass_clsid = IID('{5576BC1A-5372-11D2-AD27-00A0241857FD}')

	def Clear(self):
		"""Clears all text present in the measurement tab of the properties window"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), (),)

	def Remove(self, ProcName=defaultNamedNotOptArg):
		"""Removes a result from the measurement tab of the properties window"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (24, 0), ((8, 0),),ProcName
			)

	def ShowResult(self, ProcName=defaultNamedNotOptArg, DisplayObject=defaultNamedNotOptArg, Number=defaultNamedNotOptArg, Unit=''):
		"""Shows a result in the measurement tab of the properties window"""
		return self._ApplyTypes_(4, 1, (24, 32), ((8, 0), (9, 0), (13, 0), (8, 48)), 'ShowResult', None,ProcName
			, DisplayObject, Number, Unit)

	_prop_map_get_ = {
		"Tab": (2, 2, (3, 0), (), "Tab", None),
		"Visible": (1, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Tab" : ((2, LCID, 4, 0),()),
		"Visible" : ((1, LCID, 4, 0),()),
	}

class IRange1D(DispatchBaseClass):
	CLSID = IID('{D5837262-03D9-11D2-AD12-00A0241857FD}')
	coclass_clsid = IID('{D5837263-03D9-11D2-AD12-00A0241857FD}')

	def Contains(self, Position=defaultNamedNotOptArg):
		"""Tests if a position value is contained in a 1D range"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (11, 0), ((5, 0),),Position
			)

	def IsEqual(self, Range=defaultNamedNotOptArg):
		"""Tests if ranges are equal"""
		return self._oleobj_.InvokeTypes(8, LCID, 1, (11, 0), ((9, 0),),Range
			)

	def Move(self, Value=defaultNamedNotOptArg):
		"""Moves a 1D range"""
		return self._oleobj_.InvokeTypes(6, LCID, 1, (24, 0), ((5, 0),),Value
			)

	def Set(self, Start=defaultNamedNotOptArg, End=defaultNamedNotOptArg):
		"""Sets the start and end of a 1D range"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (24, 0), ((5, 0), (5, 0)),Start
			, End)

	_prop_map_get_ = {
		"Center": (3, 2, (5, 0), (), "Center", None),
		"End": (2, 2, (5, 0), (), "End", None),
		"Size": (4, 2, (5, 0), (), "Size", None),
		"Start": (1, 2, (5, 0), (), "Start", None),
	}
	_prop_map_put_ = {
		"Center" : ((3, LCID, 4, 0),()),
		"End" : ((2, LCID, 4, 0),()),
		"Size" : ((4, LCID, 4, 0),()),
		"Start" : ((1, LCID, 4, 0),()),
	}

class IRange2D(DispatchBaseClass):
	CLSID = IID('{78D416E2-00BF-11D2-AD12-00A0241857FD}')
	coclass_clsid = IID('{78D416E3-00BF-11D2-AD12-00A0241857FD}')

	def Contains(self, Object=defaultNamedNotOptArg):
		"""Tests if a 2D position or another 2D range is contained in this 2D range"""
		return self._oleobj_.InvokeTypes(10, LCID, 1, (11, 0), ((9, 0),),Object
			)

	def Intersects(self, Range=defaultNamedNotOptArg):
		"""Tests if another 2D range intersect this 2D range"""
		return self._oleobj_.InvokeTypes(14, LCID, 1, (11, 0), ((13, 0),),Range
			)

	def IsEqual(self, Range=defaultNamedNotOptArg):
		"""Tests if ranges are equal"""
		return self._oleobj_.InvokeTypes(15, LCID, 1, (11, 0), ((9, 0),),Range
			)

	def Move(self, X=defaultNamedNotOptArg, Y=defaultNamedNotOptArg):
		"""Moves a 2D range"""
		return self._oleobj_.InvokeTypes(11, LCID, 1, (24, 0), ((5, 0), (5, 0)),X
			, Y)

	# Result is of type Range1D
	def RangeX(self):
		"""Gets a 1D range corresponding to the range of X-coordinates in a 2D Range"""
		ret = self._oleobj_.InvokeTypes(12, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'RangeX', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def RangeY(self):
		"""Gets a 1D range corresponding to the range of Y-coordinates in a 2D Range"""
		ret = self._oleobj_.InvokeTypes(13, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'RangeY', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def Set(self, StartX=defaultNamedNotOptArg, StartY=defaultNamedNotOptArg, EndX=defaultNamedNotOptArg, EndY=defaultNamedNotOptArg):
		"""Sets the start and end coordinates of a 2D range"""
		return self._oleobj_.InvokeTypes(8, LCID, 1, (24, 0), ((5, 0), (5, 0), (5, 0), (5, 0)),StartX
			, StartY, EndX, EndY)

	def SetSize(self, X=defaultNamedNotOptArg, Y=defaultNamedNotOptArg):
		"""Sets the size of a 2D range"""
		return self._oleobj_.InvokeTypes(9, LCID, 1, (24, 0), ((5, 0), (5, 0)),X
			, Y)

	_prop_map_get_ = {
		# Property 'Center' is an object of type 'Position2D'
		"Center": (7, 2, (13, 0), (), "Center", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		"EndX": (3, 2, (5, 0), (), "EndX", None),
		"EndY": (4, 2, (5, 0), (), "EndY", None),
		"SizeX": (5, 2, (5, 0), (), "SizeX", None),
		"SizeY": (6, 2, (5, 0), (), "SizeY", None),
		"StartX": (1, 2, (5, 0), (), "StartX", None),
		"StartY": (2, 2, (5, 0), (), "StartY", None),
	}
	_prop_map_put_ = {
		"Center" : ((7, LCID, 4, 0),()),
		"EndX" : ((3, LCID, 4, 0),()),
		"EndY" : ((4, LCID, 4, 0),()),
		"SizeX" : ((5, LCID, 4, 0),()),
		"SizeY" : ((6, LCID, 4, 0),()),
		"StartX" : ((1, LCID, 4, 0),()),
		"StartY" : ((2, LCID, 4, 0),()),
	}

class IRoiTable(DispatchBaseClass):
	CLSID = IID('{3141781E-9A6D-4974-A0F9-C1D78BFE671B}')
	coclass_clsid = IID('{5B08C067-8012-40C3-833E-2363F506BC10}')

	# The method FamilyState is actually a property, but must be used as a method to correctly pass the arguments
	def FamilyState(self, AtomicNumber=defaultNamedNotOptArg, EdgeFamily=defaultNamedNotOptArg):
		"""Gets the current enabled state of a family"""
		return self._oleobj_.InvokeTypes(1, LCID, 2, (11, 0), ((3, 0), (3, 0)),AtomicNumber
			, EdgeFamily)

	# The method QuantifyFamily is actually a property, but must be used as a method to correctly pass the arguments
	def QuantifyFamily(self, AtomicNumber=defaultNamedNotOptArg):
		"""Gets the current quantification family for an element"""
		return self._oleobj_.InvokeTypes(2, LCID, 2, (3, 0), ((3, 0),),AtomicNumber
			)

	# The method SetFamilyState is actually a property, but must be used as a method to correctly pass the arguments
	def SetFamilyState(self, AtomicNumber=defaultNamedNotOptArg, EdgeFamily=defaultNamedNotOptArg, arg2=defaultUnnamedArg):
		"""Gets the current enabled state of a family"""
		return self._oleobj_.InvokeTypes(1, LCID, 4, (24, 0), ((3, 0), (3, 0), (11, 0)),AtomicNumber
			, EdgeFamily, arg2)

	# The method SetQuantifyFamily is actually a property, but must be used as a method to correctly pass the arguments
	def SetQuantifyFamily(self, AtomicNumber=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets the current quantification family for an element"""
		return self._oleobj_.InvokeTypes(2, LCID, 4, (24, 0), ((3, 0), (3, 0)),AtomicNumber
			, arg1)

	# The method SetState is actually a property, but must be used as a method to correctly pass the arguments
	def SetState(self, AtomicNumber=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets the current enabled state of an element"""
		return self._oleobj_.InvokeTypes(65538, LCID, 4, (24, 0), ((3, 0), (11, 0)),AtomicNumber
			, arg1)

	# The method State is actually a property, but must be used as a method to correctly pass the arguments
	def State(self, AtomicNumber=defaultNamedNotOptArg):
		"""Gets the current enabled state of an element"""
		return self._oleobj_.InvokeTypes(65538, LCID, 2, (11, 0), ((3, 0),),AtomicNumber
			)

	_prop_map_get_ = {
		"SelectedElements": (65537, 2, (12, 0), (), "SelectedElements", None),
	}
	_prop_map_put_ = {
		"SelectedElements" : ((65537, LCID, 4, 0),()),
	}

class IScanningServer(DispatchBaseClass):
	CLSID = IID('{65B16A78-E63E-11D2-AD9E-00A0241857FD}')
	coclass_clsid = IID('{65B16A79-E63E-11D2-AD9E-00A0241857FD}')

	def CreateMagnification(self, Magnification=defaultNamedNotOptArg, ImageRange=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg):
		"""Creates a new magnification calibration"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (24, 0), ((5, 0), (13, 0), (3, 0)),Magnification
			, ImageRange, MicroscopeMode)

	def DeleteMagnification(self, Name=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg):
		"""Deletes a magnification calibration"""
		return self._oleobj_.InvokeTypes(65546, LCID, 1, (24, 0), ((8, 0), (3, 0)),Name
			, MicroscopeMode)

	def GetAdditionalParameters(self):
		"""Gets spatial parameters as a xml in key/value pair."""
		ret = self._oleobj_.InvokeTypes(65552, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetAdditionalParameters', None, UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def GetDwellTimeRange(self):
		"""Gets the valid dwell time range"""
		ret = self._oleobj_.InvokeTypes(13, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetDwellTimeRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range2D
	def GetMagnificationReadoutRange(self, MagnificationName=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg):
		"""Returns readout range for a specific magnification"""
		ret = self._oleobj_.InvokeTypes(65549, LCID, 1, (13, 0), ((8, 0), (3, 0)),MagnificationName
			, MicroscopeMode)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetMagnificationReadoutRange', '{78D416E3-00BF-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def GetScanResolutionRange(self):
		"""Gets range of valid scan resolutions for current magnification"""
		ret = self._oleobj_.InvokeTypes(15, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetScanResolutionRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range2D
	def GetTotalScanRange(self):
		"""Gets the largest scan range allowed by current magnification"""
		ret = self._oleobj_.InvokeTypes(14, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetTotalScanRange', '{78D416E3-00BF-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def MagnificationName(self, Magnification=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg):
		"""Returns the name of a magnification calibration"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(65548, LCID, 1, (8, 0), ((5, 0), (3, 0)),Magnification
			, MicroscopeMode)

	# Result is of type StringCollection
	def MagnificationNames(self, MicroscopeMode=defaultNamedNotOptArg):
		"""Returns the names of all magnification calibrations"""
		ret = self._oleobj_.InvokeTypes(65547, LCID, 1, (13, 0), ((3, 0),),MicroscopeMode
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'MagnificationNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def ResetBeamParkPosition(self):
		"""Will disable the beam position which is used to 'park' the beam after a raster scan"""
		return self._oleobj_.InvokeTypes(17, LCID, 1, (24, 0), (),)

	def SetAdditionalParameters(self, AdditionalParameters=defaultNamedNotOptArg):
		"""Sets spatial parameters passed as xml in key/value pair."""
		return self._oleobj_.InvokeTypes(65551, LCID, 1, (24, 0), ((9, 0),),AdditionalParameters
			)

	def SetBeamParkPosition(self, Position=defaultNamedNotOptArg):
		"""Sets the beam position the beam moves to after a finished raster scan"""
		return self._oleobj_.InvokeTypes(16, LCID, 1, (24, 0), ((13, 0),),Position
			)

	def SetDriftRate(self, X=defaultNamedNotOptArg, Y=defaultNamedNotOptArg):
		"""Sets the drift-compensation rate"""
		return self._oleobj_.InvokeTypes(65544, LCID, 1, (24, 0), ((5, 0), (5, 0)),X
			, Y)

	def SetFrameScan(self, Range=defaultNamedNotOptArg, Resolution=defaultNamedNotOptArg):
		"""Sets frame scan range and resolution"""
		return self._oleobj_.InvokeTypes(11, LCID, 1, (24, 0), ((13, 0), (5, 0)),Range
			, Resolution)

	def SetFrameSize(self, Width=defaultNamedNotOptArg, Height=defaultNamedNotOptArg):
		"""Sets frame size in pixels"""
		return self._oleobj_.InvokeTypes(12, LCID, 1, (24, 0), ((3, 0), (3, 0)),Width
			, Height)

	def SetLineScan(self, Position1=defaultNamedNotOptArg, Position2=defaultNamedNotOptArg, Resolution=defaultNamedNotOptArg):
		"""Sets the line scan position and resolution"""
		return self._oleobj_.InvokeTypes(10, LCID, 1, (24, 0), ((13, 0), (13, 0), (5, 0)),Position1
			, Position2, Resolution)

	def SetMagnificationReadoutRange(self, MagnificationName=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg, Range=defaultNamedNotOptArg):
		"""Sets readout range for a specific magnification"""
		return self._oleobj_.InvokeTypes(65550, LCID, 1, (24, 0), ((8, 0), (3, 0), (13, 0)),MagnificationName
			, MicroscopeMode, Range)

	_prop_map_get_ = {
		"AcquireMode": (65537, 2, (3, 0), (), "AcquireMode", None),
		# Property 'BeamPosition' is an object of type 'Position2D'
		"BeamPosition": (7, 2, (13, 0), (), "BeamPosition", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		"DriftRateX": (65539, 2, (5, 0), (), "DriftRateX", None),
		"DriftRateY": (65540, 2, (5, 0), (), "DriftRateY", None),
		"DwellTime": (4, 2, (5, 0), (), "DwellTime", None),
		"ForceExternalScan": (9, 2, (11, 0), (), "ForceExternalScan", None),
		"FrameHeight": (2, 2, (3, 0), (), "FrameHeight", None),
		"FrameWidth": (1, 2, (3, 0), (), "FrameWidth", None),
		"LineLength": (3, 2, (3, 0), (), "LineLength", None),
		"Name": (65543, 2, (8, 0), (), "Name", None),
		"NumberFrames": (65542, 2, (3, 0), (), "NumberFrames", None),
		# Property 'ReferencePosition' is an object of type 'Position2D'
		"ReferencePosition": (65538, 2, (13, 0), (), "ReferencePosition", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		"ScanMode": (6, 2, (3, 0), (), "ScanMode", None),
		# Property 'ScanRange' is an object of type 'Range2D'
		"ScanRange": (8, 2, (13, 0), (), "ScanRange", '{78D416E3-00BF-11D2-AD12-00A0241857FD}'),
		"ScanResolution": (5, 2, (5, 0), (), "ScanResolution", None),
		"SeriesSize": (65541, 2, (3, 0), (), "SeriesSize", None),
	}
	_prop_map_put_ = {
		"AcquireMode" : ((65537, LCID, 4, 0),()),
		"BeamPosition" : ((7, LCID, 4, 0),()),
		"DriftRateX" : ((65539, LCID, 4, 0),()),
		"DriftRateY" : ((65540, LCID, 4, 0),()),
		"DwellTime" : ((4, LCID, 4, 0),()),
		"ForceExternalScan" : ((9, LCID, 4, 0),()),
		"FrameHeight" : ((2, LCID, 4, 0),()),
		"FrameWidth" : ((1, LCID, 4, 0),()),
		"LineLength" : ((3, LCID, 4, 0),()),
		"Name" : ((65543, LCID, 4, 0),()),
		"NumberFrames" : ((65542, LCID, 4, 0),()),
		"ReferencePosition" : ((65538, LCID, 4, 0),()),
		"ScanMode" : ((6, LCID, 4, 0),()),
		"ScanRange" : ((8, LCID, 4, 0),()),
		"ScanResolution" : ((5, LCID, 4, 0),()),
		"SeriesSize" : ((65541, LCID, 4, 0),()),
	}

class ISetupListDialog(DispatchBaseClass):
	CLSID = IID('{071BA1D6-9D12-4896-AAE7-B6946BA3A23B}')
	coclass_clsid = IID('{206A7F2B-0416-4BF3-8189-95E4D1150667}')

	# Result is of type StringCollection
	def GetSetupNames(self):
		"""Gets the list of setup names"""
		ret = self._oleobj_.InvokeTypes(3, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetSetupNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def SetSetupNames(self, SetupNames=defaultNamedNotOptArg):
		"""Sets the list of setup names"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (24, 0), ((13, 0),),SetupNames
			)

	def Show(self):
		"""Shows the dialog"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (11, 0), (),)

	_prop_map_get_ = {
		"ActiveSetup": (1, 2, (8, 0), (), "ActiveSetup", None),
	}
	_prop_map_put_ = {
		"ActiveSetup" : ((1, LCID, 4, 0),()),
	}

class IShortcutBar(DispatchBaseClass):
	CLSID = IID('{80B79740-15DE-11D2-AD14-00A0241857FD}')
	coclass_clsid = IID('{80B79741-15DE-11D2-AD14-00A0241857FD}')

	def AppendItem(self, Section=defaultNamedNotOptArg, Item=defaultNamedNotOptArg, Type=defaultNamedNotOptArg):
		"""Adds a button to the shortcut bar"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), ((8, 0), (8, 0), (3, 0)),Section
			, Item, Type)

	def RemoveAll(self):
		"""Removes all buttons previously added to this ShortcutBar object"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (24, 0), (),)

	_prop_map_get_ = {
		"Section": (2, 2, (8, 0), (), "Section", None),
		"Visible": (1, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Section" : ((2, LCID, 4, 0),()),
		"Visible" : ((1, LCID, 4, 0),()),
	}

class ISpatialUnit(DispatchBaseClass):
	CLSID = IID('{97033EE3-566E-11D2-AD28-00A0241857FD}')
	coclass_clsid = IID('{97033EE5-566E-11D2-AD28-00A0241857FD}')

	def ConvertFromBase(self, Value=defaultNamedNotOptArg):
		"""Converts a number from base units (meters) to the current unit"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (5, 0), ((5, 0),),Value
			)

	def ConvertToBase(self, Value=defaultNamedNotOptArg):
		"""Converts a number to base units (meters)."""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (5, 0), ((5, 0),),Value
			)

	def IsReciprocal(self):
		"""Queries if the current unit is a reciprocal unit"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (11, 0), (),)

	# Result is of type SpatialUnit
	def Reciprocal(self):
		"""Returns the reciprocal of the current unit"""
		ret = self._oleobj_.InvokeTypes(5, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Reciprocal', '{97033EE5-566E-11D2-AD28-00A0241857FD}', UnicodeToString=0)
		return ret

	_prop_map_get_ = {
		"UnitString": (1, 2, (8, 0), (), "UnitString", None),
		"_UnitString": (0, 2, (8, 0), (), "_UnitString", None),
	}
	_prop_map_put_ = {
		"UnitString" : ((1, LCID, 4, 0),()),
		"_UnitString" : ((0, LCID, 4, 0),()),
	}
	# Default property for this class is '_UnitString'
	def __call__(self):
		return self._ApplyTypes_(*(0, 2, (8, 0), (), "_UnitString", None))
	# str(ob) and int(ob) will use __call__
	def __unicode__(self, *args):
		try:
			return unicode(self.__call__(*args))
		except pythoncom.com_error:
			return repr(self)
	def __str__(self, *args):
		return str(self.__unicode__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))

class ISpectrum(DispatchBaseClass):
	CLSID = IID('{57EE3A62-83EF-11D2-AD6F-00A0241857FD}')
	coclass_clsid = IID('{57EE3A63-83EF-11D2-AD6F-00A0241857FD}')

	# Result is of type Data1D
	def AddSeries(self, Range=defaultNamedNotOptArg):
		"""Adds data in a series"""
		ret = self._oleobj_.InvokeTypes(65548, LCID, 1, (13, 0), ((13, 0),),Range
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddSeries', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	def AppendData(self, SpectrumData=defaultNamedNotOptArg, Tag=defaultNamedOptArg):
		"""Appends the supplied data to the series of a Spectrum"""
		return self._oleobj_.InvokeTypes(6, LCID, 1, (24, 0), ((13, 0), (12, 16)),SpectrumData
			, Tag)

	def AppendSeries(self, Spectrum=defaultNamedNotOptArg):
		"""Appends the data series of an Spectrum to another Spectrum"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (24, 0), ((13, 0),),Spectrum
			)

	def ClearSeries(self):
		"""Clears the data series"""
		return self._oleobj_.InvokeTypes(65541, LCID, 1, (24, 0), (),)

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(131080, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(131079, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def GetSeriesRange(self):
		"""Gets the valid range of images in a series contained in an Image object"""
		ret = self._oleobj_.InvokeTypes(65545, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetSeriesRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(131081, LCID, 1, (11, 0), (),)

	def MoveSeries(self, Spectrum=defaultNamedNotOptArg):
		"""Moves the data series of an Spectrum to another Spectrum"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (24, 0), ((13, 0),),Spectrum
			)

	def SeriesCalibration(self):
		"""Gets the calibration if one is associated with a data series"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'SeriesCalibration', None, UnicodeToString=0)
		return ret

	# Result is of type Data1D
	def SeriesData(self, Index=defaultNamedNotOptArg):
		"""Gets data at specified index in data series"""
		ret = self._oleobj_.InvokeTypes(65542, LCID, 1, (13, 0), ((3, 0),),Index
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'SeriesData', '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}', UnicodeToString=0)
		return ret

	def SeriesTag(self, Index=defaultNamedNotOptArg):
		"""Gets tag at specified index in data series"""
		return self._ApplyTypes_(65543, 1, (12, 0), ((3, 0),), 'SeriesTag', None,Index
			)

	def Set1DFileSeries(self, Path=defaultNamedNotOptArg, Size=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Associates a 1D data series with an Image"""
		return self._oleobj_.InvokeTypes(65546, LCID, 1, (24, 0), ((8, 0), (3, 0), (13, 0)),Path
			, Size, Calibration)

	def Set2DFileSeries(self, Path=defaultNamedNotOptArg, SizeX=defaultNamedNotOptArg, SizeY=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Associates a 2D data series with an Image"""
		return self._oleobj_.InvokeTypes(65547, LCID, 1, (24, 0), ((8, 0), (3, 0), (3, 0), (13, 0)),Path
			, SizeX, SizeY, Calibration)

	def SetDataRegion(self, Data=defaultNamedNotOptArg):
		"""Replaces a region of the existing data with new data"""
		return self._oleobj_.InvokeTypes(8, LCID, 1, (24, 0), ((13, 0),),Data
			)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (3, 0), (),)

	def Write(self, Path=defaultNamedNotOptArg, Format=defaultNamedNotOptArg):
		"""Saves data in a selected format"""
		return self._oleobj_.InvokeTypes(65549, LCID, 1, (24, 0), ((8, 0), (8, 0)),Path
			, Format)

	_prop_map_get_ = {
		# Property 'Calibration' is an object of type 'Calibration1D'
		"Calibration": (2, 2, (13, 0), (), "Calibration", '{E1B6CE12-0BE5-11D2-AD13-00A0241857FD}'),
		# Property 'Data' is an object of type 'Data1D'
		"Data": (1, 2, (13, 0), (), "Data", '{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}'),
		"IsAnnotation": (3, 2, (11, 0), (), "IsAnnotation", None),
		"Lock": (131077, 2, (11, 0), (), "Lock", None),
		"Name": (131074, 2, (8, 0), (), "Name", None),
		"NumberInSeries": (65537, 2, (3, 0), (), "NumberInSeries", None),
		"ObjectInfo": (65539, 2, (9, 0), (), "ObjectInfo", None),
		"Ordinal": (131075, 2, (3, 0), (), "Ordinal", None),
		"Selectable": (131078, 2, (11, 0), (), "Selectable", None),
		"SeriesCount": (65538, 2, (3, 0), (), "SeriesCount", None),
		"SeriesFilePath": (65540, 2, (8, 0), (), "SeriesFilePath", None),
		"Style": (131076, 2, (8, 0), (), "Style", None),
		"Visible": (131073, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Calibration" : ((2, LCID, 4, 0),()),
		"Data" : ((1, LCID, 4, 0),()),
		"IsAnnotation" : ((3, LCID, 4, 0),()),
		"Lock" : ((131077, LCID, 4, 0),()),
		"Name" : ((131074, LCID, 4, 0),()),
		"NumberInSeries" : ((65537, LCID, 4, 0),()),
		"ObjectInfo" : ((65539, LCID, 4, 0),()),
		"Ordinal" : ((131075, LCID, 4, 0),()),
		"Selectable" : ((131078, LCID, 4, 0),()),
		"SeriesCount" : ((65538, LCID, 4, 0),()),
		"SeriesFilePath" : ((65540, LCID, 4, 0),()),
		"Style" : ((131076, LCID, 4, 0),()),
		"Visible" : ((131073, LCID, 4, 0),()),
	}

class ISpectrumDisplay(DispatchBaseClass):
	"""Dispatch interface for SpectrumDisplay Control"""
	CLSID = IID('{01D6656B-80D1-11D2-AD6D-00A0241857FD}')
	coclass_clsid = IID('{01D6656C-80D1-11D2-AD6D-00A0241857FD}')

	# Result is of type EnergyMarker
	def AddEnergyMarker(self, Name=defaultNamedNotOptArg, Energy=defaultNamedNotOptArg):
		"""Adds a new energy marker"""
		ret = self._oleobj_.InvokeTypes(5, LCID, 1, (13, 0), ((8, 0), (5, 0)),Name
			, Energy)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddEnergyMarker', '{57EE3A65-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type EnergyWindow
	def AddEnergyWindow(self, Name=defaultNamedNotOptArg, Range=defaultNamedNotOptArg):
		"""Adds a new energy window"""
		ret = self._oleobj_.InvokeTypes(6, LCID, 1, (13, 0), ((8, 0), (13, 0)),Name
			, Range)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddEnergyWindow', '{57EE3A67-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Spectrum
	def AddSpectrum(self, Name=defaultNamedNotOptArg, Size=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg):
		"""Adds a new spectrum"""
		ret = self._oleobj_.InvokeTypes(4, LCID, 1, (13, 0), ((8, 0), (3, 0), (13, 0)),Name
			, Size, Calibration)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'AddSpectrum', '{57EE3A63-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	def Autoscale(self, Type=defaultNamedNotOptArg):
		"""Performs an automatic scaling operation on a Display"""
		return self._oleobj_.InvokeTypes(65548, LCID, 1, (24, 0), ((3, 0),),Type
			)

	def DeleteObject(self, DisplayObject=defaultNamedNotOptArg):
		"""Deletes the specified display object"""
		return self._oleobj_.InvokeTypes(65551, LCID, 1, (24, 0), ((9, 0),),DisplayObject
			)

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display"""
		ret = self._oleobj_.InvokeTypes(65550, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def FindObject(self, Name=defaultNamedNotOptArg):
		"""Finds the display object with the specified name"""
		ret = self._oleobj_.InvokeTypes(65546, LCID, 1, (9, 0), ((8, 0),),Name
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindObject', None, UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid display."""
		return self._oleobj_.InvokeTypes(65552, LCID, 1, (11, 0), (),)

	# The method KlmDisplayed is actually a property, but must be used as a method to correctly pass the arguments
	def KlmDisplayed(self, AtomicNumber=defaultNamedNotOptArg):
		"""Gets the displayed state of a KLM marker"""
		return self._oleobj_.InvokeTypes(8, LCID, 2, (11, 0), ((3, 0),),AtomicNumber
			)

	# The method KlmFamilyDisplayed is actually a property, but must be used as a method to correctly pass the arguments
	def KlmFamilyDisplayed(self, AtomicNumber=defaultNamedNotOptArg, KlmFamily=defaultNamedNotOptArg):
		"""Gets the displayed state of a family in a KLM marker"""
		return self._oleobj_.InvokeTypes(9, LCID, 2, (11, 0), ((3, 0), (3, 0)),AtomicNumber
			, KlmFamily)

	# Result is of type StringCollection
	def ObjectNames(self):
		"""Return a string collection with the names of all Display Objects present in the Display"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'ObjectNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def OrganizeObjects(self, Type=defaultNamedNotOptArg):
		"""Organizes the names and the ordinals of all object of the specified type"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (24, 0), ((3, 0),),Type
			)

	def Path(self):
		"""Gets the path to the Display"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(65547, LCID, 1, (8, 0), (),)

	def SetGrid(self, Style=defaultNamedNotOptArg):
		"""Sets grid lines"""
		return self._oleobj_.InvokeTypes(65549, LCID, 1, (24, 0), ((3, 0),),Style
			)

	# The method SetKlmDisplayed is actually a property, but must be used as a method to correctly pass the arguments
	def SetKlmDisplayed(self, AtomicNumber=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets the displayed state of a KLM marker"""
		return self._oleobj_.InvokeTypes(8, LCID, 4, (24, 0), ((3, 0), (11, 0)),AtomicNumber
			, arg1)

	# The method SetKlmFamilyDisplayed is actually a property, but must be used as a method to correctly pass the arguments
	def SetKlmFamilyDisplayed(self, AtomicNumber=defaultNamedNotOptArg, KlmFamily=defaultNamedNotOptArg, arg2=defaultUnnamedArg):
		"""Gets the displayed state of a family in a KLM marker"""
		return self._oleobj_.InvokeTypes(9, LCID, 4, (24, 0), ((3, 0), (3, 0), (11, 0)),AtomicNumber
			, KlmFamily, arg2)

	# Result is of type StringCollection
	def SortedObjectNames(self, Type=defaultNamedNotOptArg):
		"""Return a string collection with the names of all Display Objects with a specific type present in the Display"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (13, 0), ((3, 0),),Type
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'SortedObjectNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def SubType(self):
		"""Gets the subtype of a Display."""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (3, 0), (),)

	# Result is of type Spectrum
	def TopSpectrum(self):
		"""Gets the spectrum at the top of the display order that is contained in this display"""
		ret = self._oleobj_.InvokeTypes(7, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'TopSpectrum', '{57EE3A63-83EF-11D2-AD6F-00A0241857FD}', UnicodeToString=0)
		return ret

	def Type(self):
		"""Gets the type of a Display"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		# Property 'DisplayRange' is an object of type 'Range2D'
		"DisplayRange": (65539, 2, (13, 0), (), "DisplayRange", '{78D416E3-00BF-11D2-AD12-00A0241857FD}'),
		"DisplayedKlmElements": (1, 2, (12, 0), (), "DisplayedKlmElements", None),
		"Legend": (65540, 2, (11, 0), (), "Legend", None),
		"Lock": (65542, 2, (11, 0), (), "Lock", None),
		"Name": (65537, 2, (8, 0), (), "Name", None),
		"Style": (65541, 2, (8, 0), (), "Style", None),
		"Visible": (65538, 2, (11, 0), (), "Visible", None),
		"XAxisCalibratedView": (10, 2, (11, 0), (), "XAxisCalibratedView", None),
		"YAxisCalibratedView": (11, 2, (11, 0), (), "YAxisCalibratedView", None),
	}
	_prop_map_put_ = {
		"DisplayRange" : ((65539, LCID, 4, 0),()),
		"DisplayedKlmElements" : ((1, LCID, 4, 0),()),
		"Legend" : ((65540, LCID, 4, 0),()),
		"Lock" : ((65542, LCID, 4, 0),()),
		"Name" : ((65537, LCID, 4, 0),()),
		"Style" : ((65541, LCID, 4, 0),()),
		"Visible" : ((65538, LCID, 4, 0),()),
		"XAxisCalibratedView" : ((10, LCID, 4, 0),()),
		"YAxisCalibratedView" : ((11, LCID, 4, 0),()),
	}

class IStandardsTable(DispatchBaseClass):
	CLSID = IID('{9B473B82-AD8C-48B0-BB45-8DF7A3796343}')
	coclass_clsid = IID('{C0075CCE-F9EA-44F2-9DBD-B90CC8E1395B}')

	def SetStandardsList(self, pStandardsNode=defaultNamedNotOptArg):
		"""Sets the standard list for the StandardsTable"""
		return self._oleobj_.InvokeTypes(1, LCID, 1, (24, 0), ((9, 0),),pStandardsNode
			)

	# The method SetState is actually a property, but must be used as a method to correctly pass the arguments
	def SetState(self, AtomicNumber=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets the current enabled state of an element"""
		return self._oleobj_.InvokeTypes(65538, LCID, 4, (24, 0), ((3, 0), (11, 0)),AtomicNumber
			, arg1)

	# The method State is actually a property, but must be used as a method to correctly pass the arguments
	def State(self, AtomicNumber=defaultNamedNotOptArg):
		"""Gets the current enabled state of an element"""
		return self._oleobj_.InvokeTypes(65538, LCID, 2, (11, 0), ((3, 0),),AtomicNumber
			)

	_prop_map_get_ = {
		"SelectedElements": (65537, 2, (12, 0), (), "SelectedElements", None),
	}
	_prop_map_put_ = {
		"SelectedElements" : ((65537, LCID, 4, 0),()),
	}

class IStatusDialog(DispatchBaseClass):
	CLSID = IID('{90B5AE8A-9BDE-4E0A-BBA3-39C088A2B876}')
	coclass_clsid = IID('{6C7035D8-2583-4C77-A8DC-495F56C3032A}')

	def Hide(self):
		"""Hides the dialog"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), (),)

	def Show(self):
		"""Shows the dialog"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (11, 0), (),)

	_prop_map_get_ = {
		"StatusMessage": (1, 2, (8, 0), (), "StatusMessage", None),
	}
	_prop_map_put_ = {
		"StatusMessage" : ((1, LCID, 4, 0),()),
	}

class IStringCollection(DispatchBaseClass):
	CLSID = IID('{6642EC80-DB55-11D1-8884-00A0241857FD}')
	coclass_clsid = IID('{6642EC81-DB55-11D1-8884-00A0241857FD}')

	def Add(self, Item=defaultNamedNotOptArg):
		"""Adds a new string to a string collection"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (3, 0), ((8, 0),),Item
			)

	def Find(self, Item=defaultNamedNotOptArg):
		"""Returns the index of a given item in a string collection"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (3, 0), ((8, 0),),Item
			)

	def Has(self, Item=defaultNamedNotOptArg):
		"""Queries if a string is present in the string collection"""
		return self._oleobj_.InvokeTypes(4, LCID, 1, (11, 0), ((8, 0),),Item
			)

	def IsEqual(self, StringCollection=defaultNamedNotOptArg):
		"""Compares all items between two string collections"""
		return self._oleobj_.InvokeTypes(7, LCID, 1, (3, 0), ((9, 0),),StringCollection
			)

	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index=defaultNamedNotOptArg):
		"""Gets or sets the item at a given index in a string collection"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(8, LCID, 2, (8, 0), ((3, 0),),Index
			)

	def Remove(self, removeValue=defaultNamedNotOptArg):
		"""Removes an item at a given index in a string collection"""
		return self._oleobj_.InvokeTypes(5, LCID, 1, (3, 0), ((12, 0),),removeValue
			)

	def RemoveAll(self):
		"""Removes all items from a string collection"""
		return self._oleobj_.InvokeTypes(6, LCID, 1, (24, 0), (),)

	# The method SetItem is actually a property, but must be used as a method to correctly pass the arguments
	def SetItem(self, Index=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		"""Gets or sets the item at a given index in a string collection"""
		return self._oleobj_.InvokeTypes(8, LCID, 4, (24, 0), ((3, 0), (8, 0)),Index
			, arg1)

	# The method Set_Item is actually a property, but must be used as a method to correctly pass the arguments
	def Set_Item(self, Index=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		return self._oleobj_.InvokeTypes(0, LCID, 4, (24, 0), ((3, 0), (8, 0)),Index
			, arg1)

	# The method _Item is actually a property, but must be used as a method to correctly pass the arguments
	def _Item(self, Index=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(0, LCID, 2, (8, 0), ((3, 0),),Index
			)

	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
	}
	_prop_map_put_ = {
		"Count" : ((1, LCID, 4, 0),()),
	}
	# Default method for this class is '_Item'
	def __call__(self, Index=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		return self._oleobj_.InvokeTypes(0, LCID, 4, (24, 0), ((3, 0), (8, 0)),Index
			, arg1)

	# str(ob) and int(ob) will use __call__
	def __unicode__(self, *args):
		try:
			return unicode(self.__call__(*args))
		except pythoncom.com_error:
			return repr(self)
	def __str__(self, *args):
		return str(self.__unicode__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		return win32com.client.util.Iterator(ob)
	def _NewEnum(self):
		"Create an enumerator from this object"
		return win32com.client.util.WrapEnum(self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),()),None)
	def __getitem__(self, index):
		"Allow this class to be accessed as a collection"
		if not self.__dict__.has_key('_enum_'):
			self.__dict__['_enum_'] = self._NewEnum()
		return self._enum_.__getitem__(index)
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IStringDialog(DispatchBaseClass):
	CLSID = IID('{285304C1-63C4-11D2-AD39-00A0241857FD}')
	coclass_clsid = IID('{285304C3-63C4-11D2-AD39-00A0241857FD}')

	def Entry(self):
		"""Retrieves a user entry in a dialog"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(2, LCID, 1, (8, 0), (),)

	def Show(self):
		"""Shows a dialog"""
		return self._oleobj_.InvokeTypes(1, LCID, 1, (11, 0), (),)

	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}

class IStringListDialog(DispatchBaseClass):
	CLSID = IID('{285304C4-63C4-11D2-AD39-00A0241857FD}')
	coclass_clsid = IID('{285304C6-63C4-11D2-AD39-00A0241857FD}')

	def Entry(self):
		"""Retrieves a user entry in a dialog"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(2, LCID, 1, (8, 0), (),)

	def Show(self):
		"""Shows a dialog"""
		return self._oleobj_.InvokeTypes(1, LCID, 1, (11, 0), (),)

	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}

class ITextMarker(DispatchBaseClass):
	CLSID = IID('{A0CF9DF9-2CAC-47CC-B82C-9A69A439DB2A}')
	coclass_clsid = IID('{6044AD84-5853-4458-BA2B-FB3C3391C8AD}')

	def Display(self):
		"""Gets the Display that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Display', None, UnicodeToString=0)
		return ret

	# Result is of type DisplayWindow
	def DisplayWindow(self):
		"""Gets the display window that contains this Display Object"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DisplayWindow', '{A95A2BC3-B871-11D1-887C-00A0241857FD}', UnicodeToString=0)
		return ret

	def IsNull(self):
		"""Queries if the object refers to a valid Display Object"""
		return self._oleobj_.InvokeTypes(65545, LCID, 1, (11, 0), (),)

	def Type(self):
		"""Gets the type of a Display Object"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (3, 0), (),)

	_prop_map_get_ = {
		"Lock": (65541, 2, (11, 0), (), "Lock", None),
		"Name": (65538, 2, (8, 0), (), "Name", None),
		"Ordinal": (65539, 2, (3, 0), (), "Ordinal", None),
		# Property 'Position' is an object of type 'Position2D'
		"Position": (1, 2, (13, 0), (), "Position", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		# Property 'Range' is an object of type 'Range2D'
		"Range": (2, 2, (13, 0), (), "Range", '{78D416E3-00BF-11D2-AD12-00A0241857FD}'),
		"Selectable": (65542, 2, (11, 0), (), "Selectable", None),
		"Style": (65540, 2, (8, 0), (), "Style", None),
		"Visible": (65537, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Lock" : ((65541, LCID, 4, 0),()),
		"Name" : ((65538, LCID, 4, 0),()),
		"Ordinal" : ((65539, LCID, 4, 0),()),
		"Position" : ((1, LCID, 4, 0),()),
		"Range" : ((2, LCID, 4, 0),()),
		"Selectable" : ((65542, LCID, 4, 0),()),
		"Style" : ((65540, LCID, 4, 0),()),
		"Visible" : ((65537, LCID, 4, 0),()),
	}

class IValueDialog(DispatchBaseClass):
	CLSID = IID('{285304CA-63C4-11D2-AD39-00A0241857FD}')
	coclass_clsid = IID('{285304CC-63C4-11D2-AD39-00A0241857FD}')

	def Entry(self):
		"""Retrieves a user entry in a dialog"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (5, 0), (),)

	def Show(self):
		"""Shows a dialog"""
		return self._oleobj_.InvokeTypes(1, LCID, 1, (11, 0), (),)

	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}

class IVector(DispatchBaseClass):
	CLSID = IID('{B396F1A0-6430-11D2-AD39-00A0241857FD}')
	coclass_clsid = IID('{B396F1A1-6430-11D2-AD39-00A0241857FD}')

	def Set(self, X=defaultNamedNotOptArg, Y=defaultNamedNotOptArg):
		"""Sets the coordinates of a vector"""
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), ((5, 0), (5, 0)),X
			, Y)

	_prop_map_get_ = {
		"X": (1, 2, (5, 0), (), "X", None),
		"Y": (2, 2, (5, 0), (), "Y", None),
	}
	_prop_map_put_ = {
		"X" : ((1, LCID, 4, 0),()),
		"Y" : ((2, LCID, 4, 0),()),
	}

class IVideoServer(DispatchBaseClass):
	CLSID = IID('{65B16A76-E63E-11D2-AD9E-00A0241857FD}')
	coclass_clsid = IID('{65B16A77-E63E-11D2-AD9E-00A0241857FD}')

	# Result is of type StringCollection
	def CameraNames(self):
		"""Returns a string collection with all camera names"""
		ret = self._oleobj_.InvokeTypes(65550, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'CameraNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def CreateMagnification(self, Magnification=defaultNamedNotOptArg, ImageRange=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg):
		"""Creates a new magnification calibration"""
		return self._oleobj_.InvokeTypes(131081, LCID, 1, (24, 0), ((5, 0), (13, 0), (3, 0)),Magnification
			, ImageRange, MicroscopeMode)

	def DeleteMagnification(self, Name=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg):
		"""Deletes a magnification calibration"""
		return self._oleobj_.InvokeTypes(131082, LCID, 1, (24, 0), ((8, 0), (3, 0)),Name
			, MicroscopeMode)

	def GetAdditionalParameters(self):
		"""Gets spatial parameters as a xml in key/value pair."""
		ret = self._oleobj_.InvokeTypes(131088, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetAdditionalParameters', None, UnicodeToString=0)
		return ret

	# Result is of type Data2D
	def GetBiasImage(self):
		"""Gets the bias image for the current acquisition parameters"""
		ret = self._oleobj_.InvokeTypes(65553, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetBiasImage', '{1418082A-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Data2D
	def GetGainImage(self):
		"""Gets the gain image"""
		ret = self._oleobj_.InvokeTypes(65554, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetGainImage', '{1418082A-DCFE-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def GetIntegrationTimeRange(self):
		"""Gets allowable range of integration times"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetIntegrationTimeRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range2D
	def GetMagnificationReadoutRange(self, MagnificationName=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg):
		"""Returns readout range for a specific magnification"""
		ret = self._oleobj_.InvokeTypes(131085, LCID, 1, (13, 0), ((8, 0), (3, 0)),MagnificationName
			, MicroscopeMode)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetMagnificationReadoutRange', '{78D416E3-00BF-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range2D
	def GetTotalPixelReadoutRange(self):
		"""Gets the total pixel readout range of a camera"""
		ret = self._oleobj_.InvokeTypes(65546, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetTotalPixelReadoutRange', '{78D416E3-00BF-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range2D
	def GetTotalReadoutRange(self):
		"""Gets the total readout range of a camera"""
		ret = self._oleobj_.InvokeTypes(65545, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetTotalReadoutRange', '{78D416E3-00BF-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def HasBiasImage(self):
		"""Queries if a bias image is available"""
		return self._oleobj_.InvokeTypes(65547, LCID, 1, (11, 0), (),)

	def HasGainImage(self):
		"""Queries if a gain image is available"""
		return self._oleobj_.InvokeTypes(65548, LCID, 1, (11, 0), (),)

	def IsCameraRetractable(self):
		"""Queries if the camera is retractable"""
		return self._oleobj_.InvokeTypes(65551, LCID, 1, (11, 0), (),)

	def IsFixedFrameRate(self):
		"""Queries if the camera acquires at a fixed frame rate"""
		return self._oleobj_.InvokeTypes(65552, LCID, 1, (11, 0), (),)

	def MagnificationName(self, Magnification=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg):
		"""Returns the name of a magnification calibration"""
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(131084, LCID, 1, (8, 0), ((5, 0), (3, 0)),Magnification
			, MicroscopeMode)

	# Result is of type StringCollection
	def MagnificationNames(self, MicroscopeMode=defaultNamedNotOptArg):
		"""Returns the names of all magnification calibrations"""
		ret = self._oleobj_.InvokeTypes(131083, LCID, 1, (13, 0), ((3, 0),),MicroscopeMode
			)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'MagnificationNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	def SetAdditionalParameters(self, AdditionalParameters=defaultNamedNotOptArg):
		"""Sets spatial parameters passed as xml in key/value pair."""
		return self._oleobj_.InvokeTypes(131087, LCID, 1, (24, 0), ((9, 0),),AdditionalParameters
			)

	def SetBiasImage(self, Image=defaultNamedNotOptArg):
		"""Sets the bias image"""
		return self._oleobj_.InvokeTypes(1, LCID, 1, (24, 0), ((13, 0),),Image
			)

	def SetDriftRate(self, X=defaultNamedNotOptArg, Y=defaultNamedNotOptArg):
		"""Sets the drift-compensation rate"""
		return self._oleobj_.InvokeTypes(131080, LCID, 1, (24, 0), ((5, 0), (5, 0)),X
			, Y)

	def SetGainImage(self, Image=defaultNamedNotOptArg):
		"""Sets the gain image"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (24, 0), ((13, 0),),Image
			)

	def SetMagnificationReadoutRange(self, MagnificationName=defaultNamedNotOptArg, MicroscopeMode=defaultNamedNotOptArg, Range=defaultNamedNotOptArg):
		"""Sets readout range for a specific magnification"""
		return self._oleobj_.InvokeTypes(131086, LCID, 1, (24, 0), ((8, 0), (3, 0), (13, 0)),MagnificationName
			, MicroscopeMode, Range)

	def TargetGainDwellTime(self):
		"""Gets the target dwell time for a gain reference image"""
		return self._oleobj_.InvokeTypes(65555, LCID, 1, (5, 0), (),)

	_prop_map_get_ = {
		"AcquireMode": (131073, 2, (3, 0), (), "AcquireMode", None),
		"BiasCorrection": (65540, 2, (11, 0), (), "BiasCorrection", None),
		"Camera": (65542, 2, (8, 0), (), "Camera", None),
		"CameraInserted": (65543, 2, (11, 0), (), "CameraInserted", None),
		"DriftRateX": (131075, 2, (5, 0), (), "DriftRateX", None),
		"DriftRateY": (131076, 2, (5, 0), (), "DriftRateY", None),
		"GainCorrection": (65541, 2, (11, 0), (), "GainCorrection", None),
		"IntegrationTime": (65537, 2, (5, 0), (), "IntegrationTime", None),
		"Name": (131079, 2, (8, 0), (), "Name", None),
		"NumberFrames": (131078, 2, (3, 0), (), "NumberFrames", None),
		# Property 'PixelReadoutRange' is an object of type 'Range2D'
		"PixelReadoutRange": (65539, 2, (13, 0), (), "PixelReadoutRange", '{78D416E3-00BF-11D2-AD12-00A0241857FD}'),
		# Property 'ReadoutRange' is an object of type 'Range2D'
		"ReadoutRange": (65538, 2, (13, 0), (), "ReadoutRange", '{78D416E3-00BF-11D2-AD12-00A0241857FD}'),
		# Property 'ReferencePosition' is an object of type 'Position2D'
		"ReferencePosition": (131074, 2, (13, 0), (), "ReferencePosition", '{5E82E162-F3EC-11D1-AD09-00A0241857FD}'),
		"SeriesSize": (131077, 2, (3, 0), (), "SeriesSize", None),
	}
	_prop_map_put_ = {
		"AcquireMode" : ((131073, LCID, 4, 0),()),
		"BiasCorrection" : ((65540, LCID, 4, 0),()),
		"Camera" : ((65542, LCID, 4, 0),()),
		"CameraInserted" : ((65543, LCID, 4, 0),()),
		"DriftRateX" : ((131075, LCID, 4, 0),()),
		"DriftRateY" : ((131076, LCID, 4, 0),()),
		"GainCorrection" : ((65541, LCID, 4, 0),()),
		"IntegrationTime" : ((65537, LCID, 4, 0),()),
		"Name" : ((131079, LCID, 4, 0),()),
		"NumberFrames" : ((131078, LCID, 4, 0),()),
		"PixelReadoutRange" : ((65539, LCID, 4, 0),()),
		"ReadoutRange" : ((65538, LCID, 4, 0),()),
		"ReferencePosition" : ((131074, LCID, 4, 0),()),
		"SeriesSize" : ((131077, LCID, 4, 0),()),
	}

class IXrayServer(DispatchBaseClass):
	CLSID = IID('{65B16A70-E63E-11D2-AD9E-00A0241857FD}')
	coclass_clsid = IID('{65B16A71-E63E-11D2-AD9E-00A0241857FD}')

	def ChangeDispersion(self, Name=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg, EnergyRange=defaultNamedNotOptArg):
		"""Resets the values for a dispersion"""
		return self._oleobj_.InvokeTypes(65550, LCID, 1, (24, 0), ((8, 0), (13, 0), (13, 0)),Name
			, Calibration, EnergyRange)

	def CountRate(self):
		"""Gets the count rate"""
		return self._oleobj_.InvokeTypes(2, LCID, 1, (5, 0), (),)

	def CreateDispersion(self, Name=defaultNamedNotOptArg, Calibration=defaultNamedNotOptArg, EnergyRange=defaultNamedNotOptArg):
		"""Creates a new dispersion"""
		return self._oleobj_.InvokeTypes(65547, LCID, 1, (24, 0), ((8, 0), (13, 0), (13, 0)),Name
			, Calibration, EnergyRange)

	def DeadPercentage(self):
		"""Gets the dead time percentage"""
		return self._oleobj_.InvokeTypes(1, LCID, 1, (5, 0), (),)

	def DeleteDispersion(self, Name=defaultNamedNotOptArg):
		"""Deletes a dispersion"""
		return self._oleobj_.InvokeTypes(65548, LCID, 1, (24, 0), ((8, 0),),Name
			)

	# Result is of type StringCollection
	def DispersionNames(self):
		"""Return a string collection with the names of all available dispersions"""
		ret = self._oleobj_.InvokeTypes(65543, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'DispersionNames', '{6642EC81-DB55-11D1-8884-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Dxp
	def Dxp(self):
		"""Gets the DXP if it exists"""
		ret = self._oleobj_.InvokeTypes(3, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'Dxp', '{111763C1-67CF-11D3-B149-00A0C9E5C10B}', UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def GetDwellTimeRange(self):
		"""Gets allowable range of dwell times"""
		ret = self._oleobj_.InvokeTypes(65545, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetDwellTimeRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	# Result is of type Range1D
	def GetTotalAcquireRange(self):
		"""Gets allowable acquire range"""
		ret = self._oleobj_.InvokeTypes(65544, LCID, 1, (13, 0), (),)
		if ret is not None:
			# See if this IUnknown is really an IDispatch
			try:
				ret = ret.QueryInterface(pythoncom.IID_IDispatch)
			except pythoncom.error:
				return ret
			ret = Dispatch(ret, 'GetTotalAcquireRange', '{D5837263-03D9-11D2-AD12-00A0241857FD}', UnicodeToString=0)
		return ret

	def NumberChannels(self):
		"""Returns the total number of channels of the detector"""
		return self._oleobj_.InvokeTypes(65549, LCID, 1, (3, 0), (),)

	def TimeRemaining(self):
		"""Gets remaining acquisition time"""
		return self._oleobj_.InvokeTypes(65546, LCID, 1, (5, 0), (),)

	_prop_map_get_ = {
		"AcquireMode": (65538, 2, (3, 0), (), "AcquireMode", None),
		# Property 'AcquireRange' is an object of type 'Range1D'
		"AcquireRange": (65540, 2, (13, 0), (), "AcquireRange", '{D5837263-03D9-11D2-AD12-00A0241857FD}'),
		"Dispersion": (65539, 2, (8, 0), (), "Dispersion", None),
		"DwellTime": (65537, 2, (5, 0), (), "DwellTime", None),
		"Name": (65542, 2, (8, 0), (), "Name", None),
		"SeriesSize": (65541, 2, (3, 0), (), "SeriesSize", None),
	}
	_prop_map_put_ = {
		"AcquireMode" : ((65538, LCID, 4, 0),()),
		"AcquireRange" : ((65540, LCID, 4, 0),()),
		"Dispersion" : ((65539, LCID, 4, 0),()),
		"DwellTime" : ((65537, LCID, 4, 0),()),
		"Name" : ((65542, LCID, 4, 0),()),
		"SeriesSize" : ((65541, LCID, 4, 0),()),
	}

from win32com.client import CoClassBaseClass
class AcquisitionManager(CoClassBaseClass): # A CoClass
	# Controls relevant aspects of data acquisition
	CLSID = IID('{88ABD2AC-DAAE-11D1-8884-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IAcquisitionManager,
	]
	default_interface = IAcquisitionManager

# This CoClass is known by the name 'ESVision.Application'
class Application(CoClassBaseClass): # A CoClass
	# This is the main object of the application. It controls the application main frame, retrieves many other objects relevant for the application, and fires all events
	CLSID = IID('{D20B86BB-1214-11D2-AD14-00A0241857FD}')
	coclass_sources = [
		IApplicationEvents,
	]
	default_source = IApplicationEvents
	coclass_interfaces = [
		IApplication,
	]
	default_interface = IApplication

class AutoIdTable(CoClassBaseClass): # A CoClass
	# Manages the AutoId table of the PeriodicTable
	CLSID = IID('{A1E56058-1B75-49A2-8C41-27027A934EEE}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IAutoIdTable,
	]
	default_interface = IAutoIdTable

class BeamControl(CoClassBaseClass): # A CoClass
	# Used to control the scanning output without doinf acquisition
	CLSID = IID('{950FC141-DC44-11D1-8884-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IBeamControl,
	]
	default_interface = IBeamControl

class BeamPositionMarker(CoClassBaseClass): # A CoClass
	# Manages beam position markers
	CLSID = IID('{57EE3A55-83EF-11D2-AD6F-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IBeamPositionMarker,
	]
	default_interface = IBeamPositionMarker

class Calibration1D(CoClassBaseClass): # A CoClass
	# One-dimensional calibration
	CLSID = IID('{E1B6CE12-0BE5-11D2-AD13-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		ICalibration1D,
	]
	default_interface = ICalibration1D

class Calibration2D(CoClassBaseClass): # A CoClass
	# Two-dimensional calibration
	CLSID = IID('{14180826-DCFE-11D1-8884-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		ICalibration2D,
	]
	default_interface = ICalibration2D

class CcdCameraServer(CoClassBaseClass): # A CoClass
	CLSID = IID('{BB61130C-F540-4A0A-92DA-E6AD2D4F027A}')
	coclass_sources = [
	]
	coclass_interfaces = [
		ICcdCameraServer,
	]
	default_interface = ICcdCameraServer

class CcdServer(CoClassBaseClass): # A CoClass
	# Controls all aspects of CCD acquisition
	CLSID = IID('{65B16A75-E63E-11D2-AD9E-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		ICcdServer,
	]
	default_interface = ICcdServer

class Color(CoClassBaseClass): # A CoClass
	# Color object
	CLSID = IID('{9324C861-D521-4FB8-B592-950C55615970}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IColor,
	]
	default_interface = IColor

class ComplexNumber(CoClassBaseClass): # A CoClass
	# Complex number
	CLSID = IID('{DB3B5181-0BC2-11D2-AD13-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IComplexNumber,
	]
	default_interface = IComplexNumber

class ControlBar(CoClassBaseClass): # A CoClass
	# Manages the Control Bar in the application user-interface
	CLSID = IID('{88ABD294-DAAE-11D1-8884-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IControlBar,
	]
	default_interface = IControlBar

class CountDialog(CoClassBaseClass): # A CoClass
	# A dialog for entering integers
	CLSID = IID('{285304C9-63C4-11D2-AD39-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		ICountDialog,
	]
	default_interface = ICountDialog

class Data1D(CoClassBaseClass): # A CoClass
	# One-dimensional data of any data type
	CLSID = IID('{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IData1D,
	]
	default_interface = IData1D

class Data2D(CoClassBaseClass): # A CoClass
	# Two-dimensional data of any data type
	CLSID = IID('{1418082A-DCFE-11D1-8884-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IData2D,
	]
	default_interface = IData2D

class DigitalIoServer(CoClassBaseClass): # A CoClass
	# Controls Digital I/O
	CLSID = IID('{79DE1525-0A05-4093-ABFA-6E282EF6910F}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IDigitalIoServer,
	]
	default_interface = IDigitalIoServer

class DisplayWindow(CoClassBaseClass): # A CoClass
	# Manages display windows
	CLSID = IID('{A95A2BC3-B871-11D1-887C-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IDisplayWindow,
	]
	default_interface = IDisplayWindow

class Dxp(CoClassBaseClass): # A CoClass
	# Controls all DXP parameters
	CLSID = IID('{111763C1-67CF-11D3-B149-00A0C9E5C10B}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IDxp,
	]
	default_interface = IDxp

class EelsQuantTable(CoClassBaseClass): # A CoClass
	# Manages the EELS Quant table of the PeriodicTable
	CLSID = IID('{31091EDA-1A38-484F-97BE-14E4489F1E42}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IEelsQuantTable,
	]
	default_interface = IEelsQuantTable

class EelsStandardsTable(CoClassBaseClass): # A CoClass
	# Manages the EelsStandards table of the PeriodicTable
	CLSID = IID('{21E3AC78-349D-497C-AED4-B7177A84B675}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IEelsStandardsTable,
	]
	default_interface = IEelsStandardsTable

class EnergyMarker(CoClassBaseClass): # A CoClass
	# Manages energy markers
	CLSID = IID('{57EE3A65-83EF-11D2-AD6F-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IEnergyMarker,
	]
	default_interface = IEnergyMarker

class EnergyWindow(CoClassBaseClass): # A CoClass
	# Manages energy windows
	CLSID = IID('{57EE3A67-83EF-11D2-AD6F-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IEnergyWindow,
	]
	default_interface = IEnergyWindow

class GridDialog(CoClassBaseClass): # A CoClass
	# A dialog with a grid for entering data
	CLSID = IID('{5DEC2CE3-628D-11D2-AD39-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IGridDialog,
	]
	default_interface = IGridDialog

class Image(CoClassBaseClass): # A CoClass
	# Manages images
	CLSID = IID('{57EE3A51-83EF-11D2-AD6F-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IImage,
	]
	default_interface = IImage

class ImageDisplay(CoClassBaseClass): # A CoClass
	# Manages image displays
	CLSID = IID('{01D66568-80D1-11D2-AD6D-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IImageDisplay,
	]
	default_interface = IImageDisplay

class ImagePositionMarker(CoClassBaseClass): # A CoClass
	# Manages image position markers
	CLSID = IID('{57EE3A53-83EF-11D2-AD6F-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IImagePositionMarker,
	]
	default_interface = IImagePositionMarker

class ImageSelectionMarker(CoClassBaseClass): # A CoClass
	# Manages image selection markers
	CLSID = IID('{57EE3A57-83EF-11D2-AD6F-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IImageSelectionMarker,
	]
	default_interface = IImageSelectionMarker

class ImageSimulator(CoClassBaseClass): # A CoClass
	# Controls all aspects of image simulation
	CLSID = IID('{65B16A7B-E63E-11D2-AD9E-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IImageSimulator,
	]
	default_interface = IImageSimulator

class LineMarker(CoClassBaseClass): # A CoClass
	# Manages line markers
	CLSID = IID('{57EE3A5B-83EF-11D2-AD6F-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		ILineMarker,
	]
	default_interface = ILineMarker

class Matrix(CoClassBaseClass): # A CoClass
	# 2x2 matrix
	CLSID = IID('{B396F1A3-6430-11D2-AD39-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IMatrix,
	]
	default_interface = IMatrix

class Menu(CoClassBaseClass): # A CoClass
	# Allows for customization of the Menu in the application user-interface
	CLSID = IID('{C7FB4FF1-13C5-11D2-AD14-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IMenu,
	]
	default_interface = IMenu

class Microscope(CoClassBaseClass): # A CoClass
	# Used to control a microscope
	CLSID = IID('{14180859-DCFE-11D1-8884-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IMicroscope,
	]
	default_interface = IMicroscope

class OutputWindow(CoClassBaseClass): # A CoClass
	# Manages the Output Window in the application user-interface
	CLSID = IID('{A24C2A77-DA76-11D1-8884-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IOutputWindow,
	]
	default_interface = IOutputWindow

class OvalMarker(CoClassBaseClass): # A CoClass
	# Manages oval markers
	CLSID = IID('{57EE3A59-83EF-11D2-AD6F-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IOvalMarker,
	]
	default_interface = IOvalMarker

class PeelsServer(CoClassBaseClass): # A CoClass
	# Controls all aspects of PEELS acquisition
	CLSID = IID('{65B16A73-E63E-11D2-AD9E-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IPeelsServer,
	]
	default_interface = IPeelsServer

class Position2D(CoClassBaseClass): # A CoClass
	# Two-dimensional position
	CLSID = IID('{5E82E162-F3EC-11D1-AD09-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IPosition2D,
	]
	default_interface = IPosition2D

class PositionCollection(CoClassBaseClass): # A CoClass
	# Manages collection of two-dimensional positions
	CLSID = IID('{14180823-DCFE-11D1-8884-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IPositionCollection,
	]
	default_interface = IPositionCollection

class ProcessingSystem(CoClassBaseClass): # A CoClass
	# Controls all aspects of data processing
	CLSID = IID('{88ABD2A8-DAAE-11D1-8884-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IProcessingSystem,
	]
	default_interface = IProcessingSystem

class Profile(CoClassBaseClass): # A CoClass
	# Manages profiles
	CLSID = IID('{57EE3A5D-83EF-11D2-AD6F-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IProfile,
	]
	default_interface = IProfile

class ProfileDisplay(CoClassBaseClass): # A CoClass
	# Manages profile displays
	CLSID = IID('{01D6656A-80D1-11D2-AD6D-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IProfileDisplay,
	]
	default_interface = IProfileDisplay

class ProfileMarker(CoClassBaseClass): # A CoClass
	# Manages profile markers
	CLSID = IID('{57EE3A5F-83EF-11D2-AD6F-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IProfileMarker,
	]
	default_interface = IProfileMarker

class ProfileSelectionMarker(CoClassBaseClass): # A CoClass
	# Manages profile selection markers
	CLSID = IID('{57EE3A61-83EF-11D2-AD6F-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IProfileSelectionMarker,
	]
	default_interface = IProfileSelectionMarker

class PropertiesWindow(CoClassBaseClass): # A CoClass
	# Manages the Properties Window in the application user-interface
	CLSID = IID('{5576BC1A-5372-11D2-AD27-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IPropertiesWindow,
	]
	default_interface = IPropertiesWindow

class Range1D(CoClassBaseClass): # A CoClass
	# One-dimensional range
	CLSID = IID('{D5837263-03D9-11D2-AD12-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IRange1D,
	]
	default_interface = IRange1D

class Range2D(CoClassBaseClass): # A CoClass
	# Two-dimensional range
	CLSID = IID('{78D416E3-00BF-11D2-AD12-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IRange2D,
	]
	default_interface = IRange2D

class RoiTable(CoClassBaseClass): # A CoClass
	# Manages the Roi table of the PeriodicTable
	CLSID = IID('{5B08C067-8012-40C3-833E-2363F506BC10}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IRoiTable,
	]
	default_interface = IRoiTable

class ScanningServer(CoClassBaseClass): # A CoClass
	# Controls all aspects of Scanning acquisition
	CLSID = IID('{65B16A79-E63E-11D2-AD9E-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IScanningServer,
	]
	default_interface = IScanningServer

class SetupListDialog(CoClassBaseClass): # A CoClass
	# A dialog for entering float values
	CLSID = IID('{206A7F2B-0416-4BF3-8189-95E4D1150667}')
	coclass_sources = [
	]
	coclass_interfaces = [
		ISetupListDialog,
	]
	default_interface = ISetupListDialog

class ShortcutBar(CoClassBaseClass): # A CoClass
	# Manages the Shortcut Bar in the application user-interface
	CLSID = IID('{80B79741-15DE-11D2-AD14-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IShortcutBar,
	]
	default_interface = IShortcutBar

class SpatialUnit(CoClassBaseClass): # A CoClass
	# Spatial unit
	CLSID = IID('{97033EE5-566E-11D2-AD28-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		ISpatialUnit,
	]
	default_interface = ISpatialUnit

class Spectrum(CoClassBaseClass): # A CoClass
	# Manages spectra
	CLSID = IID('{57EE3A63-83EF-11D2-AD6F-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		ISpectrum,
	]
	default_interface = ISpectrum

class SpectrumDisplay(CoClassBaseClass): # A CoClass
	# Manages spectrum displays
	CLSID = IID('{01D6656C-80D1-11D2-AD6D-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		ISpectrumDisplay,
	]
	default_interface = ISpectrumDisplay

class StandardsTable(CoClassBaseClass): # A CoClass
	# Manages the Standards table of the PeriodicTable
	CLSID = IID('{C0075CCE-F9EA-44F2-9DBD-B90CC8E1395B}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IStandardsTable,
	]
	default_interface = IStandardsTable

class StatusDialog(CoClassBaseClass): # A CoClass
	# A dialog for displaying a status message
	CLSID = IID('{6C7035D8-2583-4C77-A8DC-495F56C3032A}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IStatusDialog,
	]
	default_interface = IStatusDialog

class StringCollection(CoClassBaseClass): # A CoClass
	# Manages collection of strings
	CLSID = IID('{6642EC81-DB55-11D1-8884-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IStringCollection,
	]
	default_interface = IStringCollection

class StringDialog(CoClassBaseClass): # A CoClass
	# A dialog for entering strings
	CLSID = IID('{285304C3-63C4-11D2-AD39-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IStringDialog,
	]
	default_interface = IStringDialog

class StringListDialog(CoClassBaseClass): # A CoClass
	# A dialog for entering lists of strings
	CLSID = IID('{285304C6-63C4-11D2-AD39-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IStringListDialog,
	]
	default_interface = IStringListDialog

class TextMarker(CoClassBaseClass): # A CoClass
	# Manages image selection markers
	CLSID = IID('{6044AD84-5853-4458-BA2B-FB3C3391C8AD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		ITextMarker,
	]
	default_interface = ITextMarker

class ValueDialog(CoClassBaseClass): # A CoClass
	# A dialog for entering float values
	CLSID = IID('{285304CC-63C4-11D2-AD39-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IValueDialog,
	]
	default_interface = IValueDialog

class Vector(CoClassBaseClass): # A CoClass
	# Two-dimensional vector
	CLSID = IID('{B396F1A1-6430-11D2-AD39-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IVector,
	]
	default_interface = IVector

class VideoServer(CoClassBaseClass): # A CoClass
	# Controls all aspects of Video acquisition
	CLSID = IID('{65B16A77-E63E-11D2-AD9E-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IVideoServer,
	]
	default_interface = IVideoServer

class XrayServer(CoClassBaseClass): # A CoClass
	# Controls all aspects of X-ray acquisition
	CLSID = IID('{65B16A71-E63E-11D2-AD9E-00A0241857FD}')
	coclass_sources = [
	]
	coclass_interfaces = [
		IXrayServer,
	]
	default_interface = IXrayServer

RecordMap = {
}

CLSIDToClassMap = {
	'{88ABD2A7-DAAE-11D1-8884-00A0241857FD}' : IProcessingSystem,
	'{14180858-DCFE-11D1-8884-00A0241857FD}' : IMicroscope,
	'{14180859-DCFE-11D1-8884-00A0241857FD}' : Microscope,
	'{88ABD2AA-DAAE-11D1-8884-00A0241857FD}' : IAcquisitionManager,
	'{88ABD2AC-DAAE-11D1-8884-00A0241857FD}' : AcquisitionManager,
	'{01D66567-80D1-11D2-AD6D-00A0241857FD}' : IImageDisplay,
	'{01D66568-80D1-11D2-AD6D-00A0241857FD}' : ImageDisplay,
	'{01D66569-80D1-11D2-AD6D-00A0241857FD}' : IProfileDisplay,
	'{01D6656A-80D1-11D2-AD6D-00A0241857FD}' : ProfileDisplay,
	'{01D6656B-80D1-11D2-AD6D-00A0241857FD}' : ISpectrumDisplay,
	'{01D6656C-80D1-11D2-AD6D-00A0241857FD}' : SpectrumDisplay,
	'{57EE3A50-83EF-11D2-AD6F-00A0241857FD}' : IImage,
	'{57EE3A51-83EF-11D2-AD6F-00A0241857FD}' : Image,
	'{077318CA-8D59-403F-8161-51CF6EFA7B63}' : IAutoIdTable,
	'{57EE3A53-83EF-11D2-AD6F-00A0241857FD}' : ImagePositionMarker,
	'{57EE3A54-83EF-11D2-AD6F-00A0241857FD}' : IBeamPositionMarker,
	'{57EE3A55-83EF-11D2-AD6F-00A0241857FD}' : BeamPositionMarker,
	'{57EE3A56-83EF-11D2-AD6F-00A0241857FD}' : IImageSelectionMarker,
	'{57EE3A57-83EF-11D2-AD6F-00A0241857FD}' : ImageSelectionMarker,
	'{57EE3A58-83EF-11D2-AD6F-00A0241857FD}' : IOvalMarker,
	'{57EE3A59-83EF-11D2-AD6F-00A0241857FD}' : OvalMarker,
	'{57EE3A5A-83EF-11D2-AD6F-00A0241857FD}' : ILineMarker,
	'{57EE3A5B-83EF-11D2-AD6F-00A0241857FD}' : LineMarker,
	'{57EE3A5C-83EF-11D2-AD6F-00A0241857FD}' : IProfile,
	'{C0075CCE-F9EA-44F2-9DBD-B90CC8E1395B}' : StandardsTable,
	'{6ADA6906-EBF6-4D17-B2E2-6035702087B2}' : IEelsStandardsTable,
	'{57EE3A5F-83EF-11D2-AD6F-00A0241857FD}' : ProfileMarker,
	'{57EE3A60-83EF-11D2-AD6F-00A0241857FD}' : IProfileSelectionMarker,
	'{57EE3A61-83EF-11D2-AD6F-00A0241857FD}' : ProfileSelectionMarker,
	'{97033EE3-566E-11D2-AD28-00A0241857FD}' : ISpatialUnit,
	'{285304C6-63C4-11D2-AD39-00A0241857FD}' : StringListDialog,
	'{97033EE5-566E-11D2-AD28-00A0241857FD}' : SpatialUnit,
	'{57EE3A65-83EF-11D2-AD6F-00A0241857FD}' : EnergyMarker,
	'{57EE3A66-83EF-11D2-AD6F-00A0241857FD}' : IEnergyWindow,
	'{57EE3A67-83EF-11D2-AD6F-00A0241857FD}' : EnergyWindow,
	'{950FC140-DC44-11D1-8884-00A0241857FD}' : IBeamControl,
	'{950FC141-DC44-11D1-8884-00A0241857FD}' : BeamControl,
	'{21E3AC78-349D-497C-AED4-B7177A84B675}' : EelsStandardsTable,
	'{BB61130C-F540-4A0A-92DA-E6AD2D4F027A}' : CcdCameraServer,
	'{57EE3A63-83EF-11D2-AD6F-00A0241857FD}' : Spectrum,
	'{285304C1-63C4-11D2-AD39-00A0241857FD}' : IStringDialog,
	'{285304C3-63C4-11D2-AD39-00A0241857FD}' : StringDialog,
	'{285304C4-63C4-11D2-AD39-00A0241857FD}' : IStringListDialog,
	'{5C31ED14-6DDC-4663-B114-DFD6BA829BC2}' : IColor,
	'{285304C7-63C4-11D2-AD39-00A0241857FD}' : ICountDialog,
	'{285304C9-63C4-11D2-AD39-00A0241857FD}' : CountDialog,
	'{285304CA-63C4-11D2-AD39-00A0241857FD}' : IValueDialog,
	'{285304CC-63C4-11D2-AD39-00A0241857FD}' : ValueDialog,
	'{9B473B82-AD8C-48B0-BB45-8DF7A3796343}' : IStandardsTable,
	'{57EE3A52-83EF-11D2-AD6F-00A0241857FD}' : IImagePositionMarker,
	'{78D416E2-00BF-11D2-AD12-00A0241857FD}' : IRange2D,
	'{78D416E3-00BF-11D2-AD12-00A0241857FD}' : Range2D,
	'{6642EC80-DB55-11D1-8884-00A0241857FD}' : IStringCollection,
	'{6642EC81-DB55-11D1-8884-00A0241857FD}' : StringCollection,
	'{C7FB4FF0-13C5-11D2-AD14-00A0241857FD}' : IMenu,
	'{C7FB4FF1-13C5-11D2-AD14-00A0241857FD}' : Menu,
	'{88ABD2A8-DAAE-11D1-8884-00A0241857FD}' : ProcessingSystem,
	'{206A7F2B-0416-4BF3-8189-95E4D1150667}' : SetupListDialog,
	'{90B5AE8A-9BDE-4E0A-BBA3-39C088A2B876}' : IStatusDialog,
	'{57EE3A5D-83EF-11D2-AD6F-00A0241857FD}' : Profile,
	'{57EE3A5E-83EF-11D2-AD6F-00A0241857FD}' : IProfileMarker,
	'{3141781E-9A6D-4974-A0F9-C1D78BFE671B}' : IRoiTable,
	'{7F37A869-7BE5-4153-BC6F-D2BBB8803192}' : IDigitalIoServer,
	'{6044AD84-5853-4458-BA2B-FB3C3391C8AD}' : TextMarker,
	'{57EE3A62-83EF-11D2-AD6F-00A0241857FD}' : ISpectrum,
	'{A1E56058-1B75-49A2-8C41-27027A934EEE}' : AutoIdTable,
	'{57EE3A64-83EF-11D2-AD6F-00A0241857FD}' : IEnergyMarker,
	'{A95A2BC3-B871-11D1-887C-00A0241857FD}' : DisplayWindow,
	'{A95A2BC5-B871-11D1-887C-00A0241857FD}' : IDisplayWindow,
	'{79DE1525-0A05-4093-ABFA-6E282EF6910F}' : DigitalIoServer,
	'{31091EDA-1A38-484F-97BE-14E4489F1E42}' : EelsQuantTable,
	'{A0CF9DF9-2CAC-47CC-B82C-9A69A439DB2A}' : ITextMarker,
	'{111763C0-67CF-11D3-B149-00A0C9E5C10B}' : IDxp,
	'{111763C1-67CF-11D3-B149-00A0C9E5C10B}' : Dxp,
	'{D5837262-03D9-11D2-AD12-00A0241857FD}' : IRange1D,
	'{D5837263-03D9-11D2-AD12-00A0241857FD}' : Range1D,
	'{DB3B5180-0BC2-11D2-AD13-00A0241857FD}' : IComplexNumber,
	'{DB3B5181-0BC2-11D2-AD13-00A0241857FD}' : ComplexNumber,
	'{5E82E161-F3EC-11D1-AD09-00A0241857FD}' : IPosition2D,
	'{5E82E162-F3EC-11D1-AD09-00A0241857FD}' : Position2D,
	'{5DEC2CE1-628D-11D2-AD39-00A0241857FD}' : IGridDialog,
	'{5DEC2CE3-628D-11D2-AD39-00A0241857FD}' : GridDialog,
	'{6C7035D8-2583-4C77-A8DC-495F56C3032A}' : StatusDialog,
	'{5576BC18-5372-11D2-AD27-00A0241857FD}' : IPropertiesWindow,
	'{5576BC1A-5372-11D2-AD27-00A0241857FD}' : PropertiesWindow,
	'{65B16A70-E63E-11D2-AD9E-00A0241857FD}' : IXrayServer,
	'{65B16A71-E63E-11D2-AD9E-00A0241857FD}' : XrayServer,
	'{65B16A72-E63E-11D2-AD9E-00A0241857FD}' : IPeelsServer,
	'{65B16A73-E63E-11D2-AD9E-00A0241857FD}' : PeelsServer,
	'{72362A75-268C-4E7F-9B69-A4C3E71AC9DE}' : ICcdCameraServer,
	'{65B16A75-E63E-11D2-AD9E-00A0241857FD}' : CcdServer,
	'{65B16A76-E63E-11D2-AD9E-00A0241857FD}' : IVideoServer,
	'{65B16A77-E63E-11D2-AD9E-00A0241857FD}' : VideoServer,
	'{65B16A78-E63E-11D2-AD9E-00A0241857FD}' : IScanningServer,
	'{65B16A79-E63E-11D2-AD9E-00A0241857FD}' : ScanningServer,
	'{65B16A7A-E63E-11D2-AD9E-00A0241857FD}' : IImageSimulator,
	'{65B16A7B-E63E-11D2-AD9E-00A0241857FD}' : ImageSimulator,
	'{9324C861-D521-4FB8-B592-950C55615970}' : Color,
	'{A24C2A75-DA76-11D1-8884-00A0241857FD}' : IOutputWindow,
	'{A24C2A77-DA76-11D1-8884-00A0241857FD}' : OutputWindow,
	'{65B16A74-E63E-11D2-AD9E-00A0241857FD}' : ICcdServer,
	'{D20B86B9-1214-11D2-AD14-00A0241857FD}' : IApplication,
	'{D20B86BA-1214-11D2-AD14-00A0241857FD}' : IApplicationEvents,
	'{D20B86BB-1214-11D2-AD14-00A0241857FD}' : Application,
	'{B396F1A0-6430-11D2-AD39-00A0241857FD}' : IVector,
	'{B396F1A1-6430-11D2-AD39-00A0241857FD}' : Vector,
	'{B396F1A2-6430-11D2-AD39-00A0241857FD}' : IMatrix,
	'{B396F1A3-6430-11D2-AD39-00A0241857FD}' : Matrix,
	'{8FB8AAE2-65B1-45B5-94A6-E7D99278F7A1}' : IEelsQuantTable,
	'{E1B6CE11-0BE5-11D2-AD13-00A0241857FD}' : ICalibration1D,
	'{E1B6CE12-0BE5-11D2-AD13-00A0241857FD}' : Calibration1D,
	'{E1B6CE13-0BE5-11D2-AD13-00A0241857FD}' : IData1D,
	'{E1B6CE14-0BE5-11D2-AD13-00A0241857FD}' : Data1D,
	'{14180822-DCFE-11D1-8884-00A0241857FD}' : IPositionCollection,
	'{14180823-DCFE-11D1-8884-00A0241857FD}' : PositionCollection,
	'{14180825-DCFE-11D1-8884-00A0241857FD}' : ICalibration2D,
	'{14180826-DCFE-11D1-8884-00A0241857FD}' : Calibration2D,
	'{14180829-DCFE-11D1-8884-00A0241857FD}' : IData2D,
	'{1418082A-DCFE-11D1-8884-00A0241857FD}' : Data2D,
	'{88ABD292-DAAE-11D1-8884-00A0241857FD}' : IControlBar,
	'{88ABD294-DAAE-11D1-8884-00A0241857FD}' : ControlBar,
	'{80B79740-15DE-11D2-AD14-00A0241857FD}' : IShortcutBar,
	'{80B79741-15DE-11D2-AD14-00A0241857FD}' : ShortcutBar,
	'{5B08C067-8012-40C3-833E-2363F506BC10}' : RoiTable,
	'{071BA1D6-9D12-4896-AAE7-B6946BA3A23B}' : ISetupListDialog,
}
CLSIDToPackageMap = {}
win32com.client.CLSIDToClass.RegisterCLSIDsFromDict( CLSIDToClassMap )
VTablesToPackageMap = {}
VTablesToClassMap = {
}


NamesToIIDMap = {
	'IPosition2D' : '{5E82E161-F3EC-11D1-AD09-00A0241857FD}',
	'IProcessingSystem' : '{88ABD2A7-DAAE-11D1-8884-00A0241857FD}',
	'IOutputWindow' : '{A24C2A75-DA76-11D1-8884-00A0241857FD}',
	'IProfile' : '{57EE3A5C-83EF-11D2-AD6F-00A0241857FD}',
	'IImage' : '{57EE3A50-83EF-11D2-AD6F-00A0241857FD}',
	'IEelsQuantTable' : '{8FB8AAE2-65B1-45B5-94A6-E7D99278F7A1}',
	'ISetupListDialog' : '{071BA1D6-9D12-4896-AAE7-B6946BA3A23B}',
	'IVideoServer' : '{65B16A76-E63E-11D2-AD9E-00A0241857FD}',
	'IImagePositionMarker' : '{57EE3A52-83EF-11D2-AD6F-00A0241857FD}',
	'IOvalMarker' : '{57EE3A58-83EF-11D2-AD6F-00A0241857FD}',
	'IXrayServer' : '{65B16A70-E63E-11D2-AD9E-00A0241857FD}',
	'ICcdServer' : '{65B16A74-E63E-11D2-AD9E-00A0241857FD}',
	'IControlBar' : '{88ABD292-DAAE-11D1-8884-00A0241857FD}',
	'IValueDialog' : '{285304CA-63C4-11D2-AD39-00A0241857FD}',
	'ILineMarker' : '{57EE3A5A-83EF-11D2-AD6F-00A0241857FD}',
	'IPeelsServer' : '{65B16A72-E63E-11D2-AD9E-00A0241857FD}',
	'IEnergyWindow' : '{57EE3A66-83EF-11D2-AD6F-00A0241857FD}',
	'ICountDialog' : '{285304C7-63C4-11D2-AD39-00A0241857FD}',
	'IMicroscope' : '{14180858-DCFE-11D1-8884-00A0241857FD}',
	'IStatusDialog' : '{90B5AE8A-9BDE-4E0A-BBA3-39C088A2B876}',
	'IProfileSelectionMarker' : '{57EE3A60-83EF-11D2-AD6F-00A0241857FD}',
	'ICcdCameraServer' : '{72362A75-268C-4E7F-9B69-A4C3E71AC9DE}',
	'IVector' : '{B396F1A0-6430-11D2-AD39-00A0241857FD}',
	'IDisplayWindow' : '{A95A2BC5-B871-11D1-887C-00A0241857FD}',
	'IData2D' : '{14180829-DCFE-11D1-8884-00A0241857FD}',
	'IAutoIdTable' : '{077318CA-8D59-403F-8161-51CF6EFA7B63}',
	'IRoiTable' : '{3141781E-9A6D-4974-A0F9-C1D78BFE671B}',
	'ISpatialUnit' : '{97033EE3-566E-11D2-AD28-00A0241857FD}',
	'IImageSelectionMarker' : '{57EE3A56-83EF-11D2-AD6F-00A0241857FD}',
	'IPropertiesWindow' : '{5576BC18-5372-11D2-AD27-00A0241857FD}',
	'IScanningServer' : '{65B16A78-E63E-11D2-AD9E-00A0241857FD}',
	'ICalibration1D' : '{E1B6CE11-0BE5-11D2-AD13-00A0241857FD}',
	'IStringListDialog' : '{285304C4-63C4-11D2-AD39-00A0241857FD}',
	'IProfileDisplay' : '{01D66569-80D1-11D2-AD6D-00A0241857FD}',
	'IComplexNumber' : '{DB3B5180-0BC2-11D2-AD13-00A0241857FD}',
	'IPositionCollection' : '{14180822-DCFE-11D1-8884-00A0241857FD}',
	'IMenu' : '{C7FB4FF0-13C5-11D2-AD14-00A0241857FD}',
	'IApplicationEvents' : '{D20B86BA-1214-11D2-AD14-00A0241857FD}',
	'IRange2D' : '{78D416E2-00BF-11D2-AD12-00A0241857FD}',
	'ICalibration2D' : '{14180825-DCFE-11D1-8884-00A0241857FD}',
	'IShortcutBar' : '{80B79740-15DE-11D2-AD14-00A0241857FD}',
	'IBeamControl' : '{950FC140-DC44-11D1-8884-00A0241857FD}',
	'IProfileMarker' : '{57EE3A5E-83EF-11D2-AD6F-00A0241857FD}',
	'IImageDisplay' : '{01D66567-80D1-11D2-AD6D-00A0241857FD}',
	'IColor' : '{5C31ED14-6DDC-4663-B114-DFD6BA829BC2}',
	'IBeamPositionMarker' : '{57EE3A54-83EF-11D2-AD6F-00A0241857FD}',
	'IDxp' : '{111763C0-67CF-11D3-B149-00A0C9E5C10B}',
	'IImageSimulator' : '{65B16A7A-E63E-11D2-AD9E-00A0241857FD}',
	'IEelsStandardsTable' : '{6ADA6906-EBF6-4D17-B2E2-6035702087B2}',
	'IAcquisitionManager' : '{88ABD2AA-DAAE-11D1-8884-00A0241857FD}',
	'ISpectrum' : '{57EE3A62-83EF-11D2-AD6F-00A0241857FD}',
	'ITextMarker' : '{A0CF9DF9-2CAC-47CC-B82C-9A69A439DB2A}',
	'IEnergyMarker' : '{57EE3A64-83EF-11D2-AD6F-00A0241857FD}',
	'IMatrix' : '{B396F1A2-6430-11D2-AD39-00A0241857FD}',
	'IDigitalIoServer' : '{7F37A869-7BE5-4153-BC6F-D2BBB8803192}',
	'IData1D' : '{E1B6CE13-0BE5-11D2-AD13-00A0241857FD}',
	'IGridDialog' : '{5DEC2CE1-628D-11D2-AD39-00A0241857FD}',
	'IStringCollection' : '{6642EC80-DB55-11D1-8884-00A0241857FD}',
	'IApplication' : '{D20B86B9-1214-11D2-AD14-00A0241857FD}',
	'IStringDialog' : '{285304C1-63C4-11D2-AD39-00A0241857FD}',
	'IRange1D' : '{D5837262-03D9-11D2-AD12-00A0241857FD}',
	'ISpectrumDisplay' : '{01D6656B-80D1-11D2-AD6D-00A0241857FD}',
	'IStandardsTable' : '{9B473B82-AD8C-48B0-BB45-8DF7A3796343}',
}

win32com.client.constants.__dicts__.append(constants.__dict__)


<?php

/**
 *	The Leginon software is Copyright 2003
 *	The Scripps Research Institute, La Jolla, CA
 *	For terms of the license agreement
 *	see	http://ami.scripps.edu/software/leginon-license
 */

require_once "config_processing.php";
//require_once "inc/project.inc";
require_once "inc/mysql.inc";

define(PARTICLE_DB_HOST, $PARTICLE_DB_HOST);
define(PARTICLE_DB_USER, $PARTICLE_DB_USER);
define(PARTICLE_DB_PASS, $PARTICLE_DB_PASS);
define(PARTICLE_DB, $PARTICLE_DB);

class particledata {

	var $crlf="\n";
	var $baseurl=PROCESSING_BASE_URL;

	function particledata () {
		$this->mysql = new mysql(
					PARTICLE_DB_HOST,
					PARTICLE_DB_USER,
					PARTICLE_DB_PASS,
					PARTICLE_DB);
	}

	function getSessionData ($sessionId) {
		//$projectId = (int) getProjectFromExpId($expId);
		$q = "SELECT "
		  ."s.* "
		  ."FROM dbemdata.SessionData as s "
		  ."WHERE "
		  ."  s.`DEF_id` = '$sessionId' ";
		//echo $q."<br/>\n";
		$r = $this->mysql->getSQLResult($q);
		//echo print_r($r)."<br/>\n";
		return $r[0];
	}

	//------ General DB summary functions ---------//

	function getTotalAceStats(){
		$q = "SELECT count(DISTINCT `REF|ApAceRunData|acerun`) AS runs, "
		  ."COUNT(DISTINCT `REF|leginondata|AcquisitionImageData|image`) AS img "
		  ."FROM `ApCtfData` ";
		$r = $this->mysql->getSQLResult($q);
		$results = $r[0];
		$q = "SELECT COUNT(DISTINCT `REF|leginondata|AcquisitionImageData|image`) as i "
		  ."FROM `ApCtfData` "
		  ."WHERE (`confidence`>=0.8 OR `confidence_d`>=0.8)";
		$r = $this->mysql->getSQLResult($q);
		$results['conf']=$r[0]['i'];
		$q = "SELECT COUNT(DISTINCT `REF|leginondata|SessionData|session`) as i "
		  ."FROM `ApAceRunData` ";
		$r = $this->mysql->getSQLResult($q);
		$results['sessions']=$r[0]['i'];
		return $results;
	}

	function getTotalParticleStats(){
		$q = "SELECT count(*) AS particles, "
		  ."COUNT(DISTINCT p.`REF|ApSelectionRunData|selectionrun`) AS runs "
		  ."FROM `ApSelectionRunData` AS s "
		  ."LEFT JOIN `ApParticleData` AS p "
		  ."ON s.`DEF_id` = p.`REF|ApSelectionRunData|selectionrun` ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getSloppyTotalParticleStats(){
		$q = "SELECT count(*) AS runs, "
		  ."COUNT(DISTINCT `REF|ApDogParamsData|dogparams`) AS dog, "
		  ."COUNT(DISTINCT `REF|ApManualParamsData|manparams`) AS manual, "
		  ."COUNT(DISTINCT `REF|ApTiltAlignParamsData|tiltparams`) AS tilt, "
		  ."COUNT(DISTINCT `REF|leginondata|SessionData|session`) AS sessions "
		  ."FROM `ApSelectionRunData`";
		$r = $this->mysql->getSQLResult($q);
		$results = $r[0];
		$q = "SELECT count(`DEF_id`) AS p, "
		  ."COUNT(DISTINCT `REF|leginondata|AcquisitionImageData|image`) AS i "
		  ."FROM `ApParticleData`";
		$r = $this->mysql->getSQLResult($q);
		$results['particles']=$r[0]['p'];
		$results['imgs']=$r[0]['i'];
		return $results;
	}

	function getTotalStackStats(){
		$q = "SELECT count(*) AS particles, "
		  ."COUNT(DISTINCT p.`REF|ApStackData|stack`) AS stacks "
		  ."FROM `ApStackData` AS s "
		  ."LEFT JOIN `ApStackParticlesData` AS p "
		  ."ON s.`DEF_id` = p.`REF|ApStackData|stack` ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getSloppyTotalStackStats(){
		$q = "SELECT count(*) AS s "
		  ."FROM `ApStackData`";
		$r = $this->mysql->getSQLResult($q);
		$results=array();
		$results['stacks']=$r[0]['s'];
		$q = "SELECT count(*) AS p "
		  ."FROM `ApStackParticlesData`";
		$r = $this->mysql->getSQLResult($q);
		$results['particles']=$r[0]['p'];
		return $results;
	}

	function getTotalReconStats(){
		$q = "SELECT count(*) AS particles, "
		  ."COUNT(DISTINCT p.`REF|ApRefinementData|refinement`) AS iter, "
		  ."COUNT(DISTINCT i.`REF|ApRefinementRunData|refinementRun`) AS runs "
		  ."FROM `ApRefinementData` AS i "
		  ."LEFT JOIN `ApParticleClassificationData` AS p "
		  ."ON i.`DEF_id` = p.`REF|ApRefinementData|refinement` ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getSloppyTotalReconStats(){
		$q = "SELECT count(*) AS i "
		  ."FROM `ApRefinementData`";
		$r = $this->mysql->getSQLResult($q);
		$results=array();
		$results['iter']=$r[0]['i'];
		$q = "SELECT count(*) AS p "
		  ."FROM `ApParticleClassificationData`";
		$r = $this->mysql->getSQLResult($q);
		$results['particles']=$r[0]['p'];
		$q = "SELECT count(*) AS r "
		  ."FROM `ApRefinementRunData`";
		$r = $this->mysql->getSQLResult($q);
		$results['runs']=$r[0]['r'];
		return $results;
	}

	function getTotalTemplates(){
		$q = "SELECT count(*) AS templates "
		  ."FROM ApTemplateImageData";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getTotalModels(){
		$q = "SELECT count(*) AS models "
		  ."FROM ApInitialModelData";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	//------ Tomo functions ---------//

	function getTomogramInfo($tomogramId){
		$q =  "SELECT t.`DEF_id` as DEF_id, "
			."t.name as name, "
			."t.snapshot as snapshot, "
			."t.description as description, "
			."t.`REF|leginondata|TiltSeriesData|tiltseries` as tiltseries, "
			." p.`path` "
			."FROM `ApTomogramData` t "
			."LEFT JOIN `ApPathData` p ON t.`REF|ApPathData|path` = p.`DEF_id` "
			."WHERE t.`DEF_id` = " .$tomogramId;
		return $this->mysql->getSQLResult($q);
	}

	function getTomogramsFromSession($sessionId){
		$q =  "SELECT t.`DEF_id` as DEF_id, "
			."t.name as name, "
			."t.description as description, "
			."t.`REF|leginondata|TiltSeriesData|tiltseries` as tiltseries, "
			." p.`path` "
			."FROM `ApTomogramData` t "
			."LEFT JOIN `ApPathData` p ON t.`REF|ApPathData|path` = p.`DEF_id` "
			."WHERE t.`REF|leginondata|SessionData|session` = " .$sessionId;
		return $this->mysql->getSQLResult($q);
	}

	function getTiltSeries($sessionId) {
		if($sessionId == NULL)
			return array();
		$query = 'SELECT `DEF_id` as id, '
			.'UNIX_TIMESTAMP(DEF_timestamp) as timestamp, '
			.'`number` '
			.'FROM dbemdata.`TiltSeriesData` '
			."WHERE `REF|SessionData|session`='$sessionId' "
			.'ORDER BY DEF_timestamp;';
		return $this->mysql->getSQLResult($query);
	}

	function getTiltSeriesSelector($tiltSeries, $tiltSeriesId=NULL) {
		$selector = '<select name="tiltseriesId" '
				.'size=5 '
				.'onchange=submit()>';
		$length = strlen(count($tiltSeries));
		for ($i = 0; $i < count($tiltSeries); $i++) {
			$series = $tiltSeries[$i];
			# use real series number if exist
			if (!is_null($series['number'])) {
				$number = $series['number'];
			} else {
				$number = $i + 1;
			}
			$selector .= '<option class="fixed" value='.$series['id'];
			if ($series['id'] == $tiltSeriesId) {
				$selector .= ' selected ';
				$selected_number = $number;
			}
			$shownumber = str_pad($number, $length, ' ', STR_PAD_LEFT).'. ';
			$shownumber = str_replace(" ", "&nbsp;", $shownumber);
			$timestamp = date('m/d/y H:i:s', $series['timestamp']);
			$selector .= '>'.$shownumber.$timestamp.'</option>';
		}
		$selector .= '</select>';
		return array($selector,$selected_number);
	}

	function checkforTomogram($tiltseriesId){
		$q =  "SELECT t.name , p.`path` "
			."FROM `ApTomogramData` t "
			."LEFT JOIN `ApPathData` p ON t.`REF|ApPathData|path` = p.`DEF_id` "
			."WHERE t.`REF|leginondata|TiltSeriesData|tiltseries` = " .$tiltseriesId;
		return $this->mysql->getSQLResult($q);
	}
	function getTiltSeriesInfo($tiltseriesId){
		// get image bin and the most recent pixel calibration
		$q="SELECT pd.`SUBD|binning|x` as imgbin, "
			."pc.`pixelsize` as ccdpixelsize, "
			."a.`REF|SessionData|session` as session, "
			."t.`number` as number "
			."FROM dbemdata.`AcquisitionImageData` a "
			."left join dbemdata.`TiltSeriesData` t "
			."on (a.`REF|TiltSeriesData|tilt series`= t.`DEF_id`) "
			."left join dbemdata.`PresetData` pd "
			."on (a.`REF|PresetData|preset`=pd.`DEF_id`) "
			.", dbemdata.PixelSizeCalibrationData pc "
			."WHERE a.`REF|TiltSeriesData|tilt series`='$tiltseriesId' "
			."AND pc.`REF|InstrumentData|tem`= pd.`REF|InstrumentData|tem` "
			."AND pc.`magnification`= pd.`magnification` "
			."AND "
			."pc.`REF|InstrumentData|ccdcamera`= pd.`REF|InstrumentData|ccdcamera` "
			."AND "
			."pc.`DEF_timestamp`<	a.`DEF_timestamp` "
			."ORDER BY pc.`DEF_timestamp` DESC ";
		return $this->mysql->getSQLResult($q);
	}

	// ------CTF data functions -------//
	function hasCtfData($sessionId) {
		$d = ($this->getLastCtfRun($sessionId)) ? true : false;
		return $d;
	}

	function hasCtfTiltData($sessionId) {
		$d = ($this->getLastCtfTiltRun($sessionId)) ? true : false;
		return $d;
	}

	function getLastCtfRun($sessionId) {
		$q = "select max(DEF_id) as runId "
			."from `ApAceRunData` where `REF|leginondata|SessionData|session`='$sessionId'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r[runId];
	}

	function getLastCtfTiltRun($sessionId) {
		$q = "select max(DEF_id) as runId "
			."from `ApCtfTiltRunData` where `REF|leginondata|SessionData|session`='$sessionId'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r[runId];
	}

	function getCtfRunIds($sessionId) {
		$q = "SELECT * "
			."FROM `ApAceRunData` AS a "
			."WHERE `REF|leginondata|SessionData|session` = '$sessionId' "
			."ORDER BY a.`DEF_id` DESC ";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getAceParams($runId) {
		$q = "select *, r.`DEF_id` as acerun "
			."from ApAceParamsData p "
			."left join ApAceRunData r on (p.`DEF_id` = r.`REF|ApAceParamsData|aceparams`) "
			."where r.`DEF_id` = '$runId'";
		$r = $this->mysql->getSQLResult($q);
		return end($r);
	}

	function getCtfInfoWithNominal($sessionId, $runId=false) {
		$q =	"select "
			."c.`REF|leginondata|AcquisitionImageData|image`, "
			."s.`defocus`, "
			."c.`defocus1`, "
			."c.`defocus2`, "
			."c.`defocusinit`, "
			."c.`amplitude_contrast`, "
			."c.`angle_astigmatism`, "
			."c.`noise1`, "
			."c.`noise2`, "
			."c.`noise3`, "
			."c.`noise4`, "
			."c.`envelope1`, "
			."c.`envelope2`, "
			."c.`envelope3`, "
			."c.`envelope4`, "
			."c.`lowercutoff`, "
			."c.`uppercutoff`, "
			."c.`confidence` , "
			."c.`confidence_d` , "
			."c.`snr` , "
			."c.`graph1` , "
			."c.`graph2` , "
			."(c.`defocus1`+c.`defocus2`)/2+s.`defocus` as difference "
			."from ApCtfData c left join ApAceRunData r on (c.`REF|ApAceRunData|acerun` = r.`DEF_id`) "
			."left join ".DB.".AcquisitionImageData i on (c.`REF|leginondata|AcquisitionImageData|image` = i.`DEF_id`) "
			."left join ".DB.".ScopeEMData s on (i.`REF|ScopeEMData|scope` = s.`DEF_id`) "
			."where i.`REF|SessionData|session`='$sessionId' ";
			if ($runId)
				$q .= "and r.`DEF_id`='$runId' ";
			else
				$q .= "and c.`DEF_id`=(select max(c2.`DEF_id`) from ApCtfData c2 where c2.`REF|leginondata|AcquisitionImageData|image` = c.`REF|leginondata|AcquisitionImageData|image`)";
		return $this->mysql->getSQLResult($q);
	}

	function getCtfInfo($runId) {
		$q =	"select "
			."c.`REF|leginondata|AcquisitionImageData|image`, "
			."c.`defocus1`, "
			."c.`defocus2`, "
			."c.`defocusinit`, "
			."c.`amplitude_contrast`, "
			."c.`angle_astigmatism`, "
			."c.`noise1`, "
			."c.`noise2`, "
			."c.`noise3`, "
			."c.`noise4`, "
			."c.`envelope1`, "
			."c.`envelope2`, "
			."c.`envelope3`, "
			."c.`envelope4`, "
			."c.`lowercutoff`, "
			."c.`uppercutoff`, "
			."c.`confidence` , "
			."c.`confidence_d` , "
			."c.`snr` , "
			."c.`graph1` , "
			."c.`graph2` "
			."from ApCtfData c where c.`REF|ApAceRunData|acerun`='$runId'";
		return $this->mysql->getSQLResult($q);
	}

	function getCtfInfoFromImageId($imageId, $order=false) {
		$q =	"select "
			."c.`DEF_id`, "
			."c.`REF|leginondata|AcquisitionImageData|image`, "
			."s.`defocus`, "
			."c.`defocus1`, "
			."c.`defocus2`, "
			."c.`defocusinit`, "
			."c.`amplitude_contrast`, "
			."c.`angle_astigmatism`, "
			."c.`noise1`, "
			."c.`noise2`, "
			."c.`noise3`, "
			."c.`noise4`, "
			."c.`envelope1`, "
			."c.`envelope2`, "
			."c.`envelope3`, "
			."c.`envelope4`, "
			."c.`lowercutoff`, "
			."c.`uppercutoff`, "
			."c.`confidence` , "
			."c.`confidence_d` , "
			."c.`snr` , "
			."p.`path`, "
			."c.`graph1` , "
			."c.`graph2` , "
			."(c.`defocus1`+c.`defocus2`)/2+s.`defocus` as difference "
			."from ApCtfData c "
			."left join(ApAceRunData r, ApPathData p) "
			."on ( r.DEF_id=c.`REF|ApAceRunData|acerun` and p.DEF_id=r.`REF|ApPathData|path`) "
			."left join ".DB.".AcquisitionImageData i "
			."on (c.`REF|leginondata|AcquisitionImageData|image` = i.`DEF_id`) "
			."left join ".DB.".ScopeEMData s on (i.`REF|ScopeEMData|scope` = s.`DEF_id`) "
			."where c.`REF|leginondata|AcquisitionImageData|image`='$imageId' ";
		$q .= "ORDER BY (c.`confidence`*c.`confidence_d`) DESC";
		if ($order) {
			$fields = $order['fields'];
			$q .= " order by ".join(", ",$fields);
		}
		return $this->mysql->getSQLResult($q);
	}

	function getBestCtfInfoForSessionId($sessionId, $limit=false) {
			$q = "select  ctfdata.* "
			."from "
			."	( "
			."	select  "
			."		i.`filename`, "
			."		c.`REF|leginondata|AcquisitionImageData|image`, "
			."		i.`DEF_id`, "
			."		p.`name`, "
			."		s.`defocus`, "
			."		c.`defocus1`, c.`defocus2`, c.`defocusinit`, c.`angle_astigmatism`, "
			."		c.`noise1`, c.`noise2`, c.`noise3`, c.`noise4`, "
			."		c.`envelope1`, c.`envelope2`, c.`envelope3`, c.`envelope4`, c.`lowercutoff`, c.`uppercutoff`, c.`snr`, "
			."		c.`confidence`,c.`confidence_d` , "
			."		(c.`defocus1`+c.`defocus2`)/2+s.`defocus` as difference "
			."	from `ApCtfData` c "
			."	left join ".DB.".`AcquisitionImageData` i on (i.`DEF_id` = c.`REF|leginondata|AcquisitionImageData|image`) "
			."	left join ".DB.".`PresetData` p on (p.DEF_id = i.`REF|PresetData|preset`) "
			."	left join ".DB.".`ScopeEMData` s on (i.`REF|ScopeEMData|scope` = s.`DEF_id`) "
			."	where "
			."	c.`REF|leginondata|AcquisitionImageData|image` in  "
			."	( "
			."		select a.`DEF_id` from ".DB.".`AcquisitionImageData` a  "
			."		where a.`REF|SessionData|session`='$sessionId'  "
			."		)  "
			."		order by (if(confidence_d>confidence, confidence_d, confidence)) desc  "
			."	) ctfdata ";
			// if $limit is specified, report only values with confidences > $limit
			if ($limit) {
				$q .= " where ctfdata.confidence > $limit || ctfdata.confidence_d > $limit ";
			}
			$q .= " group by ctfdata.DEF_id ";
		return $this->mysql->getSQLResult($q);
	}

	function getCTFStats($fields, $sessionId, $runId=false) {
		if (!is_array($fields))
			return False;
		foreach ($fields as $field) {
			$selects[$field] = "c.`REF|leginondata|AcquisitionImageData|image` as id, s.defocus, "
					. "count(c.DEF_id) as `nb`, "
					. "min(c.`$field`) as `min`, "
					. "max(c.`$field`) as `max`, "
					. "avg(c.`$field`) as `avg`, "
					. "stddev(c.`$field`) as `stddev`";
		}
		if (!is_array($selects))
			return False;
		$stats = array();
		foreach ($selects as $k=>$select) {
			$q =	"select ".$select." "
			."from ApCtfData c left join ".DB.".AcquisitionImageData i "
			."on (c.`REF|leginondata|AcquisitionImageData|image`=i.`DEF_id`) "
			."left join ".DB.".`ScopeEMData` s "
			."on (i.`REF|ScopeEMData|scope` = s.`DEF_id`) "
			."left join ".DB.".`PresetData` p "
			."on (`p`.`DEF_id`=`i`.`REF|PresetData|preset`) "
			."where i.`REF|SessionData|session`='$sessionId' ";
			if ($runId)
				$q .= "and c.`REF|ApAceRunData|acerun`='$runId' ";
			else
				$q .= "and c.`DEF_id`=(select max(c2.`DEF_id`) from ApCtfData c2 where c2.`REF|leginondata|AcquisitionImageData|image` = c.`REF|leginondata|AcquisitionImageData|image`)";
			$q .= "group by p.`name`";
			$r = $this->mysql->getSQLResult($q);
			$stats[$k] = $r;
		}
		return $stats;
	}

	function getAceRunIdFromPath($path){
		$q= "SELECT r.* "
		  . "FROM `ApAceRunData` AS r "
		  . "LEFT JOIN ApPathData AS p "
		  . "ON (r.`REF|ApPathData|path` = p.`DEF_id`) "
		  . "WHERE p.`path` LIKE '$path%'";
		$r = $this->mysql->getSQLResult($q);
		return $r;
  	}

	function getBestStats($fields, $sessionId, $limit=false) {
		if (!is_array($fields))
			return False;
		foreach ($fields as $field) {
			$selects[$field] =  " ctfdata.name , "
					. "count(ctfdata.`$field`) as `nb`, "
					. "min(ctfdata.`$field`) as `min`, "
					. "max(ctfdata.`$field`) as `max`, "
					. "avg(ctfdata.`$field`) as `avg`, "
					. "stddev(ctfdata.`$field`) as `stddev` ";
		}

		if (!is_array($selects))
			return False;
		$stats = array();
		foreach ($selects as $k=>$select) {
				$q = "select  $select "
				."from "
				."	( "
				."	select allctfdata.* "
				."	from "
				."		( "
				."		select  "
				."			c.`REF|leginondata|AcquisitionImageData|image`, "
				."			c.`DEF_id`, "
				."			p.`name`, "
				."			s.`defocus`, "
				."			c.`defocus1`, c.`defocus2`, c.`defocusinit`, c.`angle_astigmatism`, "
				."			c.`noise1`, c.`noise2`, c.`noise3`, c.`noise4`, "
				."			c.`envelope1`, c.`envelope2`, c.`envelope3`, c.`envelope4`, c.`lowercutoff`, c.`uppercutoff`, c.`snr`, "
				."			c.`confidence`,c.`confidence_d` , "
				."(c.`defocus1`+c.`defocus2`)/2+s.`defocus` as difference "
				."		from `ApCtfData` c "
				."		left join ".DB.".`AcquisitionImageData` i on (i.DEF_id=c.`REF|leginondata|AcquisitionImageData|image`) "
				."		left join ".DB.".`PresetData` p on (p.DEF_id=i.`REF|PresetData|preset`) "
				."		left join ".DB.".ScopeEMData s on (i.`REF|ScopeEMData|scope` = s.`DEF_id`) "
				."		where "
				."		c.`REF|leginondata|AcquisitionImageData|image` in  "
				."		( "
				."			select a.`DEF_id` from ".DB.".`AcquisitionImageData` a  "
				."			where a.`REF|SessionData|session`='$sessionId'  "
				."			)  "
				."			order by (if(confidence_d>confidence, confidence_d, confidence)) desc  "
				."		) allctfdata "
				."	group by allctfdata.`REF|leginondata|AcquisitionImageData|image` "
				."	) ctfdata ";
				// if $limit is specified, report only values with confidences > $limit
				if ($limit){
					$q .= " where sqrt(ctfdata.confidence * ctfdata.confidence_d) > $limit ";
				}
				$q .= " group by ctfdata.name ";
			$r = $this->mysql->getSQLResult($q);
			$stats[$k] = $r;
		}
		return $stats;
	}

	function getData($fields, $sessionId, $runId=false) {
		if (!is_array($fields))
			return False;
		foreach ($fields as $field) {
			$selects[$field] = "c.`REF|leginondata|AcquisitionImageData|image` as id, s.`defocus`, "
					. "`$field`";
		}
		if (!is_array($selects))
			return False;
		$stats = array();
		foreach ($selects as $k=>$select) {
			$q =	"select ".$select." "
			."from ctf c left join ".DB.".AcquisitionImageData i"
			."on (c.`REF|leginondata|AcquisitionImageData|image`=i.`DEF_id`) "
			."left join ".DB.".ScopeEMData s on (s.`DEF_id` = i.`REF|ScopeEMData|scope`) "
			."where i.`REF|SessionData|session`='$sessionId' ";
			if ($runId)
				$q .= "and c.`REF|ApAceRunData|acerun`='$runId' ";
			else
				$q .= "and c.`DEF_id`=(select max(c2.`DEF_id`) from ApCtfData c2 where c2.`REF|leginondata|AcquisitionImageData|image` = c.`REF|leginondata|AcquisitionImageData|image`)";
			$r = $this->mysql->getSQLResult($q);
			$stats[$k] = $r;
		}
		return $stats;
	}

	//-------particle functions --------//
	function displayParameters ($title,$params,$exclude_fields,$expId) {
		//standard parameter table display

		//Array of $params keys that are shown as a link to another report
		$links=array(
			'stackId'=>"stackreport.php?expId=$expId&sId="
			,'particleSelection'=>"particlerunreport.php?expId=$expId&rId="
		);

		echo "<h4>".$title."</h4>";
		echo "<table class='tableborder' border='1' cellspacing='1' cellpadding='2'>\n";
		$selection_fields = array_keys($params);
		foreach($selection_fields as $key) {
			$exclude = false;
			foreach($exclude_fields as $bad) {
				if ($key == $bad) {
					$exclude = true;
					break;
				}
			}
			//Display only non-excluded fields
			if (!$exclude) {
				// Clean up referenced key for display
				$displaykeyarray = explode('Data|',$key);
				if (count($displaykeyarray)>1) {
					$displaykey = array_pop($displaykeyarray);
					$refkey = array_pop($displaykeyarray);
				} else {
					$displaykeyarray = explode('DEF_',$key);
					$displaykey = array_pop($displaykeyarray);
					$refkey = $displaykey;
				}
				// Display only non-null params
				if (gettype($params[$key])!='NULL') {
					echo "<tr>\n";
					echo "</td>";
					echo "<td><span class='datafield0'>$displaykey</span></td>";
					echo "<td>";
					$type='text';
					foreach(array_keys($links) as $linkkey) {
						if ($linkkey ==$refkey) {
							$type='link';
							$link = $links[$linkkey];
						}
					}
					if ($type!='link') {
						//plain display
						echo $params[$key];
					} else {
						//Specify different values for the displayed data and link if available
						if (!is_array($params[$key])) {
							$datadisplay = $params[$key];
							$datalink = $datadisplay;
						} else {
							$datadisplay = $params[$key]['display'];
							$datalink = $params[$key]['link'];
						}
						$link = $link.$datalink;
						echo "<a href='".$link."'>".$datadisplay."</a>";
					}
					echo "</td></tr>\n";
				}
			}

		}
		echo "</table>\n";
	}

	function getTemplatesFromProject ($projectId, $getHidden=False) {
		$q="SELECT temp.*, path.path "
			."FROM `ApTemplateImageData` AS temp "
			."LEFT JOIN ApPathData AS path ON "
			."(temp.`REF|ApPathData|path`=path.`DEF_id`) "
		        ."WHERE `project|projects|project`='$projectId' ";
		if (!$getHidden) $q.= "AND (temp.`hidden` IS NULL OR temp.`hidden` = 0) ";
		$q.= "ORDER BY temp.`DEF_id` DESC";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getTemplatesFromId ($templateId) {
		$q = "SELECT t.*, p.path "
				."FROM `ApTemplateImageData` AS t "
				."LEFT JOIN ApPathData AS p ON "
				."(t.`REF|ApPathData|path`=p.`DEF_id`) "
				."WHERE t.`DEF_id` = '$templateId' ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getRecentTemplateRunFromId ($templateId) {
		$q = "SELECT trun.* "
				."FROM `ApTemplateRunData` AS trun "
				."LEFT JOIN ApTemplateImageData AS timg ON "
				."(trun.`REF|ApTemplateImageData|template` = timg.`DEF_id`) "
				."WHERE timg.`DEF_id` = '$templateId' "
				."ORDER BY trun.`DEF_id` DESC "
				."LIMIT 1 ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getParticlesFromImageId ($runId, $imageId){
		$q = "select p.DEF_id as id, "
			."p.xcoord, p.ycoord, p.correlation "
			."from ApParticleData p "
			."where p.`REF|ApSelectionRunData|selectionrun` = '$runId' "
			."and p.`REF|leginondata|AcquisitionImageData|image` = '$imageId' ";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getLastAssessmentRun ($sessionId){
		$q = "select max(DEF_id) as runId "
			." from ApAssessmentRunData where `REF|leginondata|SessionData|session` = '$sessionId'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r[runId];
	}

	function getAssessmentRunIds ($sessionId) {
		$q = "select * "
			."from ApAssessmentRun where `REF|leginondata|SessionData|session` = '$sessionId'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getKeepStatus ($imageId,$runId){
		// returns a boolean value, 0 if rejected, 1 if keeping,
		// null if no status in database
		$q = "select * "
			."from ApAssessmentData "
			."where `REF|leginondata|AcquisitionImageData|image` = '$imageId' "
			."and `REF|ApAssessmentRunData|assessmentrun` = '$runId' ";
		list($r)=$this->mysql->getSQLResult($q);
		if ($r) {
			if ($r['selectionkeep']==0) $keep='no';
			elseif ($r['selectionkeep']==1) $keep='yes';
		}
		return $keep;
		//		return $r['selectionkeep'];
	}

	function updateKeepStatus ($imageId,$runId,$value){
		// update image status : 0 if rejected, 1 if keeping,

		$exists=($this->getKeepStatus($imageId,$runId)) ? true : false;
		if ($exists) {
			$data = array('selectionkeep'=>$value);
			$where = array('REF|leginondata|AcquisitionImageData|image'=>$imageId);
			$where['REF|ApAssessmentRunData|assessmentrun']=$runId;
			$this->mysql->SQLUpdate('ApAssessmentData',$data,$where);
		}
		else {
			$data['selectionkeep']=$value;
			$data['REF|leginondata|AcquisitionImageData|image']=$imageId;
			$data['REF|ApAssessmentRunData|assessmentrun']=$runId;
			$this->mysql->SQLInsert('ApAssessmentData',$data);
		}
	}

	function getAssessmentDataForRun ($runId){
		$q = "select i.filename, a.selectionkeep as keep "
			."from ApAssessmentData a "
			."left join dbemdata.AcquisitionImageData i "
			."on (a.`REF|leginondata|AcquisitionImageData|image` = i.`DEF_id`) "
			."where a.`REF|ApAssessmentRunData|assessmentrun` = '$runId' ";
		//echo "$q";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getSelectionParams ($runId, $returntype=False) {
		$q = "select * from ApSelectionRunData "
			." where `DEF_id` = '$runId' ";
		list($r)=$this->mysql->getSQLResult($q);

		//print_r ($r);
		//echo $r['REF|ApSelectionParamsData|params'];
		$q = "select s.*, r.name, r.`REF|leginondata|SessionData|session` ";

		if ($r['REF|ApSelectionParamsData|params']) {
			$selectionparamid=$r['REF|ApSelectionParamsData|params'];
			$q .= "from ApSelectionParamsData s "
				 ."left join ApSelectionRunData r on (s.`DEF_id` = r.`REF|ApSelectionParamsData|params`) ";
			$type = "Template Correlator";
		}
		elseif ($r['REF|ApDogParamsData|dogparams']) {
			$dogparamid=$r['REF|ApDogParamsData|dogparams'];
			$q .= "from ApDogParamsData s "
				."left join ApSelectionRunData r on (s.`DEF_id` = r.`REF|ApDogParamsData|dogparams`) ";
			$type = "DOG Picker";
		}
		elseif ($r['REF|ApManualParamsData|manparams']) {
			$manparamid=$r['REF|ApManualParamsData|manparams'];
			$q .= "from ApManualParamsData s "
				."left join ApSelectionRunData r on (s.`DEF_id` = r.`REF|ApManualParamsData|manparams`) ";
			$type = "Manual Picker";
		}
		elseif ($r['REF|ApTiltAlignParamsData|tiltparams']) {
			$manparamid=$r['REF|ApTiltAlignParamsData|tiltparams'];
			$q .= "from ApTiltAlignParamsData s "
				."left join ApSelectionRunData r on (s.`DEF_id` = r.`REF|ApTiltAlignParamsData|tiltparams`) ";
			$type = "Tilt Picker";
		}

		if ($returntype) return $type;

		$q .= "where r.`DEF_id` = '$runId' ";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getMaxTiltAngle ($sessionId) {
		$q = "SELECT MAX(ABS(s.`SUBD|stage position|a`))*180.0/PI() AS angle "
			."FROM dbemdata.`AcquisitionImageData` AS im "
			."LEFT JOIN dbemdata.`ScopeEMData` AS s "
			."ON s.`DEF_id` = im.`REF|ScopeEMData|scope` "
			."WHERE im.`REF|SessionData|session` = '$sessionId' ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0]['angle'];
	}

	function getTemplateRunParams ($runId) {
		$q="SELECT i.DEF_id as id, p.path, i.templatename as tname, i.apix, i.description, "
			."t.range_start, t.range_end, t.range_incr, "
			."r.name "
			."from ApTemplateRunData AS t "
			."left join ApTemplateImageData i on (t.`REF|ApTemplateImageData|template`=i.`DEF_id`) "
			."LEFT JOIN ApPathData AS p ON (i.`REF|ApPathData|path`=p.`DEF_id`) "
			."left join ApSelectionRunData r on (t.`REF|ApSelectionRunData|selectionrun` = r.`DEF_id`) "
			."where t.`REF|ApSelectionRunData|selectionrun` = '$runId' ";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getParticles ($runId) {
		$q="select p.DEF_id, p.xcoord, p.ycoord, p.correlation "
			."from ApParticleData p "
			."where p.`REF|ApSelectionRunData|selectionrun` = '$runId' ";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getParticleCorrelationStats($runId) {
	}

	function hasParticleData ($sessionId) {
		$r= ($this->getLastParticleRun($sessionId)) ? true : false;
		return $r;
	}

	function getStats ($runId, $inspect=false, $selexval=false) {
		$q="select count(p.`DEF_id`) as `totparticles`, "
			."count(distinct p.`REF|leginondata|AcquisitionImageData|image`) as num, "
			."min(p.correlation) as `min`, "
			."max(p.correlation) as `max`, "
			."avg(p.correlation) as `avg`, "
			."stddev(p.correlation) as `stddev` "
			."from ApParticleData p ";
		// use the latest inspection value. This should be changed later
		if ($inspect) {
				$q.= "left join ApAssessmentData ad "
				."on (ad.`REF|leginondata|AcquisitionImageData|image` = p.`REF|leginondata|AcquisitionImageData|image`) ";
		}
		$q.="WHERE ";
		if ($inspect) {
			$q.= "ad.`DEF_id`=(select max(ad2.`DEF_id`) from ApAssessmentData ad2 where ad2.`REF|leginondata|AcquisitionImageData|image` = ad.`REF|leginondata|AcquisitionImageData|image`) "
				."and ad.selectionkeep=1 AND ";
		}
		if ($selexval) $q.="p.`correlation`>='$selexval' AND ";
		$q.="p.`REF|ApSelectionRunData|selectionrun` = '$runId' ";
		list($r) = $this->mysql->getSQLResult($q);
		return $r;

	}

	function getNumImgs ($runId){
		$q="SELECT count(distinct `REF|leginondata|AcquisitionImageData|image`) as num "
			. "FROM `ApParticleData` "
			. "WHERE `REF|ApSelectionRunData|selectionrun`='$runId' ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0]['num'];
	}

	function getNumImgsFromSessionId ($sessionId){
		$q= "SELECT "
			. "  COUNT(DISTINCT p.`REF|leginondata|AcquisitionImageData|image`) AS num  "
			. "FROM `ApParticleData` AS p "
			. "LEFT JOIN `ApSelectionRunData` AS r "
			. "  ON (p.`REF|ApSelectionRunData|selectionrun` = r.`DEF_id`) "
			. "WHERE r.`REF|leginondata|SessionData|session`='$sessionId' ";
			#. "  ORDER BY num LIMIT 10";
		#echo $q;
		$r = $this->mysql->getSQLResult($q);
		return $r[0]['num'];
	}

	function getSelectionRunIdFromPath($path){
		$q= "SELECT r.* "
		  . "FROM `ApSelectionRunData` AS r "
		  . "LEFT JOIN ApPathData AS p "
		  . "ON (r.`REF|ApPathData|path` = p.`DEF_id`) "
		  . "WHERE p.`path` LIKE '$path%'";
		$r = $this->mysql->getSQLResult($q);
		return $r;
  	}
	#--------- IMAGE ASSESSMENT FUNCTIONS ---------------#

	function getNumAssessedImages ($sessionId) {
		$rid = $this->getLastAssessmentRun($sessionId);
		$q = "SELECT COUNT(assess.`DEF_id`) as num "
			."FROM `ApAssessmentData` AS assess "
			."LEFT JOIN dbemdata.`viewer_pref_image` AS viewer"
			."  ON viewer.`imageId` = assess.`REF|leginondata|AcquisitionImageData|image` "
			."WHERE "
			." ( assess.`selectionkeep` IS NOT NULL "
			."OR "
			."  viewer.`status` IS NOT NULL ) "
			."AND `REF|ApAssessmentRunData|assessmentrun` = '$rid'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['num'];
	}

	function getNumViewerPrefImages ($sessionId) {
		$q = "SELECT "
			. "  COUNT(DISTINCT p.`REF|leginondata|AcquisitionImageData|image`) as num "
			. "FROM `ApParticleData` AS p "
			. "LEFT JOIN `ApSelectionRunData` AS r "
			. "  ON (p.`REF|ApSelectionRunData|selectionrun` = r.`DEF_id`) "
			. "LEFT JOIN dbemdata.`viewer_pref_image` AS viewer"
			. "  ON viewer.`imageId` = p.`REF|leginondata|AcquisitionImageData|image` "
			. "WHERE "
			. "  viewer.`status` IS NOT NULL "
			. " AND "
			. "  r.`REF|leginondata|SessionData|session`='$sessionId' ";
		#echo $q.";<br/><br/>\n";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['num'];
	}

	function getNumTotalAssessImages ($sessionId) {
		$rid = $this->getLastAssessmentRun($sessionId);
		$q = "SELECT "
			. "  COUNT(DISTINCT part.`REF|leginondata|AcquisitionImageData|image`) as num "
			. "FROM `ApParticleData` AS part "
			. "LEFT JOIN `ApSelectionRunData` AS partrun "
			. "  ON (part.`REF|ApSelectionRunData|selectionrun` = partrun.`DEF_id`) "
			. "LEFT JOIN dbemdata.`viewer_pref_image` AS viewer"
			. "  ON viewer.`imageId` = part.`REF|leginondata|AcquisitionImageData|image` "
			. "LEFT JOIN `ApAssessmentData` AS assess "
			. "  ON assess.`REF|leginondata|AcquisitionImageData|image` = part.`REF|leginondata|AcquisitionImageData|image` "
			. "WHERE ("
			. " ( assess.`selectionkeep` IS NOT NULL AND `REF|ApAssessmentRunData|assessmentrun` = '$rid' )"
			. "OR "
			. "  viewer.`status` IS NOT NULL "
			. ") AND "
			. "  partrun.`REF|leginondata|SessionData|session` = '$sessionId' ";
		#echo $q.";<br/><br/>\n";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['num'];
	}

	function getNumRejectAssessedImages ($sessionId) {
		$rid = $this->getLastAssessmentRun($sessionId);
		$q = "SELECT COUNT(assess.`DEF_id`) as num "
			."FROM `ApAssessmentData` AS assess "
			."WHERE "
			." assess.`selectionkeep` = 0 "
			."AND `REF|ApAssessmentRunData|assessmentrun` = '$rid'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['num'];
	}

	function getNumHiddenImages ($sessionId) {
		$q = "SELECT "
			. "  COUNT(DISTINCT p.`REF|leginondata|AcquisitionImageData|image`) as num "
			. "FROM `ApParticleData` AS p "
			. "LEFT JOIN `ApSelectionRunData` AS r "
			. "  ON (p.`REF|ApSelectionRunData|selectionrun` = r.`DEF_id`) "
			. "LEFT JOIN dbemdata.`viewer_pref_image` AS viewer"
			. "  ON viewer.`imageId` = p.`REF|leginondata|AcquisitionImageData|image` "
			. "WHERE "
			. "  viewer.`status` = 'hidden' "
			. "AND "
			. "  r.`REF|leginondata|SessionData|session`='$sessionId' ";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['num'];
	}

	function getNumTotalRejectImages ($sessionId) {
		$rid = $this->getLastAssessmentRun($sessionId);
		$q = "SELECT "
			. "  COUNT(DISTINCT part.`REF|leginondata|AcquisitionImageData|image`) as num "
			. "FROM `ApParticleData` AS part "
			. "LEFT JOIN `ApSelectionRunData` AS partrun "
			. "  ON (part.`REF|ApSelectionRunData|selectionrun` = partrun.`DEF_id`) "
			. "LEFT JOIN dbemdata.`viewer_pref_image` AS viewer"
			. "  ON viewer.`imageId` = part.`REF|leginondata|AcquisitionImageData|image` "
			. "LEFT JOIN `ApAssessmentData` AS assess "
			. "  ON assess.`REF|leginondata|AcquisitionImageData|image` = part.`REF|leginondata|AcquisitionImageData|image` "
			. "WHERE ("
			. " ( assess.`selectionkeep` = 0 AND `REF|ApAssessmentRunData|assessmentrun` = '$rid' )"
			. "OR "
			. "  viewer.`status` = 'hidden'  "
			. ") AND "
			. "  partrun.`REF|leginondata|SessionData|session` = '$sessionId' ";
		#echo $q.";<br/><br/>\n";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['num'];
	}

	function getNumKeepAssessedImages ($sessionId) {
		$rid = $this->getLastAssessmentRun($sessionId);
		$q = "SELECT COUNT(assess.`DEF_id`) as num "
			."FROM `ApAssessmentData` AS assess "
			."LEFT JOIN dbemdata.`viewer_pref_image` AS viewer"
			."  ON viewer.`imageId` = assess.`REF|leginondata|AcquisitionImageData|image` "
			."WHERE "
			." assess.`selectionkeep` = 1 "
			."AND `REF|ApAssessmentRunData|assessmentrun` = '$rid'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['num'];
	}

	function getNumExemplarImages ($sessionId) {
		$q = "SELECT "
			. "  COUNT(DISTINCT p.`REF|leginondata|AcquisitionImageData|image`) as num "
			. "FROM `ApParticleData` AS p "
			. "LEFT JOIN `ApSelectionRunData` AS r "
			. "  ON (p.`REF|ApSelectionRunData|selectionrun` = r.`DEF_id`) "
			. "LEFT JOIN dbemdata.`viewer_pref_image` AS viewer"
			. "  ON viewer.`imageId` = p.`REF|leginondata|AcquisitionImageData|image` "
			. "WHERE "
			. "  viewer.`status` = 'exemplar' "
			. "AND "
			. "  r.`REF|leginondata|SessionData|session`='$sessionId' ";
		#echo $q.";<br/><br/>\n";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['num'];
	}

	function getNumTotalKeepImages ($sessionId) {
		$rid = $this->getLastAssessmentRun($sessionId);
		$q = "SELECT "
			. "  COUNT(DISTINCT part.`REF|leginondata|AcquisitionImageData|image`) as num "
			. "FROM `ApParticleData` AS part "
			. "LEFT JOIN `ApSelectionRunData` AS partrun "
			. "  ON (part.`REF|ApSelectionRunData|selectionrun` = partrun.`DEF_id`) "
			. "LEFT JOIN dbemdata.`viewer_pref_image` AS viewer"
			. "  ON viewer.`imageId` = part.`REF|leginondata|AcquisitionImageData|image` "
			. "LEFT JOIN `ApAssessmentData` AS assess "
			. "  ON assess.`REF|leginondata|AcquisitionImageData|image` = part.`REF|leginondata|AcquisitionImageData|image` "
			. "WHERE ( "
			. "  ( assess.`selectionkeep` = 1 AND `REF|ApAssessmentRunData|assessmentrun` = '$rid' )"
			. "OR "
			. "  viewer.`status` = 'exemplar' "
			. ") AND "
			. "  partrun.`REF|leginondata|SessionData|session` = '$sessionId' ";
		#echo $q.";<br/><br/>\n";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['num'];
	}

	function getLastParticleRun ($sessionId) {
		$q = "select DEF_id as runId "
			."from `ApSelectionRunData` "
			."where `REF|leginondata|SessionData|session` = '$sessionId' "
			."order by DEF_id desc limit 1";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['runId'];
	}

	function getParticleRunData ($partRunId) {
		$q = "SELECT r.*, p.path "
			."FROM `ApSelectionRunData` AS r "
			."LEFT JOIN ApPathData AS p ON (r.`REF|ApPathData|path` = p.`DEF_id`) "
			."WHERE r.`DEF_id` = '$partRunId'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getParticleRunIds ($sessionId,$showHidden=False) {
		$q = "SELECT r.*, p.path "
		  ."FROM `ApSelectionRunData` AS r "
		  ."LEFT JOIN ApPathData AS p "
		  ."ON (r.`REF|ApPathData|path` = p.`DEF_id`) "
		  ."WHERE r.`REF|leginondata|SessionData|session` = '$sessionId' ";
		if (!$showHidden) $q.= " AND (r.`hidden` IS NULL OR r.`hidden` = 0) ";
		$q.= "ORDER BY r.`DEF_id` DESC ";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	#--------- MAKE STACK FUNCTIONS---------------#

	function getParticleRunsFromStack($stackid) {
		// return all the particle runs contributing to a stack,
		// accounting for multiple runs in 1 stack (combinestack)
		$q = "SELECT `REF|ApStackRunData|stackRun` as stackrun "
		  . "FROM `ApRunsInStackData` as rs "
		  . "WHERE `REF|ApStackData|stack` = $stackid ";
		$r = $this->mysql->getSQLResult($q);
		$pruns = array();
		foreach ($r as $srun) {
			// get particle run from the first stack particle of
		  	// each run
		  	$q = "SELECT `REF|ApSelectionRunData|selectionrun` as DEF_id "
			  . "FROM `ApParticleData` as p "
			  . "LEFT JOIN `ApStackParticlesData` AS sp "
			  . "ON sp.`REF|ApParticleData|particle` = p.`DEF_id` "
			  . "WHERE sp.`REF|ApStackRunData|stackRun`=".$srun['stackrun']." "
			  . "LIMIT 1 ";
			$pruns[] = $this->mysql->getSQLResult($q);
		}
		return $pruns;
	}

	function getStackRunIdFromPath($path){
		$q= "SELECT sd.* "
		  . "FROM `ApStackData` AS sd "
		  . "LEFT JOIN ApPathData AS p "
		  . "ON (sd.`REF|ApPathData|path` = p.`DEF_id`) "
		  . "WHERE p.`path` LIKE '$path%'";
		$r = $this->mysql->getSQLResult($q);
		return $r;
  	}

	function getStackIds ($sessionId, $showHidden=False) {
		// this function is really slow
		$q = "SELECT r.`REF|ApStackData|stack` as stackid , st.* "
		  ."FROM ApRunsInStackData as r "
		  ."LEFT JOIN ApStackRunData as s ON "
		  ."(r.`REF|ApStackRunData|stackRun`=s.`DEF_id`) "
		  ."LEFT JOIN ApStackData as st ON "
		  ."(r.`REF|ApStackData|stack` = st.`DEF_id`) "
		  ."WHERE s.`REF|leginondata|SessionData|session` = '$sessionId' ";
		if (!$showHidden)
			$q.= " AND st.`hidden` != 1 ";
		$q.= "ORDER BY stackid DESC";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getStackIdsWithProjectId ($sessionId, $projectId, $showHidden=False) {
		//$projectId = (int) getProjectFromExpId($expId);
		$q = "SELECT "
		  ."r.`REF|ApStackData|stack` as stackid , "
		  ."st.*, "
		  ."s.`REF|leginondata|SessionData|session` AS sessionid "
		  ."FROM ApRunsInStackData as r "
		  ."LEFT JOIN ApStackRunData as s ON "
		  ."(r.`REF|ApStackRunData|stackRun`=s.`DEF_id`) "
		  ."LEFT JOIN ApStackData as st ON "
		  ."(r.`REF|ApStackData|stack` = st.`DEF_id`) "
		  ."WHERE "
		  ."  s.`REF|leginondata|SessionData|session` = '$sessionId' "
		  ." AND "
		  ."  r.`project|projects|project` = '$projectId' "
		  ." AND "
		  ."  st.`project|projects|project` = '$projectId' ";
		if (!$showHidden)
			$q.= " AND st.`hidden` != 1 ";
		$q.= "ORDER BY stackid DESC";
		//echo $q."<br/><br/>\n";
		$r = $this->mysql->getSQLResult($q);
		//echo print_r($r)."<br/><br/>\n";
		return $r;
	}

	function getStackIdsForProject ($projectId, $showHidden=False) {
		//$projectId = (int) getProjectFromExpId($expId);
		$q = "SELECT "
		  ."  st.`DEF_id` as stackid "
		  ."FROM ApStackData as st "
		  ."WHERE "
		  ."  st.`project|projects|project` = '$projectId' ";
		if (!$showHidden)
			$q.= " AND st.`hidden` != 1 ";
		$q.= "ORDER BY stackid DESC";
		//echo $q."<br/>\n";
		$r = $this->mysql->getSQLResult($q);
		//echo print_r($r)."<br/>\n";
		return $r;
	}

	function getStackIdsOld ($sessionId) {
		$q = "select spar.stackid "
		."from ("
		."select `REF|ApParticleData|particle` as pid, `REF|ApStackRunData|stackRun` as stackid "
		."from ApStackParticlesData group by `REF|ApStackRunData|stackRun`) spar "
		."left join ApParticleData p on (p.`DEF_id` = spar.pid) "
		."left join ApSelectionRunData r on	(p.`REF|ApSelectionRunData|selectionrun` = r.`DEF_id` ) "
		."where r.`REF|leginondata|SessionData|session` = '$sessionId'";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getStackParams ($stackId) {
		$q = "SELECT sd.*, pd.`path` "
			."FROM ApStackData as sd "
			."LEFT JOIN ApPathData AS pd ON "
			."(sd.`REF|ApPathData|path` = pd.`DEF_id`) "
			."WHERE sd.`DEF_id` = '$stackId'";
		list($stack_primary_array) = $this->mysql->getSQLResult($q);
		if (!$stack_primary_array) return;
		// Get runs in stack
		$q = "SELECT r.`REF|ApStackRunData|stackRun` as runid "
			."FROM ApRunsInStackData as r "
			."WHERE r.`REF|ApStackData|stack` = '$stackId'";
		$stackrunIds = $this->mysql->getSQLResult($q);
		// Parameters of original stack of the runs in stack
		foreach ($stackrunIds as $runid) {
			$stackrunId = $runid[runid];
			$rstack = $this->getOriginalStackFromStackRun($stackrunId);
			$childstackId = $rstack['stackId'];
			//Get Parameters
			$q = "SELECT sd.`DEF_id` as stackId, s.`DEF_id` as runid, s.*, p.*,sd.*,"
				."s.`REF|leginondata|SessionData|session` AS sessionid "
				."FROM ApRunsInStackData as r "
				."LEFT JOIN ApStackRunData as s "
				."ON (r.`REF|ApStackRunData|stackRun`=s.`DEF_id`) "
				."LEFT JOIN ApStackData as sd "
				."ON (r.`REF|ApStackData|stack`=sd.`DEF_id`) "
				."LEFT JOIN ApPathData AS pd ON "
				."(sd.`REF|ApPathData|path` = pd.`DEF_id`) "
				."LEFT JOIN `ApStackParamsData` p "
				."ON (p.`DEF_id` = s.`REF|ApStackParamsData|stackParams`) "
				."WHERE r.`REF|ApStackData|stack` = '$childstackId'";
			list($r) = $this->mysql->getSQLResult($q);
			$params[]=$r;
		}
		//handle multiple runs in stack
		if (count($stackrunIds) > 1) {
			$patharray = explode('/',$stack_primary_array[path]);
			$runname = $patharray[count($patharray)-1];
		} else {
			$runname=$params[0]['stackRunName'];
		}

		$runarray = array();
		$runarray['shownstackname'] = $runname;
		$runarray['count'] = count($stackrunIds);
		//use first run parameters for basic stack info
		$runarray['boxSize']=$params[0]['boxSize'];
		$runarray['bin']=$params[0]['bin'];
		$runarray = array_merge($runarray,$stack_primary_array);
		$r = array_merge($params,$runarray);
		return $r;
	}

	function getOriginalStackFromStackRun($stackrunId) {
	//get the original stack when a stackrun is also used in combined stacks
		$q = "SELECT rs.`REF|ApStackData|stack` as stackId from `ApRunsInStackData` rs"
			. " WHERE"
			. " rs.`REF|ApStackRunData|stackRun`=".$stackrunId." "
			. " AND"
			. " rs.`REF|ApStackData|stack` NOT IN"
			. " (SELECT `REF|ApStackData|stack` as stack FROM "
			. " (SELECT count(*) as count ,`REF|ApStackData|stack`"
			. " FROM `ApRunsInStackData`"
			. " WHERE 1"
			. " GROUP BY `REF|ApStackData|stack`) runs"
			. " where runs.`count` > 1)";
		list($rstack) = $this->mysql->getSQLResult($q);
		return $rstack;
	}

	function getStackSelectionRun ($stackId) {
		$q = "SELECT pr . `DEF_id` selectionid , "
		." pr . `name` "
		." FROM ( SELECT * FROM `ApStackParticlesData` "
		." WHERE `REF|ApStackData|stack` = ".$stackId." "
		." group by `REF|ApStackRunData|stackRun` ) sp1 "
		." LEFT JOIN `ApParticleData` p "
		." ON p . `DEF_id` = sp1 . `REF|ApParticleData|particle` "
		." LEFT JOIN `ApSelectionRunData` pr "
		." ON pr . `DEF_id` = p . `REF|ApSelectionRunData|selectionrun` "
		." ";
		list($r) = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getStackParticles ($stackId) {
		$q= "SELECT * "
			."FROM `ApStackParticlesData` "
			."WHERE `REF|ApStackData|stack` = '$stackId'";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getNumStackParticles ($stackId) {
		$q= "SELECT count(DEF_id) as num "
			."FROM `ApStackParticlesData` "
			."WHERE `REF|ApStackData|stack` = '$stackId'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['num'];
	}

	function getNumStackImages ($stackId) {
		$q= "SELECT DISTINCT im.`DEF_id` AS imgid "
			."FROM ApStackParticlesData AS stpart "
			."LEFT JOIN ApParticleData AS part "
			."ON stpart.`REF|ApParticleData|particle` = part.`DEF_id` "
			."LEFT JOIN dbemdata.`AcquisitionImageData` AS im "
			."ON part.`REF|leginondata|AcquisitionImageData|image` = im.`DEF_id` "
			."WHERE `REF|ApStackData|stack` = '$stackId'";
		$r = $this->mysql->getSQLResult($q);
		return count($r);
	}

	//////// fix me ////////
	function getStackIdFromReconId ($reconId) {
		$q= "SELECT * "
			."FROM `ApRefinementRunData` "
			."WHERE `DEF_id` = '$reconId'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['REF|ApStackData|stack'];
	}

	function getStackPixelSizeFromStackId ($stackId) {
		// first see if it's stored in the ApStackData Table (easiest)
		$q="SELECT pixelsize FROM ApStackData WHERE DEF_id=$stackId";
		$r = $this->mysql->getSQLResult($q);
		$apix = $r[0]['pixelsize'];
		if ($apix && $apix != 0) return $apix;
		$preset = $this->getPresetFromStackId($stackId);
		return $preset['stackpixelsize'];
	}

	function getPresetFromStackId ($stackId) {
		//get the first image of the stack assume using defocpair if not specified
		$q="SELECT "
			." IF( ( pimage . `defocpair` IS NULL OR pimage . `defocpair` = 1 ) , "
			." sbimage . image , pimage . image ) as image , "
			." pimage.image as pimage, "
			." pimage.`stackbin` "
			." FROM "
			." ( SELECT "
			." p . `REF|leginondata|AcquisitionImageData|image` as image , pa . `defocpair` ,"
			." pa.`bin` as stackbin "
			." FROM `ApStackParticlesData` sp "
			." LEFT JOIN `ApStackRunData` r ON "
			." ( sp . `REF|ApStackRunData|stackRun` = r . `DEF_id` ) "
			." LEFT JOIN `ApStackParamsData` pa ON "
			." ( pa . `DEF_id` = r . `REF|ApStackParamsData|stackParams` ) "
			." LEFT JOIN `ApParticleData` p ON "
			." sp . `REF|ApParticleData|particle` = p . `DEF_id` "
			." WHERE sp . `REF|ApStackData|stack` = ".$stackId." "
			." limit 1 ) pimage , "
			." ( SELECT "
			." sb . `REF|leginondata|AcquisitionImageData|image2` as image "
			." FROM `ApStackParticlesData` sp "
			." LEFT JOIN `ApStackRunData` r ON "
			." ( sp . `REF|ApStackRunData|stackRun` = r . `DEF_id` ) "
			." LEFT JOIN `ApStackParamsData` pa ON "
			." ( pa . `DEF_id` = r . `REF|ApStackParamsData|stackParams` ) "
			." LEFT JOIN `ApParticleData` p ON "
			." sp . `REF|ApParticleData|particle` = p . `DEF_id` "
			." LEFT JOIN `ApImageTransformationData` sb ON "
			." (sb . `REF|leginondata|AcquisitionImageData|image1` "
			." = p . `REF|leginondata|AcquisitionImageData|image`) "
			." WHERE sp . `REF|ApStackData|stack`= ".$stackId." "
			." limit 1 ) sbimage ";
			list($r1)= $this->mysql->getSQLResult($q);
		//if no sibling image when defocpair param is not specified, use the original image
		$imgId = ($r1['image']) ? $r1['image'] : $r1['pimage'];

		// get image bin and the most recent pixel calibration
		$q="SELECT pd.`SUBD|binning|x` as imgbin, "
		  ."pc.`pixelsize` as ccdpixelsize, pd.*, "
		  ."pscope.`high tension` as hightension "
		  ."FROM dbemdata.`AcquisitionImageData` a "
		  ."left join dbemdata.`PresetData` pd "
		  ."on (a.`REF|PresetData|preset`=pd.`DEF_id`) "
		  ."LEFT JOIN dbemdata.`ScopeEMData` pscope "
		  ."ON (pscope.`DEF_id` = a.`REF|ScopeEMData|scope`) "
			.", dbemdata.PixelSizeCalibrationData pc "
			."WHERE a.`DEF_id`='$imgId' "
			."AND pc.`REF|InstrumentData|tem`= pd.`REF|InstrumentData|tem` "
			."AND pc.`magnification`= pd.`magnification` "
			."AND "
			."pc.`REF|InstrumentData|ccdcamera`= pd.`REF|InstrumentData|ccdcamera` "
			."AND "
			."pc.`DEF_timestamp`<	a.`DEF_timestamp` "
			."ORDER BY pc.`DEF_timestamp` DESC ";
		list($r2)=$this->mysql->getSQLResult($q);
		if (!is_null($r1['stackbin']) ) {
			settype($r1['stackbin'],"integer");
			$stackbin = $r1['stackbin'];
		} else {
			$stackbin = 1;
		}
		$r2['stackpixelsize'] = $r2['ccdpixelsize']*$r2['imgbin']*$stackbin;
		return $r2;
	}

	function displayParticleStats ($particleruns, $display_keys, $inspect=False, $selexval=False, $dispImg=True) {
		$expId=$_GET['expId'];
		if (!is_array($particleruns))
			return ;
		$html = "\n<table class='tableborder' border='1' cellspacing='1' cellpadding='5'>\n";
		$html .= "<tr> <td> </td>";
		foreach($display_keys as $key) {
			$html .= "<td> <span class='datafield0'>".$key."</span> </td> ";
		}
		$html .= "</tr>";
		foreach ($particleruns as $particle) {
			$runId=$particle['DEF_id'];
			if ($particle['hidden']) continue;
			$particlestats = $this->getStats($runId, $inspect, $selexval);
			$html .= "<tr>";
			$numptl=$particlestats['totparticles'];
			$numimg=$particlestats['num'];
			$ppimg = ($numimg > 0) ? (sprintf("%.1f", $numptl/$numimg)) : 0;
			$particlestats['numimgs']=$numimg.'<br />('.$ppimg.' prtl/img)';
			if ($dispImg = True)
				$particlestats['img'] = '<a href="'.$this->baseurl.'particlegraph.php?hg=1&run='.$runId.'">'
				.'<img border="0" '
				.'src="'.$this->baseurl.'particlegraph.php?w=150&hg=1&run='
				.$runId.'"></a>';
			$q = "select name from `ApSelectionRunData` where `DEF_id` = $runId";
			list($r0) = $this->mysql->getSQLResult($q);
			$html .= '<td><a href="'.$this->baseurl.'particlerunreport.php?expId='.$expId.'&rId='.$runId.'">'.$r0['name'].'</a></td>';
			foreach($display_keys as $field) {
							$data=$particlestats[$field];
				if (eregi('^min|^max|^avg|^stddev', $field)) $data=format_sci_number($data,4);
				$html .= "<td> $data </td> \n";
			}
			$html .= "</tr>\n";
		}
		$html .= "</table>\n";
		return $html;
	}

	#--------- ALIGN STACK FUNCTIONS ---------------#

	function getAlignStackIds ($sessionId, $projectId, $showHidden=False) {
		//$projectId = (int) getProjectFromExpId($expId);
		$q = "SELECT ast.`DEF_id` AS alignstackid "
		  ."FROM ApAlignStackData AS ast "
		  ."LEFT JOIN ApStackData AS st ON "
		  ."  (ast.`REF|ApStackData|stack` = st.`DEF_id`) "
		  ."LEFT JOIN ApRunsInStackData as runsin ON "
		  ."  (runsin.`REF|ApStackData|stack` = st.`DEF_id`) "
		  ."LEFT JOIN ApStackRunData as strun ON "
		  ."  (runsin.`REF|ApStackRunData|stackRun`=strun.`DEF_id`) "
		  ."WHERE "
		  ."  strun.`REF|leginondata|SessionData|session` = '$sessionId' "
		  ." AND "
		  ."  runsin.`project|projects|project` = '$projectId' "
		  ." AND "
		  ."  ast.`project|projects|project` = '$projectId' ";
		if (!$showHidden)
			$q.= " AND ast.`hidden` != 1 ";
		$q.= "ORDER BY alignstackid DESC";
		//echo $q."<br/>\n";
		$r = $this->mysql->getSQLResult($q);
		//echo print_r($r)."<br/>\n";
		return $r;
	}

	function getAlignStackIdsWithAnalysis ($sessionId, $projectId) {
		//$projectId = (int) getProjectFromExpId($expId);
		$q = "SELECT DISTINCT ast.`DEF_id` AS alignstackid "
		  ."FROM ApAlignStackData AS ast "
		  ."LEFT JOIN ApAlignAnalysisRunData AS analysis ON "
		  ."  (analysis.`REF|ApAlignStackData|alignstack` = ast.`DEF_id`) "
		  ."LEFT JOIN ApStackData AS st ON "
		  ."  (ast.`REF|ApStackData|stack` = st.`DEF_id`) "
		  ."LEFT JOIN ApRunsInStackData as runsin ON "
		  ."  (runsin.`REF|ApStackData|stack` = st.`DEF_id`) "
		  ."LEFT JOIN ApStackRunData as strun ON "
		  ."  (runsin.`REF|ApStackRunData|stackRun`=strun.`DEF_id`) "
		  ."WHERE "
		  ."  strun.`REF|leginondata|SessionData|session` = '$sessionId' "
		  ."AND "
		  ."  runsin.`project|projects|project` = '$projectId' "
		  ."AND "
		  ."  ast.`project|projects|project` = '$projectId' "
		  ."AND "
		  ."  ast.`hidden` != 1 "
		  ."AND "
		  ."  analysis.`DEF_id` IS NOT NULL "
		  ."ORDER BY alignstackid DESC";
		//echo $q."<br/><br/>\n";
		$r = $this->mysql->getSQLResult($q);
		//echo print_r($r)."<br/><br/>\n";
		return $r;
	}

	function getAlignStackParams ($alignstackid) {
		$q = "SELECT ar.*, ast.*, ar.runname AS runname,  pd.`path` AS path "
			."FROM ApAlignStackData as ast "
			."LEFT JOIN ApPathData AS pd ON "
			."(ast.`REF|ApPathData|path` = pd.`DEF_id`) "
			."LEFT JOIN ApAlignRunData AS ar ON "
			."(ast.`REF|ApAlignRunData|alignrun` = ar.`DEF_id`) "
			."WHERE ast.`DEF_id` = '$alignstackid'";
		//echo $q."<br/>\n";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getNumAlignStackParticles ($alignstackid) {
		$q= "SELECT count(DEF_id) as num "
			."FROM `ApAlignParticlesData` "
			."WHERE `REF|ApAlignStackData|alignstack` = '$alignstackid'";
		//echo $q."<br/>\n";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['num'];
	}

	function getAnalysisRuns ($sessionId, $projectId, $showHidden=False) {
		$q = "SELECT analysis.`DEF_id` AS analysisid, coran.*, analysis.* "
			."FROM ApAlignAnalysisRunData AS analysis "
			."LEFT JOIN ApCoranRunData as coran ON "
			." (analysis.`REF|ApCoranRunData|coranrun` = coran.`DEF_id`) "
			."LEFT JOIN ApAlignStackData AS ast ON "
			." (analysis.`REF|ApAlignStackData|alignstack` = ast.`DEF_id`) "
			."LEFT JOIN ApStackData AS st ON "
			." (ast.`REF|ApStackData|stack` = st.`DEF_id`) "
			."LEFT JOIN ApRunsInStackData as runsin ON "
			." (runsin.`REF|ApStackData|stack` = st.`DEF_id`) "
			."LEFT JOIN ApStackRunData as strun ON "
			." (runsin.`REF|ApStackRunData|stackRun`=strun.`DEF_id`) "
			."WHERE "
			." strun.`REF|leginondata|SessionData|session` = '$sessionId' "
			." AND "
			." runsin.`project|projects|project` = '$projectId' "
			." AND "
			." analysis.`project|projects|project` = '$projectId' ";
		if (!$showHidden)
			$q.= " AND analysis.`hidden` != 1 AND ast.`hidden` != 1 ";
		$q .= "ORDER BY analysisid DESC ";
		//echo $q."<br/><br/>\n";
		$r = $this->mysql->getSQLResult($q);
		//echo print_r($r)."<br/><br/>\n";
		return $r;
	} 

	function getAnalysisRunForAlignStack ($alignstackId, $projectId, $showHidden=False) {
		$q = "SELECT analysis.`DEF_id` AS analysisid, coran.*, analysis.* "
			."FROM ApAlignAnalysisRunData AS analysis "
			."LEFT JOIN ApCoranRunData as coran ON "
			." (analysis.`REF|ApCoranRunData|coranrun`=coran.`DEF_id`) "
			."WHERE "
			."  analysis.`REF|ApAlignStackData|alignstack` = $alignstackId ";
		if (!$showHidden)
			$q.= " AND analysis.`hidden` != 1 ";
		$q .= "AND "
			."  analysis.`project|projects|project` = '$projectId' "
			."ORDER BY analysisid DESC ";
		//echo $q."<br/>\n";
		$r = $this->mysql->getSQLResult($q);
		//echo print_r($r)."<br/>\n";
		return $r;
	}

	function getAnalysisParams ($analysisid) {
		$q = "SELECT analysis.`DEF_id` AS analysisid, coran.*, analysis.*, path.path AS path "
			."FROM ApAlignAnalysisRunData AS analysis "
			."LEFT JOIN ApCoranRunData as coran ON "
			." (analysis.`REF|ApCoranRunData|coranrun`=coran.`DEF_id`) "
			."LEFT JOIN ApAlignStackData AS ast ON "
			." (analysis.`REF|ApAlignStackData|alignstack` = ast.`DEF_id`) "
			."LEFT JOIN ApPathData AS path ON "
			." (analysis.`REF|ApPathData|path` = path.`DEF_id`) "
			."WHERE "
			."  analysis.`DEF_id` = $analysisid "
			."LIMIT 1 ";
		//echo $q."<br/>\n";
		$r = $this->mysql->getSQLResult($q);
		//echo print_r($r)."<br/>\n";
		return $r[0];
	}

	function getCoranEigenDataFromAnalysis ($analysisid) {
		$q = "SELECT "
			."ce.factor_num AS num, "
			."ce.image_name AS name, "
			."ce.percent_contrib AS contrib, "
			."p.path AS path "
			."FROM ApCoranEigenImageData AS ce "
			."LEFT JOIN ApPathData AS p "
			."  ON (ce.`REF|ApPathData|path` = p.`DEF_id`) "
			."LEFT JOIN ApCoranRunData AS cr "
			."  ON (ce.`REF|ApCoranRunData|coranRun` = cr.`DEF_id`) "
			."LEFT JOIN ApAlignAnalysisRunData AS a "
			."  ON (a.`REF|ApCoranRunData|coranRun` = cr.`DEF_id`) "
			."WHERE "
			."  a.`DEF_id` = '$analysisid' "
			."ORDER BY ce.`factor_num` ASC";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getMaxLikeRuns ($sessionId, $projectId) {
		$q = "SELECT coran.`DEF_id` AS coranid, coran.* "
			."FROM ApMaxLikeJobData AS maxlike "
			."LEFT JOIN ApAlignRunData AS arun ON "
			." (arun.`REF|ApMaxLikeRunData|maxlikerun` = maxlike.`DEF_id`) "
			."LEFT JOIN ApAlignStackData AS ast ON "
			." (ast.`REF|ApAlignRunData|alignrun` = arun.`DEF_id`) "
			."LEFT JOIN ApStackData AS st ON "
			."  (ast.`REF|ApStackData|stack` = st.`DEF_id`) "
			."LEFT JOIN ApRunsInStackData as runsin ON "
			."  (runsin.`REF|ApStackData|stack` = st.`DEF_id`) "
			."LEFT JOIN ApStackRunData as strun ON "
			."  (runsin.`REF|ApStackRunData|stackRun`=strun.`DEF_id`) "
			."WHERE "
			."  strun.`REF|leginondata|SessionData|session` = '$sessionId' "
			." AND "
			."  runsin.`project|projects|project` = '$projectId' "
			." AND "
			."  arun.`project|projects|project` = '$projectId' "
			." AND "
			."  ast.`project|projects|project` = '$projectId' "
			."ORDER BY alignstackid DESC";
		//echo $q."<br/><br/>\n";
		$r = $this->mysql->getSQLResult($q);
		//echo print_r($r)."<br/><br/>\n";
		return $r;
	}

	function getFinishedMaxLikeJobs ($projectId) {
		$q = "SELECT maxjob.*, path.path "
			."FROM ApMaxLikeJobData AS maxjob "
			."LEFT JOIN ApPathData as path ON "
			."  maxjob.`REF|ApPathData|path` = path.`DEF_id` "
			."LEFT JOIN ApMaxLikeRunData as maxrun ON "
			."  maxrun.`REF|ApMaxLikeJobData|job` = maxjob.`DEF_id` "
			."WHERE "
			."  maxjob.`project|projects|project` = '$projectId' "
			." AND "
			."  maxjob.`finished` = '1' "
			." AND "
			."  maxjob.`hidden` != '1' "
			." AND "
			."  maxrun.`REF|ApMaxLikeJobData|job` IS NULL "
			." ORDER BY maxjob.`DEF_id` DESC ";
		//echo $q."<br/><br/>\n";
		$r = $this->mysql->getSQLResult($q);
		//echo print_r($r)."<br/><br/>\n";
		return $r;
	}

	function getClusteringStacks ($sessionId, $projectId, $showHidden=False) {
		$q = "SELECT cluster.`DEF_id` AS analysisid, coran.*, analysis.* "
			."FROM ApClusteringStackData AS cluster "
			."LEFT JOIN ApClusteringRunData AS clusterrun ON "
			." (cluster.`REF|ApClusteringRunData|clusterrun` = clusterrun.`DEF_id`) "
			."LEFT JOIN ApAlignStackData AS ast ON "
			." (clusterrun.`REF|ApAlignStackData|alignstack` = ast.`DEF_id`) "
			."LEFT JOIN ApStackData AS st ON "
			." (ast.`REF|ApStackData|stack` = st.`DEF_id`) "
			."LEFT JOIN ApRunsInStackData as runsin ON "
			." (runsin.`REF|ApStackData|stack` = st.`DEF_id`) "
			."LEFT JOIN ApStackRunData as strun ON "
			." (runsin.`REF|ApStackRunData|stackRun`=strun.`DEF_id`) "
			."WHERE "
			." strun.`REF|leginondata|SessionData|session` = '$sessionId' "
			." AND "
			." runsin.`project|projects|project` = '$projectId' "
			." AND "
			." cluster.`project|projects|project` = '$projectId' ";
		if (!$showHidden)
			$q.= " AND analysis.`hidden` != 1 AND ast.`hidden` != 1 ";
		//$q .= "ORDER BY analysisid DESC ";
		echo $q."<br/><br/>\n";
		//$r = $this->mysql->getSQLResult($q);
		echo print_r($r)."<br/><br/>\n";
		return $r;
	} 

	function getAlignStackIdsWithCluster ($sessionId, $projectId) {
		//$projectId = (int) getProjectFromExpId($expId);
		$q = "SELECT DISTINCT ast.`DEF_id` AS alignstackid "
		  ."FROM ApAlignStackData AS ast "
		  ."LEFT JOIN ApClusteringRunData AS clusterrun ON "
		  ."  (clusterrun.`REF|ApAlignStackData|alignstack` = ast.`DEF_id`) "
		  ."LEFT JOIN ApStackData AS st ON "
		  ."  (ast.`REF|ApStackData|stack` = st.`DEF_id`) "
		  ."LEFT JOIN ApRunsInStackData as runsin ON "
		  ."  (runsin.`REF|ApStackData|stack` = st.`DEF_id`) "
		  ."LEFT JOIN ApStackRunData as strun ON "
		  ."  (runsin.`REF|ApStackRunData|stackRun`=strun.`DEF_id`) "
		  ."WHERE "
		  ."  strun.`REF|leginondata|SessionData|session` = '$sessionId' "
		  ."AND "
		  ."  runsin.`project|projects|project` = '$projectId' "
		  ."AND "
		  ."  ast.`project|projects|project` = '$projectId' "
		  ."AND "
		  ."  ast.`hidden` != 1 "
		  ."AND "
		  ."  analysis.`DEF_id` IS NOT NULL "
		  ."ORDER BY alignstackid DESC";
		echo $q."<br/><br/>\n";
		$r = $this->mysql->getSQLResult($q);
		echo print_r($r)."<br/><br/>\n";
		return $r;
	}


	#--------- MAKE MASK FUNCTIONS---------------#

	function getMaskMakerRunIds ($sessionId) {
		$q = "select * "
			."from `ApMaskMakerRunData` where `REF|leginondata|SessionData|session` = '$sessionId'";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getMaskAssessRunIds ($sessionId) {
		$q = "select * "
			."from `ApMaskAssessmentRunData` where `REF|leginondata|SessionData|session` = '$sessionId'";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function hasMaskMakerData ($sessionId) {
		$r= ($this->getLastMaskMakerRun($sessionId)) ? true : false;
		return $r;
	}

	function getLastMaskMakerRun ($sessionId) {
		$q = "select max(DEF_id) as runId "
			."from `ApMaskMakerRunData` where `REF|leginondata|SessionData|session` = '$sessionId'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r[runId];
	}

	function getMaskMakerParams ($runId) {
		$q = "select * from ApMaskMakerRunData "
			." where `DEF_id` = '$runId' ";
		list($r)=$this->mysql->getSQLResult($q);

		//print_r ($r);
		//echo $r['REF|ApMaskMakerParamsData|params'];
		$q = "select s.*, r.name, r.`REF|leginondata|SessionData|session` ";

		if ($r['REF|ApMaskMakerParamsData|params']) {
			$maskparamid=$r['REF|ApSelectionParamsData|params'];
			$q .= "from ApMaskMakerParamsData s "
				 ."left join ApMaskMakerRunData r on (s.`DEF_id` = r.`REF|ApMaskMakerParamsData|params`) "
				."LEFT JOIN ApPathData AS p ON "
				."(r.`REF|ApPathData|path`= p.`DEF_id`) ";
		}

		$q .= "where r.`DEF_id` = '$runId' ";
		//echo $q;
		$r=$this->mysql->getSQLResult($q);
		//print_r ($r);
		return $r;
	}

	function getMaskRegions ($runId) {
		$q="select r.DEF_id, r.x, r.y, r.area, r.mean, r.stdev "
			."from ApMaskRegionData r "
			."where r.`REF|ApMaskMakerRunData|maskrun` = ".$runId." ";				 $r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getMaskRegionStats ($runId, $inspect=False){
		$q="select count(r.`DEF_id`) as `totregions`, "
			."count(distinct r.`REF|leginondata|AcquisitionImageData|image`) as num, "
			."avg(r.area) as `areamean`, "
			."avg(r.mean) as `Imean`, "
			."avg(r.stdev) as `Istddev` "
						."from ApMaskRegionData r ";
		// use the latest inspection value. This should be changed later
		if ($inspect) {
						$q.= "left join ApAssessmentData ad "
				."on (ad.`REF|leginondata|AcquisitionImageData|image` = r.`REF|leginondata|AcquisitionImageData|image`) ";
		}
		$q.="WHERE ";
		if ($inspect) {
			$q.= "ad.`DEF_id`=(select max(ad2.`DEF_id`) from ApAssessmentData ad2 where ad2.`REF|leginondata|AcquisitionImageData|image` = ad.`REF|leginondata|AcquisitionImageData|image`) "
				."and ad.selectionkeep=1 AND ";
		}
		$q.="r.`REF|ApMaskMakerRunData|maskrun` = '$runId' ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];

	}

	function displayMaskRegionStats ($expId,$particleruns, $display_keys, $inspect=False, $selexval=False) {
		if (!is_array($particleruns))
			return ;
		$html = "<BR>\n<table class='tableborder' border='1' cellspacing='1' cellpadding='5'>\n";
		$html .= "<tr> <td> </td>";
		foreach($display_keys as $key) {
			$html .= "<td> <span class='datafield0'>".$key."</span> </td> ";
		}
		$html .= "</tr>";

		foreach ($particleruns as $particle) {
			$runId=$particle['DEF_id'];
			$regionstats = $this->getMaskRegionStats($runId, $inspect);
			$html .= "<tr>";
			$numregn=$regionstats['totregions'];
			$numimg=$regionstats['num'];
			$rpimg = ($numimg > 0) ? (sprintf("%.1f", $numregn/$numimg)) : 0;
			$regionstats['numimgs']=$numimg.'<BR>('.$rpimg.' regions/img)';
			$regionstats['img'] = '<a href="maskregiongraph.php?hg=1&run='.$runId.'">'
							.'<img border="0" '
							.'src="maskregiongraph.php?w=150&hg=1&run='
				.$runId.'"></a>';
			$q = "select name from `ApMaskMakerRunData` where `DEF_id` = $runId";
			$r = $this->mysql->getSQLResult($q);
			$r0 = $r[0];
			$html .= "<td><a target='params' href='maskrunreport.php?expId=$expId&rId=$runId'>".$r0['name']."</a></td>";
			foreach($display_keys as $field) {
							$data=$regionstats[$field];
				if (eregi('^areamean|^Imean|^Istddev', $field)) $data=format_sci_number($data,4);
				$html .= "<td> $data </td> \n";
			}
			$html .= "</tr>\n";
		}
		$html .= "</table>\n";
		return $html;
	}

	function getMaskAssessRunByName ($sessionId,$name){
		$q = "select * "
			."from `ApMaskAssessmentRunData` "
			."where "
			."`REF|leginondata|SessionData|session` = '$sessionId' AND "
			." `name` = '$name' ";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getMaskAssessNames ($sessionId){
		$q = "select `name` "
			."from `ApMaskAssessmentRunData` "
			."where `REF|leginondata|SessionData|session` = '$sessionId' "
			." group by `name` ";
		$r = $this->mysql->getSQLResult($q);
		if ($r) {
			$names=array();
			foreach ($r as $ra) $names[]=$ra[name];
		}
		return $names;
	}

	function getMaskAssessStats ($runId, $inspect=False){
		$q="select count(m.`keep`) as `totkeeps`, "
			."count(distinct r.`REF|leginondata|AcquisitionImageData|image`) as num "
						."from ApMaskAssessmentData m "
			."left join ApMaskRegionData r "
			." on m.`REF|ApMaskRegionData|region` = r.`DEF_id` ";
		// use the latest inspection value. This should be changed later
		if ($inspect) {
						$q.= "left join ApAssessmentData ad "
				."on (ad.`REF|leginondata|AcquisitionImageData|image` = r.`REF|leginondata|AcquisitionImageData|image`) ";
		}
		$q.="WHERE ";
		if ($inspect) {
			$q.= "ad.`DEF_id`=(select max(ad2.`DEF_id`) from ApAssessmentData ad2 where ad2.`REF|leginondata|AcquisitionImageData|image` = ad.`REF|leginondata|AcquisitionImageData|image`) "
				."and ad.selectionkeep=1 AND ";
		}
		$q.="m.`REF|ApMaskAssessmentRunData|run` = '$runId' AND "
			."m.`keep` = 1 ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];

	}

	#--------- REF-FREE ALIGNMENT FUNCTIONS---------------#

	function getNoRefIds ($sessionId, $showHidden=False) {
		$q = "SELECT nr.* "
		  ."FROM ApNoRefRunData AS nr "
		  ."LEFT JOIN ApRunsInStackData AS sd ON "
		  ."(nr.`REF|ApStackData|stack` = sd.`REF|ApStackData|stack`) "
		  ."LEFT JOIN ApStackRunData AS sr ON "
		  ."(sd.`REF|ApStackRunData|stackRun` = sr.`DEF_id`) "
		  ."WHERE "
		  ."  sr.`REF|leginondata|SessionData|session` = '$sessionId' ";
		if (!$showHidden) $q.= "AND ( nr.`hidden` = 0 OR nr.`hidden` IS NULL ) ";
		$q.= "ORDER BY nr.`DEF_id` DESC";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getCoranEigenData ($norefRunId) {
		$q = "SELECT "
			."ce.factor_num AS num, "
			."ce.image_name AS name, "
			."ce.percent_contrib AS contrib, "
			."p.path AS path "
			."FROM ApCoranEigenImageData AS ce "
			."LEFT JOIN ApPathData AS p "
			."  ON (ce.`REF|ApPathData|path` = p.`DEF_id`) "
			."WHERE "
			."  ce.`REF|ApNoRefRunData|norefRun` = '$norefRunId' "
			."ORDER BY ce.`factor_num` ASC";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

		function getRefAliIds ($sessionId) {
		$q = "SELECT rr.`DEF_id` "
			."FROM ApRefRunData AS rr "
			."LEFT JOIN ApRunsInStackData AS sd ON "
			."(rr.`REF|ApStackData|stack` = sd.`REF|ApStackData|stack`) "
			."LEFT JOIN ApStackRunData AS sr ON "
			."(sd.`REF|ApStackRunData|stackRun` = sr.`DEF_id`) "
			."WHERE "
			."  sr.`REF|leginondata|SessionData|session` = '$sessionId' "
			."AND "
			." ( rr.`hidden` = 0 OR rr.`hidden` IS NULL ) "
			."ORDER BY rr.`DEF_id` DESC";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getRefInfoFromId ($refid) {
		$q = "SELECT * "
			."FROM ApRefRunData "
			."WHERE ApRefRunData.`DEF_id`='$refid'";

		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getRefTemplatesFromId ($refid) {
		$q = "SELECT t.*, pd.`path` "
			."FROM ApRefTemplateRunData AS rt "
			."LEFT JOIN ApTemplateImageData AS t ON "
			."(rt.`REF|ApTemplateImageData|refTemplate` = t.`DEF_id`) "
			."LEFT JOIN ApPathData AS pd ON "
			."(t.`REF|ApPathData|path` = pd.`DEF_id`) "
			."WHERE rt.`REF|ApRefRunData|refRun`='$refid'";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getNoRefParams ($norefId) {
		$q = "SELECT p.*, r.*, pd.path "
			."FROM ApNoRefRunData as r "
			."LEFT JOIN ApNoRefParamsData as p "
			."ON (r.`REF|ApNoRefParamsData|norefParams`=p.`DEF_id`) "
			."LEFT JOIN ApPathData AS pd ON "
			."(r.`REF|ApPathData|path` = pd.`DEF_id`) "
			//."LEFT JOIN ApStackData as sd "
			//."ON (r.`REF|ApStackData|stack`=sd.`DEF_id`) "
			//."LEFT JOIN `ApStackParamsData` sp "
			//."ON (sp.`DEF_id` = s.`REF|ApStackParamsData|stackParams`) "
			."WHERE r.`DEF_id` = '$norefId'";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getImagicReclassParamsFrom3d0 ($imagic3d0Id) {
		$q = "SELECT reclass.*, pd.path "
			."FROM ApImagic3d0Data as model "
			."LEFT JOIN ApImagicReclassifyData as reclass "
			."  ON model.`REF|ApImagicReclassifyData|reclass`=reclass.`DEF_id` "
			."LEFT JOIN ApPathData AS pd "
			."  ON reclass.`REF|ApPathData|path`=pd.`DEF_id` "
			."WHERE model.`DEF_id` = '$imagic3d0Id' ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getNoRefClassRunParamsFrom3d0 ($imagic3d0Id) {
		$q = "SELECT norefclass.* "
			."FROM ApImagic3d0Data as model "
			."LEFT JOIN ApNoRefClassRunData as norefclass "
			."  ON model.`REF|ApNoRefClassRunData|norefclass`=norefclass.`DEF_id` "
			."WHERE model.`DEF_id` = '$imagic3d0Id' ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getRefAliParams ($refaliId) {
		$q = "SELECT	par.*, run.*, path.path "
			."FROM ApRefRunData as run "
			."LEFT JOIN ApRefParamsData as par "
			."ON (run.`REF|ApRefParamsData|refParams`=par.`DEF_id`) "
			."LEFT JOIN ApPathData AS path ON "
			."(run.`REF|ApPathData|path` = path.`DEF_id`) "
			."WHERE run.`DEF_id` = '$refaliId'";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getNoRefClassRuns ($norefId) {
		$q = "SELECT * "
			."FROM ApNoRefClassRunData as cr "
			."WHERE cr.`REF|ApNoRefRunData|norefRun` = '$norefId' "
			."ORDER BY cr.`num_classes`";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getAllNoRefClassRuns ($sessionId) {
		$q = "SELECT "
			."  classrun.`DEF_id`, "
			."  alignrun.`name`, "
			."  classrun.`num_classes`, "
			."  alignrun.`description` "
			."FROM ApNoRefClassRunData as classrun "
			."LEFT JOIN ApNoRefRunData as alignrun "
			."  ON classrun.`REF|ApNoRefRunData|norefRun` = alignrun.`DEF_id` "
			."LEFT JOIN ApStackData as stack "
			."  ON alignrun.`REF|ApStackData|stack` = stack.`DEF_id` "
		  ."LEFT JOIN ApRunsInStackData as runsin "
		  ."  ON runsin.`REF|ApStackData|stack` = stack.`DEF_id` "
		  ."LEFT JOIN ApStackRunData as stackrun "
		  ."  ON runsin.`REF|ApStackRunData|stackRun` = stackrun.`DEF_id` "
			."WHERE stackrun.`REF|leginondata|SessionData|session` = '$sessionId' "
			."ORDER BY alignrun.`DEF_id` DESC, "
			." classrun.`num_classes` DESC ";
		//echo $q."\n<BR/>\n";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getNoRefClassRunData ($classrun) {
		$q = "SELECT classrun.* "
			."FROM ApNoRefClassRunData as classrun "
			."WHERE classrun.`DEF_id` = '$classrun' ";
		//echo $q;
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getRefAliIters ($refaliId) {
		$q = "SELECT * "
			."FROM ApRefIterationData as i "
			."WHERE i.`REF|ApRefRunData|refRun` = '$refaliId' "
			."ORDER BY i.`iteration`";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getMaxLikeIds ($sessionId, $showHidden=False) {
		$q = "SELECT nr.* "
		  ."FROM ApNoRefRunData AS nr "
		  ."LEFT JOIN ApRunsInStackData AS sd ON "
		  ."(nr.`REF|ApStackData|stack` = sd.`REF|ApStackData|stack`) "
		  ."LEFT JOIN ApStackRunData AS sr ON "
		  ."(sd.`REF|ApStackRunData|stackRun` = sr.`DEF_id`) "
		  ."WHERE "
		  ."  sr.`REF|leginondata|SessionData|session` = '$sessionId' ";
		if (!$showHidden) $q.= "AND ( nr.`hidden` = 0 OR nr.`hidden` IS NULL ) ";
		$q.= "ORDER BY nr.`DEF_id` DESC";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	#---------RECONSTRUCTION FUNCTIONS---------------#

	function getSymmetries() {
		$q="SELECT * "
			."FROM `ApSymmetryData`";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getModelsFromProject ($projectId, $getHidden=False) {
		$q="SELECT i.*, p.path "
			."FROM `ApInitialModelData` i "
			."LEFT JOIN `ApPathData` p "
			." ON (p.`DEF_id` = i.`REF|ApPathData|path`) "
		        ."WHERE i.`project|projects|project`='$projectId' ";
		if (!$getHidden) $q.= "AND (i.`hidden` IS NULL OR i.`hidden` = 0) ";
		$q.= "ORDER BY i.`DEF_id` DESC";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function updateExemplar($table, $id, $value) {
		$q = "SELECT exemplar "
			."FROM `".$table."` "
			."WHERE `DEF_id`=".$id." ";
		$olddata = $this->mysql->getSQLResult($q);
		if (array_key_exists('exemplar',$olddata[0])) {
			$data = array();
			$data['exemplar']=$value;
			$where = array('DEF_id'=>$id);
			$this->mysql->SQLUpdate($table,$data,$where);
		}
	}

	function getMiscInfoFromProject ($projectId) {
		$q="SELECT i.*, p.path "
			."FROM `ApMiscData` i "
			."LEFT JOIN `ApPathData` p "
			." ON (p.`DEF_id` = i.`REF|ApPathData|path`) "
			."WHERE i.`project|projects|project`='$projectId' "
			."ORDER BY i.`DEF_id` DESC";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getJobIdsFromSession($expId,$jobtype=False,$status=False,$ignore=True) {
		$q="SELECT j.*, "
		  ."p.path as appath "
		  ."FROM `ApClusterJobData` AS j "
		  ."LEFT JOIN `ApPathData` AS p ON "
		  ."(j.`REF|ApPathData|path` = p.`DEF_id`) "
		  ."WHERE `REF|leginondata|SessionData|session` = $expId";
		if ($jobtype) $q.=" AND `jobtype` = '$jobtype'";
		if ($status) $q.=" AND `status` = '$status'";
		if ($ignore) $q.=" AND `status` != 'I'";
		$q.=" ORDER BY j.`DEF_id` DESC ";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getFscFromRefinementDataId ($id) {
		$q = "SELECT * "
		  ."FROM ApFSCData "
		  ."WHERE `REF|ApRefinementData|refinementData` = $id "
		  ."ORDER BY pix";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

  function getJobInfoFromId($jobid) {
    $q="SELECT j.*, "
      ."p.path as appath, "
      ."d.path as dmfpath, "
      ."c.path as clusterpath "
      ."FROM `ApClusterJobData` AS j "
      ."LEFT JOIN ApPathData AS p ON "
      ."(j.`REF|ApPathData|path` = p.`DEF_id`) "
      ."LEFT JOIN ApPathData AS d ON "
      ."(j.`REF|ApPathData|dmfpath` = d.`DEF_id`) "
      ."LEFT JOIN ApPathData AS c ON "
      ."(j.`REF|ApPathData|clusterpath` = c.`DEF_id`) "
      ."WHERE j.`DEF_id` = $jobid";
    $r = $this->mysql->getSQLResult($q);
    return $r[0];
  }

  function getJobFileFromPath($path,$name) {
    $q="SELECT j.*, p.path "
      ."FROM `ApClusterJobData` AS j "
      ."LEFT JOIN ApPathData AS p ON "
      ."(j.`REF|ApPathData|path` = p.`DEF_id`) "
      ."WHERE p.`path` = '$path' AND j.`name` = '$name'";
    $r = $this->mysql->getSQLResult($q);
    return $r;
  }

	function insertClusterJobData($host,$pathdir,$dmfpathdir,$clusterdir,$name,$expId,$jobtype,$user=NULL) {
		// put appion path in db
		$q = "SELECT DEF_id "
		  ."FROM `ApPathData` "
		  ."WHERE `path`='$pathdir'";
		$r = $this->mysql->getSQLResult($q);
		$pathid=$r[0]['DEF_id'];
		if (!$pathid) {
			$pdata['path']=$pathdir;
			$pathid=$this->mysql->SQLInsert('ApPathData',$pdata);
		}
		// put dmf path in db
		$q = "SELECT DEF_id "
		  ."FROM `ApPathData` "
		  ."WHERE `path`='$dmfpathdir'";
		$r = $this->mysql->getSQLResult($q);
		$dmfpathid=$r[0]['DEF_id'];
		if (!$dmfpathid) {
			$pdata['path']=$dmfpathdir;
			$dmfpathid=$this->mysql->SQLInsert('ApPathData',$pdata);
		}
		// put cluster path in db
		$q = "SELECT DEF_id "
		  ."FROM `ApPathData` "
		  ."WHERE `path`='$clusterdir'";
		$r = $this->mysql->getSQLResult($q);
		$clusterpathid=$r[0]['DEF_id'];
		if (!$clusterpathid) {
			$pdata['path']=$clusterdir;
			$clusterpathid=$this->mysql->SQLInsert('ApPathData',$pdata);
		}
		// find if job is in database
		$q = "SELECT DEF_id "
		  ."FROM `ApClusterJobData` "
		  ."WHERE `REF|ApPathData|path` = $pathid AND "
		  ."`name` = '$name' AND "
		  ."`REF|leginondata|SessionData|session` = $expId";
		$r = $this->mysql->getSQLResult($q);
		$jid=$r[0]['DEF_id'];
		// if not in database, insert
		if (!$jid) {
			$jdata['REF|ApPathData|path'] = $pathid;
			$jdata['name'] = $name;
			$jdata['jobtype'] = $jobtype;
			$jdata['REF|leginondata|SessionData|session'] = $expId;
			$jdata['REF|ApPathData|dmfpath'] = $dmfpathid;
			$jdata['REF|ApPathData|clusterpath'] = $clusterpathid;
			$jdata['cluster'] = $host;
			$jdata['user'] = $user;
			$jid=$this->mysql->SQLInsert('ApClusterJobData',$jdata);
		}
		return $jid;
	}

	function updateDescription($table, $id, $newtext) {
		$q = "SELECT description "
			."FROM `".$table."` "
			."WHERE `DEF_id`=".$id." ";
		$olddata = $this->mysql->getSQLResult($q);
		if (array_key_exists('description',$olddata[0])) {
			$data = array();
			$data['description']=$newtext;
			$where = array('DEF_id'=>$id);
			$this->mysql->SQLUpdate($table,$data,$where);
		}
	}

	function updateHide($table, $id, $value) {
		$q = "SELECT hidden "
			."FROM `".$table."` "
			."WHERE `DEF_id`=".$id." ";
		$olddata = $this->mysql->getSQLResult($q);
		if (array_key_exists('hidden',$olddata[0])) {
			$data = array();
			$data['hidden']=$value;
			$where = array('DEF_id'=>$id);
			$this->mysql->SQLUpdate($table,$data,$where);
		}
	}

	function updateClusterQueue($jobid,$queueid,$status) {
		$data = array('clusterjobid'=>$queueid);
		$data['status']=$status;
		$where = array('DEF_id'=>$jobid);
		$this->mysql->SQLUpdate('ApClusterJobData',$data,$where);
	}

	function abortClusterJob($jobid,$user=NULL) {
		$data = array('status'=>'A');
		$where = array('DEF_id'=>$jobid);
		if (!is_null($user)) $where['user'] = $user;
		$this->mysql->SQLUpdate('ApClusterJobData',$data,$where);
	}

	function getSubmittedJobs($expId) {
		$q="SELECT * "
		  ."FROM `ApClusterJobData` "
		  ."WHERE `REF|leginondata|SessionData|session`=$expId";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}


	function getReconIdFromClusterJobId ($jobid) {
		$q="SELECT * "
		  ."FROM `ApRefinementRunData` "
		  ."WHERE `REF|ApClusterJobData|jobfile` = $jobid";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getReconIdsFromSession ($sessionId, $showHidden=False) {
		$q = "SELECT refrun.*  "
		  ." FROM `ApRefinementRunData` AS refrun "
		  ."LEFT JOIN ApRunsInStackData AS runs "
		  ." ON refrun.`REF|ApStackData|stack` = runs.`REF|ApStackData|stack` "
		  ."LEFT JOIN ApStackRunData AS stackrun "
		  ." ON runs.`REF|ApStackRunData|stackRun` = stackrun.`DEF_id` "
		  ."WHERE stackrun.`REF|leginondata|SessionData|session` = '$sessionId' ";
		if (!$showHidden) $q.= " AND (refrun.`hidden` IS NULL OR refrun.`hidden` = 0) ";
		$q.= " ORDER BY refrun.`DEF_id` DESC";
		//echo $q."<br/><br/>\n";
		$r = $this->mysql->getSQLResult($q);
		//echo print_r($r)."<br/>\n";
		return $r;
	}

	function getExemplarReconsFromSession ($sessionId, $showHidden=False) {
		$q = "SELECT refdata.`DEF_id` as refdataid, "
		  ."refrun.`DEF_id` as refrunid, "
		  ."refdata.*, refrun.*, stackrun.*, runs.*, p.*, params.* "
		  ." FROM `ApRefinementData` AS refdata "
		  ."LEFT JOIN `ApRefinementRunData` AS refrun "
		  . "ON refdata.`REF|ApRefinementRunData|refinementRun` = refrun.`DEF_id` "
		  ."LEFT JOIN `ApRefinementParamsData` AS params "
		  ." ON (refdata.`REF|ApRefinementParamsData|refinementParams` = params.`DEF_id`) "
		  ."LEFT JOIN ApRunsInStackData AS runs "
		  ." ON refrun.`REF|ApStackData|stack` = runs.`REF|ApStackData|stack` "
		  ."LEFT JOIN ApStackRunData AS stackrun "
		  ." ON runs.`REF|ApStackRunData|stackRun` = stackrun.`DEF_id` "
		  ."LEFT JOIN ApPathData as p "
		  ." ON refrun.`REF|ApPathData|path` = p.`DEF_id` "
		  ."WHERE refdata.exemplar = 1 "
		  ."AND stackrun.`REF|leginondata|SessionData|session` = '$sessionId' ";
		if (!$showHidden) $q.= " AND (refrun.`hidden` IS NULL OR refrun.`hidden` = 0) ";
		$q.= " ORDER BY refrun.`DEF_id` DESC";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getReconIds ($stackId, $showHidden=False) {
		$q = "SELECT * "
		  ."FROM `ApRefinementRunData` AS r ";
		if (!$showHidden)
		  $q.= "LEFT JOIN ApStackData AS s "
		    ." ON r.`REF|ApStackData|stack` = s.`DEF_id` ";
		$q.= "WHERE r.`REF|ApStackData|stack` = '$stackId'";
		if (!$showHidden) $q.= " AND (s.`hidden` IS NULL OR s.`hidden` = 0) "
				    ." AND (r.`hidden` IS NULL OR r.`hidden` = 0) ";
		$q.= "ORDER BY r.`DEF_id` DESC";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getRefinementRunInfo($refinementRun) {
		$q="select r.*, p.path "
			."FROM `ApRefinementRunData` AS r "
			."LEFT JOIN ApPathData AS p ON "
			."(r.`REF|ApPathData|path` = p.`DEF_id`) "
			."WHERE r.`DEF_id` = '$refinementRun' ";
		list($r) = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getPostProcsFromRefId($refid, $getHidden=False) {
	  	$q = "SELECT d.*, "
		  ."p.path as path , a.path as amppath "
		  ."FROM `Ap3dDensityData` AS d "
		  ."LEFT JOIN `ApPathData` AS p ON "
		  ."(d.`REF|ApPathData|path` = p.`DEF_id`) "
		  ."LEFT JOIN `ApPathData` AS a ON "
		  ."(d.`REF|ApPathData|ampPath` = a.`DEF_id`) "
		  ."WHERE d.`REF|ApRefinementData|iterid` = $refid ";
		if (!$getHidden) $q.= "AND (d.`hidden` IS NULL OR d.`hidden` = 0) ";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getInitModelInfo ($modelId) {
		$q = "SELECT d.*,p.path "
				."FROM `ApInitialModelData` AS d "
				."LEFT JOIN ApPathData AS p ON "
				."(d.`REF|ApPathData|path` = p.`DEF_id`) "
				."WHERE d.`DEF_id` = '$modelId' ";
		list($r) = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getSymInfo ($symId){
		$q = "SELECT * "
				."FROM `ApSymmetryData` WHERE `DEF_id` = '$symId'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getResolutionInfo ($resId) {
		$q = "SELECT * "
				."FROM `ApResolutionData` WHERE `DEF_id` = '$resId'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getRMeasureInfo ($resId) {
		$q = "SELECT * "
				."FROM `ApRMeasureData` WHERE `DEF_id` = '$resId'";
		list($r) = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getHighestResForRecon ($reconid) {
		$q = "SELECT ref.iteration AS iter, res.half AS half, rmeas.rMeasure AS rmeas "
				."FROM `ApRefinementData` AS ref "
				."LEFT JOIN `ApResolutionData` AS res "
				." ON (ref.`REF|ApResolutionData|resolution` = res.`DEF_id`) "
				."LEFT JOIN `ApRMeasureData` AS rmeas "
				." ON (ref.`REF|ApRMeasureData|rMeasure` = rmeas.`DEF_id`) "
				."WHERE ref.`REF|ApRefinementRunData|refinementRun` = '$reconid' "
				//."ORDER by rmeas.rMeasure ";
				."ORDER by res.half ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getHighestRMeasureForRecon ($reconid) {
		$q = "SELECT ref.iteration AS iter, res.half AS half, rmeas.rMeasure AS rmeas "
				."FROM `ApRefinementData` AS ref "
				."LEFT JOIN `ApResolutionData` AS res "
				." ON (ref.`REF|ApResolutionData|resolution` = res.`DEF_id`) "
				."LEFT JOIN `ApRMeasureData` AS rmeas "
				." ON (ref.`REF|ApRMeasureData|rMeasure` = rmeas.`DEF_id`) "
				."WHERE ref.`REF|ApRefinementRunData|refinementRun` = '$reconid' "
				."ORDER by rmeas.rMeasure ";
				//."ORDER by res.half ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getIterationInfo ($reconId,$iteration=0) {
		$q = "SELECT * "
				."FROM `ApRefinementData` r "
				."LEFT JOIN `ApRefinementParamsData` p "
				."ON (r.`REF|ApRefinementParamsData|refinementParams` = p.`DEF_id`) "
				."WHERE r.`REF|ApRefinementRunData|refinementRun` = '$reconId' "
				."ORDER BY r.`iteration` ASC ";
		$r = $this->mysql->getSQLResult($q);
		if ($iteration >0) {
			return $r[$iteration-1];
		}
		return $r;
	}

	function getRefinementData ($refinementRun,$iteration=False) {
		$q = "SELECT * "
		  ."FROM `ApRefinementData` "
		  ."WHERE `REF|ApRefinementRunData|refinementRun` = $refinementRun ";
		if ($iteration) $q.="AND `iteration` = $iteration";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getParamsFromRefinementDataId ($refinementId) {
		$q = "SELECT * "
				."FROM `ApRefinementData` r "
				."LEFT JOIN `ApRefinementParamsData` p "
				."ON (r.`REF|ApRefinementParamsData|refinementParams` = p.`DEF_id`) "
				."WHERE r.`DEF_id` = $refinementId";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getStackFromRefinement ($refinementDataId) {
		$q = "SELECT r.*, rr.*, s.*, path.path "
				."FROM `ApRefinementData` r "
				."LEFT JOIN `ApRefinementRunData` rr "
				."ON (r.`REF|ApRefinementRunData|refinementRun` = rr.`DEF_id`) "
				."LEFT JOIN `ApStackData` s "
				."ON (rr.`REF|ApStackData|stack` = s.`DEF_id`) "
				."LEFT JOIN `ApPathData` path "
				."ON (s.`REF|ApPathData|path` = path.`DEF_id`) "
				."WHERE r.`DEF_id` = $refinementDataId";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getSubsetParticlesInStack ($refinementDataId, $subset, $refinetype='EMAN', $count=False) {
		$q = "SELECT particleNumber as p ";
		if ($count) $q = "SELECT count(particleNumber) as p ";
		$q .= "FROM `ApParticleClassificationData` apcd "
		  ."LEFT JOIN `ApStackParticlesData` aspd "
		  ."ON (apcd.`REF|ApStackParticlesData|particle` = aspd.`DEF_id`) "
			."WHERE apcd.`REF|ApRefinementData|refinement` = '$refinementDataId' ";
		switch ($refinetype) {
			case 'EMAN':
				if ($subset=='bad') $q.="AND `thrown_out` = 1 ";
				elseif ($subset=='good') $q.="AND `thrown_out` is NULL ";
				break;
			case 'SpiCoran':
				if ($subset=='bad') $q.="AND `coran_keep` = 0 ";
				elseif ($subset=='good') $q.="AND `coran_keep` = 1 ";
			  break;
			case 'MsgP':
				if ($subset=='bad') $q.="AND `msgp_keep` = 0 ";
				elseif ($subset=='good') $q.="AND `msgp_keep` = 1 ";
			  break;
		}
		if (!$count) $q.= "ORDER BY aspd.`DEF_id` ASC ";
		$r = $this->mysql->getSQLResult($q);
		if ($count) return $r[0]['p'];
		return $r;
	}

	function listAllStackParticles ($stackId) {
		$q="SELECT sp.`particleNumber`, db.`MRC|image`, "
		  ."p.`xcoord` , p.`ycoord` "
		  ."FROM  `ApStackParticlesData` sp "
		  ."LEFT JOIN ApParticleData p ON "
		  ."( sp.`REF|ApParticleData|particle` = p.`DEF_id` ) "
		  ."LEFT JOIN dbemdata.AcquisitionImageData db ON "
		  ."( p.`REF|leginondata|AcquisitionImageData|image` = db.`DEF_id` ) "
		  ."WHERE sp.`REF|ApStackData|stack`=$stackId";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getNumClasses ($refinementDataId) {
		$q = "SELECT count(distinct(`REF|ApEulerData|eulers`)) as num "
				."FROM `ApParticleClassificationData` "
				."WHERE `REF|ApRefinementData|refinement` = '$refinementDataId' ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0]['num'];
	}

	function getEulerIds ($refinementDataId) {
		$q = "SELECT distinct(`REF|ApEulerData|eulers`) as eulers "
				."FROM `ApParticleClassificationData` "
				."WHERE `REF|ApRefinementData|refinement` = '$refinementDataId' ";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getAverageMedianJump ($refineRunId) {
		$q = "SELECT "
			."COUNT(e.`median`) AS count, "
			."AVG(e.`median`) AS average, "
			."STDDEV(e.`median`) AS stdev "
			."FROM ApEulerJumpData AS e "
			."WHERE "
			."  e.`REF|ApRefinementRunData|refRun` = '$refineRunId' "
			."GROUP BY e.`REF|ApRefinementRunData|refRun` ";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getEulerJumps ($refineRunId) {
		$q="SELECT "
			."  e.`DEF_id`, "
			."  e.`median` "
			."FROM ApEulerJumpData AS e "
			."WHERE "
			."  e.`REF|ApRefinementRunData|refRun` = '$refineRunId' ";
			//."ORDER BY e.`median` "
			//."LIMIT 100 ";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getParticleEuler ($refinementDataId) {
		$q = "SELECT distinct(`REF|ApEulerData|eulers`) as eulers "
			."FROM `ApParticleClassificationData` "
			."WHERE `REF|ApRefinementData|refinement` = '$refinementDataId' ";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getNumInClass ($refinementDataId,$eulerId) {
		$q = "SELECT count(DEF_id) as num "
			."FROM `ApParticleClassificationData` "
			."WHERE `REF|ApRefinementData|refinement` = '$refinementDataId' "
			."AND `REF|ApEulerData|eulers` = $eulerId";
		list($r) = $this->mysql->getSQLResult($q);
		return $r['num'];
	}

	function getEulerAngles ($eulerId) {
		$q = "SELECT * "
			."FROM `ApEulerData` "
			."WHERE `DEF_id` = $eulerId";
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getCommonParticles ($refine1, $refine2) {
		# compare 2 iterations, get all the particles that were used in both
		# reconstructions (ignore those that were thrown out) and return the eulers"
		$q = "SELECT cls1.`REF|ApStackParticlesData|particle` as prtl, "
				."spd.particleNumber, "
				."euler1.euler1 as euler1_1, "
				."euler1.euler2 as euler1_2, "
				."euler1.euler3 as euler1_3, "
				."euler2.euler1 as euler2_1, "
				."euler2.euler2 as euler2_2, "
				."euler2.euler3 as euler2_3, "
				."cls1.`shiftx` as shiftx1, "
				."cls2.`shiftx` as shiftx2, "
				."cls1.`shifty` as shifty1, "
				."cls2.`shifty` as shifty2, "
				."cls1.`inplane_rotation` as rot1, "
				."cls2.`inplane_rotation` as rot2, "
				."cls1.`quality_factor` as qf1, "
				."cls2.`quality_factor` as qf2 "
				."FROM (`ApParticleClassificationData` as cls1) "
				."LEFT JOIN ( "
				." `ApParticleClassificationData` as cls2, "
				." `ApStackParticlesData` as spd, "
				." `ApEulerData` euler1, `ApEulerData` euler2) "
				."ON ( "
				."cls1.`REF|ApStackParticlesData|particle`=cls2.`REF|ApStackParticlesData|particle` "
				."AND spd.DEF_id=cls1.`REF|ApStackParticlesData|particle` "
				."AND cls1.`thrown_out` is NULL AND cls2.`thrown_out` is NULL "
				."AND euler1.DEF_id=cls1.`REF|ApEulerData|eulers` "
				."AND euler2.DEF_id=cls2.`REF|ApEulerData|eulers` "
				.") "
				."WHERE (cls1.`REF|ApRefinementData|refinement`=$refine1 "
				."AND cls2.`REF|ApRefinementData|refinement`=$refine2 "
				.") "
				."ORDER by prtl";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getParticlesFromRefinementId($refine1) {
		# compare 2 iterations, get all the particles that were used in both
		# reconstructions (ignore those that were thrown out) and return the eulers"
		$q = "SELECT cls1.`REF|ApStackParticlesData|particle` as prtl, "
				."spd.particleNumber, "
				."euler1.euler1 as euler1_1, "
				."euler1.euler2 as euler1_2, "
				."euler1.euler3 as euler1_3, "
				."cls1.`shiftx` as shiftx1, "
				."cls1.`shifty` as shifty1, "
				."cls1.`inplane_rotation` as rot1, "
				."cls1.`quality_factor` as qf1 "
				."FROM (`ApParticleClassificationData` as cls1) "
				."LEFT JOIN ( "
				." `ApStackParticlesData` as spd, "
				." `ApEulerData` euler1) "
				."ON ( "
				."spd.DEF_id=cls1.`REF|ApStackParticlesData|particle` "
				."AND cls1.`thrown_out` is NULL "
				."AND euler1.DEF_id=cls1.`REF|ApEulerData|eulers` "
				.") "
				."WHERE ( "
				." cls1.`REF|ApRefinementData|refinement`=$refine1 "
				.") "
				."ORDER by prtl";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getStackParticleNum ($particleId) {
					$q = "SELECT particleNumber "
					."FROM `ApStackParticlesData` "
					."WHERE `DEF_id` = $particleId";
					list($r) = $this->mysql->getSQLResult($q);
					return $r['particleNumber'];
		}

	function getMiscInfoFromReconId ($reconid) {
		$q = "SELECT m.*, p.path "
		."FROM `ApMiscData` AS m "
		."LEFT JOIN ApPathData AS p ON "
		."(m.`REF|ApPathData|path` = p.`DEF_id`) "
		."WHERE m.`REF|ApRefinementRunData|refinementRun` = $reconid";
		$r = $this->mysql->getSQLResult($q);
		return $r;
	}

	function getEulerStats($reconId, $iterId1, $iterId2) {
		$q = "SELECT difference, eulers,	mean from `ApProcEulerData` "
				." WHERE `reconId`=$reconId AND `iter1`=$iterId1 AND `iter2`=$iterId2";
		$r=$this->mysql->getSQLResult($q);

		return $r;
	}

	function getReconInfoFromRefinementId($refineid) {
		$q="SELECT *"
		."FROM "
		."`ApRefinementData` AS `ApRefinementData` "
		."LEFT JOIN `ApRefinementRunData` AS `ApRefinementRunData` "
		."ON (`ApRefinementRunData`.`DEF_id`=`ApRefinementData`.`REF|ApRefinementRunData|refinementRun`) "
		."LEFT JOIN `ApPathData` AS `ApPathData` "
		."ON (`ApPathData`.`DEF_id`=`ApRefinementRunData`.`REF|ApPathData|path`) "
		."WHERE `ApRefinementData`.`DEF_id`=$refineid ";
		$r=$this->mysql->getSQLResult($q);
		return $r[0];
	}

	function insertEulerStats($stats) {
		$mean = $stats->myMean;
		$errors = $stats->myData;
		$reconId=$stats->myReconId;
		$iterId1=$stats->myIterId1;
		$iterId2=$stats->myIterId2;
		$eulers=$stats->eulers1;
		$min = $stats->myMin;
		$max = $stats->myMax;
		$stdev = $stats->myStandardDeviation;

		$euler = array_map('simplify',$eulers);

		$table="ApProcEulerData";
		# $this->mysql->SQLInsert($table, $data);
		$q = "SELECT DEF_id from `ApProcEulerData` "
				." WHERE `reconId`=$reconId AND `iter1`=$iterId1 AND `iter2`=$iterId2";
			 //--- print_r($r=$this->mysql->SQLQuery($q));
			 //--- if (!$r=$this->mysql->getSQLResult($q)) {
					$q = "INSERT INTO `ApProcEulerData` "
							."(`reconId`, `iter1`, `iter2`, `difference`, `eulers`, `mean`, `min`, `max`, `stdev`) "
							." VALUES "
							."($reconId, $iterId1, $iterId2, "
							."'".implode(",",$errors)."',"
							."'".implode(",",$euler)."',"
							."$mean, $min, $max, $stdev)";
					$r=$this->mysql->SQLQuery($q);
					if ($e=$this->mysql->getError()) {
							echo "error -> $e \n";
							exit;
					}
			//--- }
		return $r;

	}

	function getNoRefClassParticleNumber($runId) {
		$q="select classNumber, count(DEF_id) as number "
			."from ApNoRefClassParticlesData "
			."where `REF|ApNoRefClassRunData|classRun`='$runId' "
			."group by classNumber "
			."order by classNumber";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getNumberOfRctRuns($sessionId) {
		$q="SELECT count(rctrun.`DEF_id`) AS number "
			."FROM ApRunsInStackData as runsin "
			."LEFT JOIN ApStackRunData AS strun "
			."  ON (runsin.`REF|ApStackRunData|stackRun` = strun.`DEF_id`) "
			."LEFT JOIN ApRctRunData AS rctrun "
			."  ON rctrun.`REF|ApStackData|tiltstack` = runsin.`REF|ApStackData|stack` "
			."WHERE strun.`REF|leginondata|SessionData|session` = '$sessionId' ";
		$r=$this->mysql->getSQLResult($q);
		return $r[0]['number'];
	}

	function getRctRunsFromSession($sessionId) {
		$q="SELECT rctrun.*, "
			."  path.`path` AS path, "
			."  stparam.`boxSize` AS boxsize "
			."FROM ApRunsInStackData as runsin "
			."LEFT JOIN ApStackRunData AS strun "
			."  ON (runsin.`REF|ApStackRunData|stackRun` = strun.`DEF_id`) "
			."LEFT JOIN ApRctRunData AS rctrun "
			."  ON rctrun.`REF|ApStackData|tiltstack` = runsin.`REF|ApStackData|stack` "
			."LEFT JOIN ApStackParamsData AS stparam "
			."  ON strun.`REF|ApStackParamsData|stackParams` = stparam.`DEF_id` "
			."LEFT JOIN ApPathData AS path "
			."  ON rctrun.`REF|ApPathData|path` = path.`DEF_id` "
			."WHERE "
			."  rctrun.`DEF_id` IS NOT NULL "
			."AND "
			."  strun.`REF|leginondata|SessionData|session` = '$sessionId' "
			."ORDER BY rctrun.`DEF_id` DESC ";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getRctRunDataFromId($rctId) {
		$q="SELECT rctrun.*, "
			."  path.`path` AS path, "
			."  stparam.`boxSize` AS boxsize "
			."FROM ApRctRunData as rctrun "
			."LEFT JOIN ApRunsInStackData AS runsin "
			."  ON rctrun.`REF|ApStackData|tiltstack` = runsin.`REF|ApStackData|stack` "
			."LEFT JOIN ApStackRunData AS strun "
			."  ON (runsin.`REF|ApStackRunData|stackRun` = strun.`DEF_id`) "
			."LEFT JOIN ApStackParamsData AS stparam "
			."  ON strun.`REF|ApStackParamsData|stackParams` = stparam.`DEF_id` "
			."LEFT JOIN ApPathData AS path "
			."  ON rctrun.`REF|ApPathData|path` = path.`DEF_id` "
			."WHERE "
			."  rctrun.`DEF_id` = '$rctId' ";
		$r=$this->mysql->getSQLResult($q);
		return $r[0];
	}

	function get3dDensitysFromSession($sessionId) {
		$q="SELECT "
			."  dens.*, "
			."  path.`path` AS path, "
			."  iterid.`REF|ApRefinementRunData|refinementRun` AS refrun "
			."FROM Ap3dDensityData as dens "
			."LEFT JOIN ApPathData AS path "
			."  ON dens.`REF|ApPathData|path` = path.`DEF_id` "
			."LEFT JOIN ApRefinementData AS iterid "
			."  ON dens.`REF|ApRefinementData|iterid` = iterid.`DEF_id` "
			."WHERE "
			."  dens.`REF|leginondata|SessionData|session` = '$sessionId' "
			."ORDER BY dens.`DEF_id` DESC ";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function get3dDensityFromId($densityId) {
		$q="SELECT "
			."  dens.*, "
			."  path.`path` AS path, "
			."  iterid.`REF|ApRefinementRunData|refinementRun` AS refrun "
			."FROM Ap3dDensityData as dens "
			."LEFT JOIN ApPathData AS path "
			."  ON dens.`REF|ApPathData|path` = path.`DEF_id` "
			."LEFT JOIN ApRefinementData AS iterid "
			."  ON dens.`REF|ApRefinementData|iterid` = iterid.`DEF_id` "
			."WHERE "
			."  dens.`DEF_id` = '$densityId' ";
		$r=$this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getImagicReclassFromSessionId($sessionId) {
		$q="SELECT "
			."  reclass.*, "
			."  path.`path` AS path "
			."FROM ApImagicReclassifyData as reclass "
			."LEFT JOIN ApPathData AS path "
			."  ON reclass.`REF|ApPathData|path` = path.`DEF_id` "
			."LEFT JOIN ApNoRefClassRunData AS norefclass "
			."  ON reclass.`REF|ApNoRefClassRunData|norefclass` = norefclass.`DEF_id` "
			."LEFT JOIN ApNoRefRunData AS norefrun "
			."  ON norefclass.`REF|ApNoRefRunData|norefRun` = norefrun.`DEF_id` "
			."LEFT JOIN ApStackData AS stack "
			."  ON norefrun.`REF|ApStackData|stack` = stack.`DEF_id` "
			."LEFT JOIN ApRunsInStackData AS runsinstack "
			."  ON stack.`DEF_id` = runsinstack.`REF|ApStackData|stack` "
			."LEFT JOIN ApStackRunData AS stackrun "
			."  ON stackrun.`DEF_id` = runsinstack.`REF|ApStackRunData|stackRun` "
			."WHERE "
			."  stackrun.`REF|leginondata|SessionData|session` = '$sessionId' ";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getImagic3d0ReclassifiedModelsFromSessionId($sessionId) {
		$q="SELECT "
			."  model.*, "
			."  path.`path` AS path "
			."FROM ApImagic3d0Data as model "
			."LEFT JOIN ApPathData AS path "
			."  ON model.`REF|ApPathData|path` = path.`DEF_id` "
			."LEFT JOIN ApImagicReclassifyData as reclass "
			."  ON model. `REF|ApImagicReclassifyData|reclass` = reclass.`DEF_id` "
			."LEFT JOIN ApNoRefClassRunData AS norefclass "
			."  ON reclass.`REF|ApNoRefClassRunData|norefclass` = norefclass.`DEF_id` "
			."LEFT JOIN ApNoRefRunData AS norefrun "
			."  ON norefclass.`REF|ApNoRefRunData|norefRun` = norefrun.`DEF_id` "
			."LEFT JOIN ApStackData AS stack "
			."  ON norefrun.`REF|ApStackData|stack` = stack.`DEF_id` "
			."LEFT JOIN ApRunsInStackData AS runsinstack "
			."  ON stack.`DEF_id` = runsinstack.`REF|ApStackData|stack` "
			."LEFT JOIN ApStackRunData AS stackrun "
			."  ON stackrun.`DEF_id` = runsinstack.`REF|ApStackRunData|stackRun` "
			."WHERE "
			."  stackrun.`REF|leginondata|SessionData|session` = '$sessionId' ";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getImagic3d0NoRefModelsFromSessionId($sessionId) {
		$q="SELECT "
			."  model.*, "
			."  path.`path` AS path "
			."FROM ApImagic3d0Data as model "
			."LEFT JOIN ApPathData AS path "
			."  ON model.`REF|ApPathData|path` = path.`DEF_id` "
			."LEFT JOIN ApNoRefClassRunData AS norefclass "
			."  ON model. `REF|ApNoRefClassRunData|norefclass` = norefclass.`DEF_id` "
			."LEFT JOIN ApNoRefRunData AS norefrun "
			."  ON norefclass.`REF|ApNoRefRunData|norefRun` = norefrun.`DEF_id` "
			."LEFT JOIN ApStackData AS stack "
			."  ON norefrun.`REF|ApStackData|stack` = stack.`DEF_id` "
			."LEFT JOIN ApRunsInStackData AS runsinstack "
			."  ON stack.`DEF_id` = runsinstack.`REF|ApStackData|stack` "
			."LEFT JOIN ApStackRunData AS stackrun "
			."  ON stackrun.`DEF_id` = runsinstack.`REF|ApStackRunData|stackRun` "
			."WHERE "
			."  stackrun.`REF|leginondata|SessionData|session` = '$sessionId' ";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getImagic3d0Data ($imagic3d0Id) {
		$q = "SELECT  "
			."  3d0run.*, "
			."  path.`path` AS path "
			."FROM ApImagic3d0Data as 3d0run "
			."LEFT JOIN ApPathData AS path "
			."  ON 3d0run.`REF|ApPathData|path` = path.`DEF_id` "
			."WHERE 3d0run.`DEF_id` = '$imagic3d0Id' ";
		//echo $q;
		$r = $this->mysql->getSQLResult($q);
		return $r[0];
	}

	function getImagic3dRefinementRunsFromSessionId($sessionId) {
		$q="SELECT "
			."  refinement.*, "
			."  path.`path` AS path "
			."FROM ApImagic3dRefineRunData as refinement "
			."LEFT JOIN ApPathData AS path "
			."  ON refinement.`REF|ApPathData|path` = path.`DEF_id` "
			."LEFT JOIN ApNoRefClassRunData AS norefclass "
			."  ON refinement. `REF|ApNoRefClassRunData|norefclass` = norefclass.`DEF_id` "
			."LEFT JOIN ApNoRefRunData AS norefrun "
			."  ON norefclass.`REF|ApNoRefRunData|norefRun` = norefrun.`DEF_id` "
			."LEFT JOIN ApStackData AS stack "
			."  ON norefrun.`REF|ApStackData|stack` = stack.`DEF_id` "
			."LEFT JOIN ApRunsInStackData AS runsinstack "
			."  ON stack.`DEF_id` = runsinstack.`REF|ApStackData|stack` "
			."LEFT JOIN ApStackRunData AS stackrun "
			."  ON stackrun.`DEF_id` = runsinstack.`REF|ApStackRunData|stackRun` "
			."WHERE "
			."  stackrun.`REF|leginondata|SessionData|session` = '$sessionId' ";
		$r=$this->mysql->getSQLResult($q);
		return $r;
	}

	function getImagic3dRefinementParamsFromRefineId ($refineId) {
		$q = "SELECT param.*, run.*, pd.path "
			."FROM ApImagic3dRefineRunData as run "
			."LEFT JOIN ApImagic3dRefineIterationData as param "
			."ON (param.`REF|ApImagic3dRefineRunData|refinement_run`=run.`DEF_id`) "
			."LEFT JOIN ApPathData AS pd ON "
			."(run.`REF|ApPathData|path` = pd.`DEF_id`) "
			."WHERE run.`DEF_id` = '$refineId'";
		$r = $this->mysql->getSQLResult($q);

		return $r;
	}

	function getImagic3dRefinementRunsFrom3d0 ($imagic3d0Id) {
		$q = "SELECT "
			."  refinement.*, "
			."  path.`path` AS path "
			."FROM ApImagic3dRefineRunData as refinement "
			."LEFT JOIN ApPathData AS path "
			."  ON refinement.`REF|ApPathData|path` = path.`DEF_id` "
			."LEFT JOIN ApImagic3d0Data AS model "
			."  ON refinement.`REF|ApImagic3d0Data|imagic3d0run` = model.`DEF_id` "
			."WHERE "
			."  model.`DEF_id` = '$imagic3d0Id'";
		$r = $this->mysql->getSQLResult($q);

		return $r;
	}

}

function simplify($e) {
	return $e['a'].','.$e['b'].','.$e['c'];
}

function displayCTFstats($stats, $display_keys) {
	if (!is_array($stats) || !is_array($display_keys))
		return ;
	$html = "<table class='tableborder' border='1' cellspacing='1' cellpadding='5'>";
	foreach($stats as  $field=>$data) {
		if (!$head) {
			$head = true;
			$html .= "<th>\n";
			foreach($display_keys as $kh) {
				$html .= "<td><span class='datafield0'>".$kh."</span></td>";
			}
			$html .= "</th>\n";
		}
		$html .= "<tr>\n";
		$html .= "<td rowspan='".(count($data)+1)."'><span class='datafield0'>".$field."</span></td>\n";
		foreach($data as $row) {
			$html .= "<tr>\n";
			foreach($display_keys as $key) {
				if (!is_array($row))
					continue;
				if (array_key_exists($key, $row))
					$val = $row[$key];
				else
					continue;
				if (eregi('defocus', $key))
						$val = format_micro_number($val);
				if (eregi('^min|^max|^avg|^stddev', $key))
					if (eregi('defocus', $field) || eregi('nominal', $field)) {
							$val = format_micro_number($val);
					} else {
						$val = format_sci_number($val, 3);
					}
				$html .= "<td>";
				$html .= " ".$val."<br>\n";
				$html .= "</td>";
			}
			$html .= "</tr>\n";
		}
		$html .= "</tr>\n";
	}
	$html .= "</table>";
	return $html;
}

function displayCTFdata($data, $display_keys) {
	$html = "<table class='tableborder' border='1' cellspacing='1' cellpadding='5'>";
		$html .= "<tr>\n";
		foreach($display_keys as $key) {
			$html .= "<th>";
			$html .= " ".$key."<br>\n";
			$html .= "</th>";
		}
		$html .= "</tr>\n";
		$html .= "<tr>\n";
		foreach($data as $row) {
			foreach($display_keys as $key) {
					$val = $row[$key];
					if (eregi('defocus', $key)) {
							$val = format_micro_number($val);
					}
				$html .= "<td>";
				$html .= " ".$val."<br>\n";
				$html .= "</td>";
			}
			$html .= "</tr>\n";
		}
	$html .= "</table>";
	return $html;
}
?>

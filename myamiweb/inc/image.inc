<?
/**
 *	@version $Revision: 1.16 $
 *	@version $Id: image.inc,v 1.16 2005-01-24 22:55:19 dfellman Exp $
 */
/**
 *	Tools to display images / mosaic
 *	
 */

require_once("config.php");
require_once("inc/util.inc");
require_once('inc/filter.inc');
require_once('inc/graphutil.inc');
require_once('inc/scalebar.inc');

function getImage($sessionId, $imageId, $preset, $params = array()) {

	$p = array (
		'size'=> '',
		'minpix' => 0,
		'maxpix' => 255,
		'filter' => 'default',
		'fft' => false,
		'colormap' => false,
		'binning' => 'auto',
		'scalebar' => true,
		'displaytargets' => true,
		'loadtime' => false
	);
	if (is_array($params))
		foreach ($params as $k=>$v)
			$p[$k] = $v;

	$size = $p[size];
	$binning = $p[binning];

	$leginondata = new leginondata();
	// --- get image path
	$path = $leginondata->getImagePath($sessionId);

	// --- find image
	$newimage = $leginondata->findImage($imageId, $preset);
	$imageId = $newimage[id];
	$parent = $leginondata->getImageInfo($newimage[childid]);

	// --- get filename
	if ($p[fft]) {
		$p[displaytargets]=false;
		$p[scalebar]=false;
		$fft = $leginondata->getImageFFT($imageId);
		$filename = $fft[fftimage];
	} else {
		$filename = $leginondata->getFilenameFromId($imageId);
	}

	$pic = $path.$filename;
	if (@is_file($pic)) {
		$imginfo = $leginondata->getImageInfo($imageId);
		$dimx = $imginfo[dimx];

		if ($p[loadtime])
			$begin=getmicrotime();

		if ($binning=='auto')
			$binning = ($dimx > 1024) ? (($dimx > 2048) ? 4 : 2 ) : 1;
//		$img = imagecreatefrommrc($pic, $p[minpix], $p[maxpix], $p[colormap], $binning);
		if (function_exists($p[filter]))
			$img = $p[filter]($pic, $p[minpix], $p[maxpix], $p[colormap], $binning);
		else
			$img = getdefault($pic, $p[minpix], $p[maxpix], $p[colormap], $binning);

		if ($size) {
			$scalefactor = (imagesx($img)) ? $size/imagesx($img) : 1;
			imagescale($img, $scalefactor);
		}

		if ($p[loadtime])
			$end=getmicrotime();

		$white = imagecolorallocate($img, 255, 255, 255);
		$blue = imagecolorallocate($img, 0, 255, 255);
		$yellow= imagecolorallocate($img, 255, 255, 0);
		if ($p[displaytargets]) {
		    $targets = $leginondata->getImageTargets($imageId);
		    if ($targets = $leginondata->matchVersionTargets($targets))
		    foreach ($targets as $target) {
			$tId=$target[childId];
			$targetinfo = $leginondata->getImageInfo($tId);
			$targetcal = $leginondata->getImageMatrixCalibration($tId);
			$parentcal = $leginondata->getImageMatrixCalibration($imageId);
			$truediam=$targetinfo[targetdiam];
			$truedim=$targetinfo[targetdim];
			if (abs($target[x]-$parent[targetx])<5
				&& abs($target[y]-$parent[targety])<5 ){
				$col = $blue;
				$crosscol = $yellow;
			} else {
				$col = $white;
				$crosscol = $white;
			}
			$tn = $target[tnumber];
			$ratioX = ($size) ? $size/$target[dimx] : (($binning) ? 1/$binning : 1);
			$ratioY = ($size) ? $size/$target[dimy] : (($binning) ? 1/$binning : 1);
			$cx = $target[x]*$ratioX;
			$cy = $target[y]*$ratioY;

			if ($tId) {
				$angle = $targetcal['angle']-$parentcal['angle'];
				$squarepoints = getsquarepoints($cx, $cy, $angle, $truedim*$ratioX);
				drawsquare($img, $squarepoints, $crosscol);
				$ctx = $squarepoints[0]+1;
				$cty = $squarepoints[1]+1;
			} else {
				$crosssize=20;
				$ctx = $cx+$crosssize/2;
				$cty = $cy;
				drawcross($img, $cx, $cy, $crosssize*$ratioX, $crosscol);
			}
			imagestringshadow($img, 4, $ctx, $cty, $tn, $col);
			
		    }
		    if ($targets = $leginondata->getImageFocusTargets($imageId, true)) 
		    foreach ($targets as $target) {
			$tgn=$target[tversion];
			$tn='focus'."  ".$tgn;
			if (abs($target[x]-$parent[targetx])<5
				&& abs($target[y]-$parent[targety])<5 ){
				$col = $blue;
				$crosscol = $yellow;
			} else {
				$col = $white;
				$crosscol = $white;
			}
			$ratioX = ($size) ? $size/$target[dimx] : (($binning) ? 1/$binning : 1);
			$ratioY = ($size) ? $size/$target[dimy] : (($binning) ? 1/$binning : 1);
			$cx = $target[x]*$ratioX;
			$cy = $target[y]*$ratioY;

			$crosssize=20;
			$ctx = $cx+$crosssize/2;
			$cty = $cy;
			drawcross($img, $cx, $cy, $crosssize*$ratioX, $crosscol);
			imagestringshadow($img, 4, $ctx, $cty, $tn, $col);
		    }
		}
		if ($driftdirection=0) {
		    if ($targets = $leginondata->getImageFocusTargets($imageId, true)) {

			$ratioX = ($size) ? $size/$target[dimx] : (($binning) ? 1/$binning : 1);
			$ratioY = ($size) ? $size/$target[dimy] : (($binning) ? 1/$binning : 1);
			$vert = imagecolorallocate($img, 0, 255,0);
			$rouge= imagecolorallocate($img, 255,0,0);

		    foreach ($targets as $target) {
			$tgn=$target[tversion];
			$cx = $target[x]*$ratioX;
			$cy = $target[y]*$ratioY;
			$d[$tgn][] = array('x'=>$cx,'y'=>$cy);
		}
			foreach($d as $point) {
			/*
				$li = count($d[$n])-1;
				$cx1 = $d[$n][0]['x'];
				$cy1 = $d[$n][0]['y'];
				$cx = $d[$n][$li]['x'];
				$cy = $d[$n][$li]['y'];
			*/
				$li = count($point)-1;
				$cx1 = $point[0][x];
				$cy1 = $point[0][y];
				$cx = $point[$li][x];
				$cy = $point[$li][y];
				$arrow = new arrow ($img, $cx1,$cy1, $cx, $cy, $vert);
				$arrow->draw();
			}

			if (is_Array($d))
				foreach($d as $k=>$point) {
					foreach ($point as $p) 
						imageline ( $img, $p[x], $p[y], $p[x], $p[y], $rouge);
				}


	//		$t[] = $targets[0];
	//		$t[] = $targets[count($targets)-1];

		/*
			$x1 = $t[0][x]+10;
			$y1 = $t[0][y]+10;
			$x2 = $t[1][x]-10;
			$y2 = $t[1][y]-10;
		*/

			}
		}

		/* diplay loading time */
		if ($p[loadtime])
			imagestringshadow($img, 4, 10, 10, "load time: ".($end-$begin), $blue);

		/* display scale bar */
		if ($p[scalebar]) {
		    if ($imginfo) {
			$size = ($size) ? $size : (($binning) ? $imginfo[dimx]/$binning : $imginfo[dimx]);
			if (!$size)
				$size=1;
			$ratio = $imginfo[dimx]/$size ;
			$value = $imginfo[pixelsize]*$imginfo[binning]*$ratio;
			$scalebar = new ScaleBar($img, $size, $value);
			$scalebar->display();
		    }
		}
	} else {
		$img = blankimage();
	}
	return $img;

}

function blankimage($w=256, $h="") {
	if (!$h)
		$h=$w;
	$blkimg = imagecreate($w, $h);
	imagecolorallocate($blkimg, 255, 255, 255);
	return $blkimg;
}

function createAltMessage($text, $fontsize=2, $margin=6) {
	$width = 2*$margin + strlen($text)*($fontsize+4);
	$height = 2*$margin + $fontsize+12; 
	$img = imagecreate($width, $height);
	imagecolorallocate($img, 255, 255, 200);
	$black = imagecolorallocate($img, 0, 0, 0);
	$textcolor = $black;
	imagerectangle($img, 0,0, $width-1, $height-1, $black);
	imagestring($img, $fontsize, $margin, $margin, $text, $textcolor);
	return ($img);
}

function resample($source, $new_width="", $new_height="") {
	header("Content-type: image/x-png");
	$width = imagesx($source);
	$height = imagesy($source);
	if ($new_width)
		$new_height = ($new_height) ? $new_height : $height / $width * $new_width;
	if ($new_height)
		$new_width = ($new_width) ? $new_width : $width / $height * $new_height;

	if ($new_width && $new_height) {
		$dest = imagecreatetruecolor($new_width,$new_height);
		imagecopyresampled($dest,$source,0,0,0,0,$new_width,$new_height,$width,$height);
		imagepng($dest);
		imagedestroy($dest);
	} else imagepng($source);

	imagedestroy($source);
}

class Mosaic {

	var $imageIds = array();
	var $ratio  = 4;
	var $margin = 50;
	var $displayframe = true;
	var $displayscalebar = true;
	var $loadtime = false;
	var $framecolor = 0x00FF00;
	var $params = array('scalebar'=>false);

	function Mosaic() {
		
	}

	function setImageIds($imageIds) {
		$this->imageIds = $imageIds;
	}

	function setCurrentImageId($cId) {
		$this->cId = $cId;
	}

	function displayFrame($bool) {
		$this->displayframe = $bool;
	}

	function displayScalebar($bool) {
		$this->displayscalebar = $bool;
	}

	function displayLoadtime($bool) {
		$this->loadtime = $bool;
	}

	function setFrameColor($r, $g, $b) {
		$this->framecolor = (($r << 16) + ($g << 8) + $b);
	}

	function setRatio($ratio) {
		$this->ratio = $ratio;
	}
	
	function setSize($size) {
		$this->size = $size;
	}
	
	function setMargin($margin) {
		$this->margin = $margin;
	}

	function setImageParams($params) {
		if (is_array($params))
			$this->params = $params;
	}

	function getMosaic($fromImg="") {
		if (!$this->imageIds)
			return blankimage();
		if ($this->loadtime) 
			$begin=getmicrotime();
		$leginondata = new leginondata();
		$imageinfo = array();
		$drows = array();
		$dcols = array();
		$dst_x = 0;
		$dst_y = 0;
		$src_x = 0;
		$src_y = 0;
		$angle = 0;

		$ratio = ($this->ratio) ? $this->ratio : 1;
		$margin = $this->margin;

		foreach($this->imageIds as $k=>$v) {
			$curimageinfo = $leginondata->getImageInfo($v);
			$dr = $curimageinfo['delta row'];
			$dc = $curimageinfo['delta column'];
			if (is_null($dr) || is_null($dc))
				continue;
			$imageinfo[] = $curimageinfo;
			$drows[] = $dr;
			$dcols[] = $dc;
		}

		if ($drows && $dcols) {
			$min_row = min($drows) - $imageinfo[0][dimy]/2;
			$max_row = max($drows) + $imageinfo[0][dimy]/2;
			$min_col = min($dcols) - $imageinfo[0][dimx]/2;
			$max_col = max($dcols) + $imageinfo[0][dimx]/2;
		}

		if ($this->size) {
			$max_w = (2*$margin + $max_col - $min_col);
			$ratio = $max_w/$this->size;
		}

		$img_w = (2*$margin + $max_col - $min_col)/$ratio;
		$img_h = (2*$margin + $max_row - $min_row)/$ratio;
		$img = imagecreatetruecolor($img_w, $img_h);
		$background = imagecolorallocate($img, 0, 0, 0);
		$crosscol = imagecolorallocate($img, 255, 255, 0);
		$blue = imagecolorallocate($img, 0, 255, 255);
		if ($this->displayframe)
			$mosaicframecol = imagecolorallocate($img,
						($this->framecolor >> 16) & 0xFF,
						($this->framecolor >> 8) & 0xFF,
						$this->framecolor & 0xFF
						);

		$sessionId = $imageinfo[0][sessionId];
		$squaresize = $imageinfo[0][dimx]/$ratio;
		$this->params['size'] = $squaresize;
		$this->params['binning'] =  ($ratio<1) ? 1 : $ratio;

		if ($fromImg)
			$img = $fromImg;
		else {
		    foreach ($imageinfo as $k=>$r) {
			$cx = ($margin + $dcols[$k] - $min_col)/$ratio; 
			$cy = ($margin + $drows[$k] + $max_row)/$ratio;
			$squarepoints = getsquarepoints($cx, $cy, $angle, $squaresize);
			$dst_x = $squarepoints[0];
			$dst_y = $squarepoints[1];
//			if ($k <3 ) {
			$gimg = getImage($sessionId, $r[imageId], $preset, $this->params);
//			} else if ($k>15){
//				$gimg = imagecreatefrommrc($myfile, 0, 255, 0, 4);
			//	$gimg = getImage($sessionId, $r[imageId], $preset, $this->params);
//			} else {
//				$gimg = imagecreatetruecolor(50,50);
//			}
			$src_w = imagesx($gimg);
			$src_h = imagesy($gimg);
			imagecopy($img, $gimg, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h);
			imagedestroy($gimg);
			if ($this->displayframe) {
				if ($this->cId==$r[imageId]) {
					$crossquare = $squarepoints;
					$cdx = $dst_x+1;
					$cdy = $dst_y;
					$cnb =$k+1;
				}
				drawsquare($img, $squarepoints, $mosaicframecol);
				imagestringshadow($img, 4, $dst_x+1, $dst_y, $k+1, $mosaicframecol);
			}
		    }
		}

		if ($crossquare) {
			$col = $crosscol;
			drawsquare($img, $crossquare, $crosscol);
			imagestringshadow($img, 4, $cdx, $cdy, $cnb, $blue);
		}

		/*
		if ($this->displayscalebar) {
			$size = $squaresize;
			$value = $imageinfo[0][pixelsize]*$imageinfo[0][binning]*$ratio;
			$scalebar = new ScaleBar($img, $size, $value);
			$scalebar->display($img_h-20);
		}
		*/
		if ($this->displayscalebar) {
			$size = ($max_row - $min_row)/$ratio;
			$value = $imageinfo[0][pixelsize]*$imageinfo[0][binning]*$ratio;
			$scalebar = new ScaleBar($img, $size, $value);
			$scalebar->display($img_h);
		}
		if ($this->loadtime) {
			$end=getmicrotime();
			imagestringshadow($img, 4, 10/$ratio, 10/$ratio, "load time: ".($end-$begin), $mosaicframecol);
		}
		return $img;
	}
}
?>

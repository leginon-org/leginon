#!/usr/bin/env python

#
Env_Override = True

#Set the path to the appion root directory.
Appion_Dir = ''

#If you have EMAN installed an would like to use it with appion set this
#configuration parameter to the directory where you installed it.
Eman_Dir = ''

#Set Xmipp's root installation directory. 
Xmipp_Dir = ''

#To use ACE you must indeicate the MatLab installation directory.  This is
#only need for ACE 1, it does not need to be set if your only using ACE2.
Matlab_Dir = ''


#Set Spider's root installation directory.
Spider_Dir = ''

#If you wish to have python search additional direcotries for module files,
#specify the full path to the directory here.  Seperate multiple directories
#by a colon ":".
Python_Path = ''

#You can change the path to the standard python libraries.  Only change this
#in you know what you are doing
Python_Home = ''

#If you'd like to prepend any directories to the PATH environment varialbe
#add them here sperated by a colon ':'.
Path = ''


##################### End of Configuration section. ########################
################ Do not alter anything below this line.#####################
import os
import sys
import subprocess
import glob

##Two usefull functions for appending and prepending to environment
##variables

##prependToEnv ();
## 
def prependToEnv (envVar, newString):

    if (not os.environ.has_key(envVar) or os.environ[envVar] == ''):
        os.environ[envVar] = newString

    else:
        os.environ[envVar] = newString + ':' + os.environ[envVar]


def appendToEnv (envVar, newString):

    if (not os.environ.has_key(envVar) or os.environ[envVar] == ''):
        os.environ[envVar] = newString

    else:
        os.environ[envVar] = os.environ[envVar] + ':'+ newString

#Check if wrapper was called with min number of arguments
if ( 2 > len(sys.argv)):
    sys.stderr.write("Usage: %s <COMMAND> [options]\n" %  os.path.basename(sys.argv[0]))
    sys.exit (1)
    

##Set up the runtime environment base on configuration parameters provided
## above

#If Env_Override is enabled change any configuration paramters for which
#an environment variable has been set.
if (Env_Override):

    if (os.environ.has_key('APPION')):
         Appion_Dir = os.environ['APPION']

    if (os.environ.has_key('EMANDIR')):
        Eman_Dir = os.environ['EMANDIR']

    if (os.environ.has_key('SPIDER')):
        Spider_Dir = os.environ['SPIDER']


else:
    #clear any evironment variables we don't want set if
    #not using Env_Override
    if (os.environ.has_key('PYTHONHOME')):
        del (os.environ['PYTHONHOME'])

        
#Appion_Dir needs to been defined otherwise nothing will work.  So if 
#it hasn't been set somewhere above, try to determine it.
if (Appion_Dir == '' or (not os.path.exists(os.path.join (Appion_Dir, 'bin')))):
    #find the real absolute path to this wrapper even if it was started via a sim link
    #of using a relative path.
    appionBinDir = os.path.dirname(os.path.realpath(sys.argv[0]))

    #At this point we'll assume the directory directly above the one  
    #where this script resides is a valid appion directory.
    Appion_Dir = os.path.dirname(appionBinDir)    

Appion_Bin_Dir = os.path.join(Appion_Dir, 'bin')
Appion_Lib_Dir = os.path.join(Appion_Dir, 'lib')


#If we still can't seem to find a valid Appion installation directory,
#bail out.
if (not os.path.exists(Appion_Bin_Dir) or not os.path.exists (Appion_Lib_Dir)):
    sys.stderr.write("Error:  Can't determine Appion directory\n")
    sys.exit(1)


prependToEnv('PATH', Appion_Bin_Dir)
prependToEnv('PYTHONPATH', Appion_Lib_Dir)
appendToEnv('MATLABPATH', os.path.join(Appion_Dir, 'ace'))

if (Matlab_Dir != ''):
    prependToEnv('PATH', os.path.join(Matlab_Dir, 'bin'))
    appendToEnv('LD_LIBRARY_PATH', os.path.join(Matlab_Dir, 'bin', 'glnxa64')) 

if (Eman_Dir != ''):
    prependToEnv('LD_LIBRARY_PATH', os.path.join(Eman_Dir, 'lib'))
    prependToEnv('PATH', os.path.join(Eman_Dir, 'bin'))
    prependToEnv('PYTHONPATH', os.path.join(Eman_Dir, 'lib'))
    
if (Xmipp_Dir != ''):
    prependToEnv('LD_LIBRARY_PATH', os.path.join(Xmipp_Dir, 'lib'))
    prependToEnv('PATH', os.path.join(Xmipp_Dir, 'bin'))
                 
if (Spider_Dir != ''):
    os.environ['SPPROC_DIR'] = os.path.join(Spider_Dir, 'proc')
    os.environ['SPRGB_DIR'] =  os.path.join(Spider_Dir,'rgb')
    os.environ['SPMAN_DIR'] =  os.path.join(Spider_Dir,'man')

if (Python_Path != ''):
    prependToEnv('PYTHONPATH', Python_Path)

if (Path != ''):
    prependToEnv('PATH', Path)
    
if (Python_Home != ''):
    os.environ['PYTHONHOME'] = Python_Home

## End Environment set up section ###

#Anything in the Appion bin directory that ends in .py can be called
#can be run via this wrapper.  Find all those functions
globString = os.path.join(Appion_Bin_Dir, '*.py')
functionList = glob.glob(globString)

#The first argument to this wrapper should be the command (or function)
#the user wants to execute.  If it doesn't end in .py add it.
if ('py' == sys.argv[1].split('.').pop()):
    command = sys.argv[1].lower()

else:
    command = sys.argv[1].lower() + '.py'

#Varialbe to hold the name of appion program to run
AppionProg = ''


for func in functionList:
    f = os.path.basename(func)
    if (command == f.lower()):
        AppionProg = func
        break
    
if (AppionProg == ''):
    sys.stderr.write("Error: Unknown Command %s.\n" % sys.argv[1])
    sys.exit(1)

try:
    commandLine = [AppionProg] + sys.argv[2:]
    rcode = subprocess.call(commandLine)
    sys.exit(rcode)

except OSError:
    sys.stderr.write("Could not run command %s\n" % sys.argv[1])
    sys.exit(2)

#
#except NameError:
#    sys.stderr.write("Error: Unknown Command %s.\n" % sys.argv[1])
#    sys.exit(1)

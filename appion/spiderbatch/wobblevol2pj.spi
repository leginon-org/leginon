(x20,x21,x50,x51)  ;+/-wobble,wobblestep,+/-shift,shiftstep
; Syntax: @wobblevol2pj(ang,angstep,sh,shstep)
; Description:
;   1. generates projections of a volume with rotation/shift about its center of gravity (integer)
;   - uses integer shift for centering to avoid interpolation of volume
;   if all axis rotation selected then output is a stack of up to 99999 images
;   2. shifts in x and y dimensions
; Output:
;   stack of projections
;   doc file containing angles and shifts applied to the centered volume

FR
?IN.Volume to wobble (dir/vol)?<vol>
FR
?IN.Stationary volume (dir/volume)?<statvol>
FR
?IN.Initial orientation (phi,theta,psi) from Web surface (dir/doc)?<angle>
RR x19
?IN.Axis of wobble (X=1,Y=2,Z=3,all=0)?
FR
?OUT.Projection prefix (dir/prj doc and @*****)?<prjpfx>

; ~~~~~ start ~~~~~

; --- initialize ---
x23=0 ; zero

; determine number of steps needed given step size and range - alter step if necessary
IF(x20.eq.0)x21=0  ; if rt-range is = then so is step size
IF(x21.ne.0)THEN
  x22=INT((x20*2)/x21)+1 ; integer number of wobble-steps + initial position
  x21=x20*2/(x22-1) ; actual wobblestep size
ELSE
  x22=1
ENDIF
VM
echo Actual wobble is {%F7.1%x21} degrees per step and {%F7.1%x22} steps.

IF(x50.eq.0)x51=0 ; if sh-range is 0 then so is step size
IF(x51.ne.0)THEN
  x52=INT((x50*2)/x51)+1 ; integer number of shift-steps + initial position
  x51=x50*2/(x52-1)      ; actual shift step size
ELSE
  x52=1
ENDIF
VM
echo Actual shift is {%F7.1%x51} pixels per step and {%F7.1%x52} steps.

; how many combinations
x47=x22  ; x-axis steps
x48=x22  ; y-axis steps
x49=x22  ; z-axis steps
IF(x19.eq.1)THEN ; x-axis only
  x48=1
  x49=1
ENDIF
IF(x19.eq.2)THEN ; y-axis only
  x47=1
  x49=1
ENDIF
IF(x19.eq.3)THEN ; z-axis only
  x47=1
  x48=1
ENDIF
x41=x47*x48*x49*x52*x52 ; total combinations
VM
echo Generating {%F8.1%x41} X-Y-Z rotations and X-Y shifts.

;find max size for projection (x27)
FS
<vol>
FI x27,x28,x29
<vol>
(12,2,1) ; nsam,nrow,nslice

IF(x27.lt.x28) x27=x28 ; nrow(x28) is larger dimension
IF(x29.ge.x27) x27=x29 ; nslice(x29) is largest dimension

x41=x41+1
SD IC NEW
prjdoc
(12),x41

MS
_3@
x27,x27,(1)
x41

; convert web-surface orientation to pj3q orientation
UD 1,x24,x25,x26
<angle>
UD E
SA E x24,x25,x26
x24,x25,x26 ; starting orientation
(0,90,90) ; shift view from nsam to nslice axis

; --- generate projection of static volume
;SD IC NEW
;wobbletemp
;(3),(1)
;SD IC 1,x26,x25,x24
;wobbletemp

;PJ 3Q
;<statvol>
;x27 ; radius of volume
;(1)
;wobbletemp
;_*

;CP
;_1
;_4 ; static volume

PJ 3
<statvol>
(x27,x27)
_4
(x24,x25,x26) ;phi,tta,psi

; --- now center and wobble moving volume
CG 3 x28,x29,x30
<vol>
(0)
x28=-INT(x28) ;x
x29=-INT(x29) ;y
x30=-INT(x30) ;z

SH
<vol>
_5
x28,x29,x30

;VM
;echo Center <vol>...{%F7.3%x28}, {%F7.3%x29}, {%F7.3%x30}

; find shift to restore after wobble [-x41,-x42,-x43]
SA 3 x34,x35,x36,x41,x42,x43
(0,0,0)
x28,x29,x30 ;first sh for centering
x24,x25,x26 ;first rt for orientation
(0,0,0)

;VM
;echo New center is...{%F7.3%x41}, {%F7.3%x42}, {%F7.3%x43}

; --- now wobble and make projections ---
x40=0 ; projection counter

x33=0 ; no z-rt
x32=0 ; no y-rt
x31=0 ; no x-rt
x53=0 ; no x-sh
x54=0 ; no y-sh

DO LB2 x12=1,x49 ; --- z-axis wobble ---
  IF(x49.gt.1) x33=-x20+x21*(x12-1) ; increment z-angle

  ;SA E x34,x35,x36
  ;x24,x25,x26 ;initial orientation
  ;x33,x23,x23 ;z rt for projection

  DO LB3 x13=1,x48 ; --- y-axis wobble ---
    IF(x48.gt.1) x32=-x20+x21*(x13-1) ; increment y-angle

    SA E x37,x38,x39
    x33,x23,x23 ;z rt for projection
    x23,x32,x23 ;y rt for projection

    DO LB4 x14=1,x47 ; --- x-axis wobble ---
      IF(x47.gt.1) x31=-x20+x21*(x14-1) ; increment x-angle

      x44=90
      x45=-x31
      x46=270
      SA E x44,x45,x46
      x37,x38,x39 ;z-axis rt + y-axis rt
      x44,x45,x46 ;x rt for projection

      SA 3 x58,x59,x60,x61,x62,x63
      x24,x25,x26 ; initial rt for orientation
      x41,x42,x43 ; initial cg-shift (after orientation)
      x44,x45,x46 ; summed rotation (x + y + z)
      (0),(0),(0)

      ;SD IC 1,x60,x59,x58
      ;wobbletemp

      ;PJ 3Q
      ;_5 ; centered volume
      ;x27 ; radius of volume
      ;(1)
      ;wobbletemp
      ;_*
      
      PJ 3
      _5
      (x27,x27)
      _1
      (x58,x59,x60)

      DO LB5 x15=1,x52 ; for each x-shift
        IF(x52.gt.1) x53=-x50+x51*(x15-1) ; increment x-shift

        DO LB6 x16=1,x52 ; for each y-shift
          IF(x52.gt.1) x54=-x50+x51*(x16-1) ; increment y-shift

          x55=x53-x41 ; x-sh and x-uncg
          x56=x54-x42 ; y-sh and y-uncg
          x57=(0)-x43 ; z-sh and z-uncg

          ; shift and add projection
          SH
          _1  ; centered projection
          _2  ; uncentered-shifted projection
          x55,x56

          x40=x40+1
          AD
          _4   ; static projection
          _2    ; uncentered-shifted projection
          _3@{*****x40}
          *

          x64=x61+x55
          x65=x62+x56
          x66=x63+x57

          ;VM
          ;echo -n Cumulative shift is {%F7.3%x64}, {%F7.3%x65}, {%F7.3%x66}' '
          ;SA 3 x58,x59,x60,x64,x65,x66
          ;x24,x25,x26 ; initial rt for orientation
          ;x41,x42,x43 ; initial cg-shift (after orientation)
          ;x44,x45,x46 ; summed rotation (x + y + z)
          ;x55,x56,x57 ; intended shift + un-cg (x + y + z)
          ;VM
          ;echo equals {%F7.3%x64}, {%F7.3%x65}, {%F7.3%x66}

          ;         num,xrt,yrt,zrt,xsh,ysh,phi,the,psi,xsh,ysh,zsh
          SD IC x40,x40,x31,x32,x33,x53,x54,x58,x59,x60,x64,x65,x66
          prjdoc

        LB6 ; for each y-shift
      LB5 ; for each x-shift

    LB4 ; next x rotation
  LB3 ; next y rotation
LB2 ; next z rotation

SD IC COPY
prjdoc
<prjpfx>doc
SD IC END
prjdoc
;SD IC END
;wobbletemp
CP
_3@
<prjpfx>@
DE
_3

RE

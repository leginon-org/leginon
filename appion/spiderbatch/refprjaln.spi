; refalign SCRIPT 
; MODIFIED 20060627
;
; STEPS
; 1 CALCULATE ANGLES AND REFERENCE PROJECTIONS (VO EA TO PJ 3Q)
; 2 ALIGN PROJECTIONS WITH PARTICLES (AP SH)
; 3 COUNT PARTICLES THAT ALIGN TO EACH PROJECTION (COUNTING LOOP)
; OUTPUT
; 1 ANGLES_DOC AND PROJECTIONS OF REFERENCE PROJECIONS
; 2 ALIGNMENT DOC
; 3 COUNT DOC
;

RR x91
?IN.Number of pcls to align (# or 0 for list)?
x81 = 0
x84 = 1
IF(x91.LE.0) THEN
  FR
  ?IN.LIST OF PARTICLES TO BE ALIGNED (dir/file)?<filelist>
  UD N x81
  <filelist>
  UD IC 1,x84
  <filelist>
  UD ICE
  <filelist>
  VM
  echo Will align {%F7.1%x81} particles from <filelist>
ENDIF
FR
?IN.Particles template (dir/ser*****)?<prtcltmplt>
FR
?IN.REFERENCE VOLUME (dir/file)?<referencevolume>
RR x80
?IN.PARTICLE RADIUS (#)?
FR
?OUT.OUTPUT FOLDER (dir)?<outputfolder>

; ~~~~~ start ~~~~~
; CHECK DIMENSIONS OF FIRST PARTICLE
FS
<prtcltmplt>x84
FI x82,x83
<prtcltmplt>x84
12,2

VM
echo Images are {%F7.1%x83} NSAM by {%F7.1%x82} NROW


; MAKE DIRECTORY FOR OUTPUT
IQ FI x90
<outputfolder>/refprj/prj_doc
IF (x90.EQ.1) THEN
VM
echo Previous result exists...ending script
;rm -fr <outputfolder>
EN
ENDIF
VM
echo Creating output folder...
VM
mkdir <outputfolder>
VM
mkdir <outputfolder>/refprj

; CALCULATE PROJECTION ANGLES
VM
echo Calculating projection angles...
VO EA
15     ; DELTA THETA
0,90   ; RANGE THETA
0,359.9     ; RANGE PHI
<outputfolder>/refprj/prj_doc     ; OUTPUT DOC

; HOW MANY PROJECTIONS
UD N,x90
<outputfolder>/refprj/prj_doc
UD E

; CALCULATE PROJECTIONS
VM
echo Generating reference projections...
PJ 3Q
<referencevolume>                ; INPUT REFERENCE VOLUME
60                               ; RADIUS OF VOLUME
1-x90                            ; SELECTION OF ANGLES OR DOC
<outputfolder>/refprj/prj_doc    ; INPUT ANGLES PHI THETA PSI
<outputfolder>/refprj/prj***     ; PROJECTIONS TEMPLATE

x84=((x82/2)-x80-2) ; IMAGE RADIUS MINUS PARTICLE RADIUS MINUS 2

; ALIGN PROJECTIONS AND PARTICLES
VM
echo Aligning projections and particles...
VM
echo First ring 5.0, Last ring {%F7.1%x80}, Translation range {%F7.1%x84}

IF(x91.GT.x81) THEN

AP SH
<outputfolder>/refprj/prj***     ; REFERENCE PROJECTIONS TEMPLATE
1-x90                            ; SELECTION OF REFERENCE PROJECTIONS OR DOC
x84,1                             ; TRANSLATION RANGE AND STEP SIZE
5,x80                             ; FIRST AND LAST RING
<outputfolder>/refprj/prj_doc    ; REFERENCE ANGLES
<prtcltmplt>                     ; PARTICLES TEMPLATE
1-x91                            ; SELECTION OF PARTICLES OR DOC
*                                ; PARTICLES ALIGNMENT
0.0                              ; ANGLE RANGE AND THRESHOLD
1                                ; MIRRORED (1 IS YES)
<outputfolder>/apsh_doc          ; ALIGNMENT OUTPUT DOC

ELSE

AP SH
<outputfolder>/refprj/prj***     ; REFERENCE PROJECTIONS TEMPLATE
1-x90                            ; SELECTION OF REFERENCE PROJECTIONS OR DOC
x84,1                             ; TRANSLATION RANGE AND STEP SIZE
5,x80                             ; FIRST AND LAST RING
<outputfolder>/refprj/prj_doc    ; REFERENCE ANGLES
<prtcltmplt>                     ; PARTICLES TEMPLATE
<filelist>                            ; SELECTION OF PARTICLES OR DOC
*                                ; PARTICLES ALIGNMENT
0.0                              ; ANGLE RANGE AND THRESHOLD
1                                ; MIRRORED (1 IS YES)
<outputfolder>/apsh_doc          ; ALIGNMENT OUTPUT DOC

ENDIF

; GROUP PARTICLES INTO CLASSES
VM
echo Alignment complete. Sorting particles to best reference...

;;;;;;;;;;;BEGIN SORTING AND COUNTING MODULE;;;;;;;;;;;;
; COUNTING LOOP SORTS PARTICLES INTO CLASSES FROM AP SH
; AND ROTATES THEM ACCORDING TO AP SH PARAMETERS

DOC SORT
<outputfolder>/apsh_doc
<outputfolder>/apshsort_doc
4
Y

; SAVE LIST HEADER
SD /     class      positive      mirror
<outputfolder>/view_count

; CLASS TRACKER
x94=0

; FOR EACH PARTICLE
UD N,x91
<outputfolder>/apshsort_doc
UD E

DO LB1 x11=1,x91

UD IC,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26
<outputfolder>/apshsort_doc

x16=ABS(x16) ; ADJUSTS FOR DIFFERENT SPIDER VERSIONS

; IS THIS A NEW CLASS
IF (x94.LT.x15) THEN

; CLOSE PREVIOUS CLASS AND WRITE COUNTER (NOT ON FIRST LOOP)
  IF (x11.NE.1) THEN
  SD E
  <outputfolder>/view+{***x94}
  SD E
  <outputfolder>/view-{***x94}
  SD x94,x94,x92,x93
  <outputfolder>/view_count
  ENDIF

; RESET COUNTER
x92=0 ; NONMIRROR COUNTER
x93=0 ; MIRROR COUNTER
x94=x15

ENDIF

; MIRROR OR NOT
IF (x26.GE.0) THEN

; NONMIRROR CLASS COUNTER
  IF (x92.EQ.0) THEN
  SD /     particle      class      mirror     cc
  <outputfolder>/view+{***x15}
  ENDIF

x92=x92+1

; SAVE PARTICLE TO CLASS
SD x92,x16,x15,x26,x22
<outputfolder>/view+{***x15}

RT SQ
<prtcltmplt>x16
<outputfolder>/rtp@{*****x16}
x17,1.0
x18,x19

ELSE

; MIRROR CLASS COUNTER
  IF (x93.EQ.0) THEN
  SD /     particle      class      mirror     cc
  <outputfolder>/view-{***x15}
  ENDIF

x93=x93+1

; SAVE PARTICLE TO CLASS
SD x93,x16,x15,x26,x22
<outputfolder>/view-{***x15}

RT SQ
<prtcltmplt>x16
<outputfolder>/rtp@{*****x16}
x17,1.0
x18,x19

ENDIF

; END LOOP FOR EACH PARTICLE
LB1

; SAVE LAST CLASS
SD x94,x94,x92,x93
<outputfolder>/view_count

; CLOSE RESULTS DOCS
SD E
<outputfolder>/view+{***x15}
SD E
<outputfolder>/view-{***x15}
SD E
<outputfolder>/view_count

; CLOSE ALIGNMENT DOC
UD ICE
<outputfolder>/apshsort_doc
;;;;;;;;;;END SORTING AND COUNTING MODULE;;;;;;;;

VM
echo Particles aligned and class averaged.

RE

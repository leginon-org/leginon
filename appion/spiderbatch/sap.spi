; sum alignment parameters
; for each particle in second alignment
; find transformations in prior alignment
; sum transformations 
;(ORDER OF TRANSFORMATION IS ESSENTIAL)
; 1) format of 1st alignment doc
; 2) format of 2nd alignment doc
; 3) output doc in cumulative format (pclnum,rt,xsh,ysh)
; formats:
; 1)APSH/APREF takes rt,x,y from regs 12,13,14 and pclnum from reg 5
; 2)APNQ takes rt,x,y from regs 3,4,5 and pclnum from reg 6
; 3)APSR takes rt,x,y from regs 1,2,3 and pclnum from pcllist_doc reg 1
; 4)SAP takes rt,x,y from regs 2,3,4 and pclnum from reg1
; 5)MAN takes rt,x,y from regs 1,2,3 first key only

FR ; [type1]
?IN.FORMAT OF FIRST TRANSFORMATION DOC (APSH/APREF=1,APNQ=2,APSR=3,SAP=4,MAN=5)?[type1]
x21=[type1]
IF(x21.eq.3)THEN
FR
?IN.LIST OF IMAGES USED FOR APSR (dir/doc)?<pcllst1>
ENDIF
FR
?IN.FIRST TRANSFORMATION DOC (dir/doc)?<doc1>
FR ; [type2]
?IN.FORMAT OF SECOND TRANSFORMATION DOC (APSH/APREF=1,APNQ=2,APSR=3,SAP=4,MAN=5)?[type2]
x22=[type2]
IF(x22.eq.3)THEN
FR
?IN.LIST OF IMAGES USED FOR APSR (dir/doc)?<pcllst2>
ENDIF
FR
?IN.SECOND TRANSFORMATION DOC (dir/doc)?<doc2>
FR
?OUT.OUTPUT TRANSFORMATION DOC (dir/doc)?<outdoc>

; ~~~~~ start ~~~~~

IF(x21.le.5)GOTO LB99
IF(x22.le.5)GOTO LB99
  VM
  echo "Alignment format must be 1=apsh,2=apnq,3=apsr,4=sap,5=all"

LB99
; --- sort doc1 by particle number
IF(x21.eq.1)THEN  ; apsh format
DOC SORT
<doc1>      ; input doc
<doc1>sort  ; tempapnqdocsort   ; output doc
(5)         ; sort by particle number (5th column)
Y           ; renumber keys
UD N x31
<doc1>sort
ENDIF

IF(x21.eq.2)THEN  ; apnq format
DOC SORT
<doc1>    ; input doc
<doc1>sort  ; tempapnqdocsort   ; output doc
(6)       ; sort by particle number (6th column)
Y         ; renumber keys
UD N x31
<doc1>sort
ENDIF

IF(x21.eq.3)THEN  ; apsr format
UD N x32
<pcllst1>
UD N x31
<doc1>
 IF(x31.ne.x32)THEN
 VM
 echo Number of particles in APSR doc does not match Image List Doc
 GOTO LB99
 ENDIF
; make apsrdoc with particle numbers
SD IC NEW
temp_doc1
(4),x31  ; registers,keys
DO LB3 x13=1,x31
UD IC x13,x41
<pcllst1>
UD IC x13,x23,x24,x25
<doc1>
SD IC x13,x41,x23,x24,x25
temp_doc1
LB3  ; next particle x13
UD ICE
<pcllst1>
UD ICE
<doc1>
SD IC COPY
temp_doc1
<doc1>temp
SD IC E
temp_doc1
DOC SORT
<doc1>temp    ; input doc
<doc1>sort  ; tempapnqdocsort   ; output doc
(1)       ; sort by particle number (1st column)
Y         ; renumber keys
VM
rm -f <doc1>temp.$DATEXT
ENDIF ;if apsr

IF(x21.eq.4)THEN  ; then cumulative format
DOC SORT
<doc1>    ; input doc
<doc1>sort  ; tempapnqdocsort   ; output doc
(1)   ; sort by particle number (1st column)
Y     ; renumber keys
UD N x31
<doc1>sort
ENDIF

IF(x21.eq.5)THEN
UD 1,x23,x24,x25
<doc1>
x31=1  ; number of particles in 1st doc
ENDIF

; --- sort doc2 by particle number ---
IF(x22.eq.1)THEN  ; apsh format
  DOC SORT
  <doc2>    ; input doc
  <doc2>sort  ; tempapnqdocsort   ; output doc
  (5)   ; sort by particle number (5th column)
  Y     ; renumber keys
  UD N x32
  <doc2>sort
ENDIF

IF(x22.eq.2)THEN  ; apnq format
  DOC SORT
  <doc2>    ; input doc
  <doc2>sort  ; tempapnqdocsort   ; output doc
  (6)   ; sort by particle number (6th column)
  Y     ; renumber keys
  UD N x32
  <doc2>sort
ENDIF

IF(x22.eq.3)THEN  ; apsr format
UD N x33
<pcllst2>
UD N x32
<doc2>
 IF(x32.ne.x33)THEN
 VM
 echo Number of particles in APSR doc does not match Image List Doc
 GOTO LB99
 ENDIF
; make apsrdoc with particle numbers
SD IC NEW
temp_doc2
4,x32  ; registers,keys
DO LB4 x14=1,x32
UD IC x14,x42
<pcllst2>
UD IC x14,x26,x27,x28
<doc2>
SD IC x14,x42,x26,x27,x28
temp_doc2
LB4  ; next particle x14
UD ICE
<pcllst2>
UD ICE
<doc2>
SD IC COPY
temp_doc2
<doc2>temp
SD IC E
temp_doc2
DOC SORT
<doc2>temp    ; input doc
<doc2>sort  ; tempapnqdocsort   ; output doc
(1)   ; sort by particle number (1st column)
Y     ; renumber keys
VM
rm -f <doc2>temp.$DATEXT
ENDIF

IF(x22.eq.4)THEN  ; then cumulative format
DOC SORT
<doc2>    ; input doc
<doc2>sort  ; tempapnqdocsort   ; output doc
(1)   ; sort by particle number (1st column)
Y     ; renumber keys
UD N x32
<doc2>sort
ENDIF

IF(x22.eq.5)THEN
UD 1,x26,x27,x28
<doc2>
x32=1  ; number of particles in 2nd doc
ENDIF

; write output file (cumulative format)  particle    rotation   x-shift   y-shift
SD IC NEW
outdoctemp
(4),x31 ; registers,keys - not more than first alignment

x29=1  ; key number of current particle in 1st doc
x41=1  ; number of particle in 1st doc
x42=1  ; number of particle in 2nd doc
x36=0  ; key counter for <outdoc>

VM
echo -n Combining alignment params..

DO LB1 x11=1,x32  ; for each particle in 2nd alignment

IF(x22.eq.1)THEN  ; apsh format
  UD IC x11,x81,x82,x83,x84,x42,x86,x87,x88,x89,x90,x91,x26,x27,x28,x95
  <doc2>sort
ENDIF
IF(x22.eq.2)THEN  ; apnq format
  UD IC x11,x81,x82,x26,x27,x28,x42
  <doc2>sort
ENDIF
IF(x22.eq.3)THEN  ; apsr format
  UD IC x11,x42,x26,x27,x28  ; read particle number and transformations
  <doc2>sort
ENDIF
IF(x22.eq.4)THEN  ; cumulative format
  UD IC x11,x42,x26,x27,x28  ; read particle number and transformations
  <doc2>sort
ENDIF

x30=0  ; found particle in 1st alignment 

DO LB2 x12=x29,x31 ; for each particle in 1st alignment

IF(x21.eq.1)THEN  ; apsh format
  UD IC x12,x81,x82,x83,x84,x41,x86,x87,x88,x89,x90,x91,x23,x24,x25,x95
  <doc1>sort
ENDIF
IF(x21.eq.2)THEN  ; apnq format
  UD IC x12,x81,x82,x23,x24,x25,x41
  <doc1>sort
ENDIF
IF(x21.eq.3)THEN  ; apsr format
  UD IC x12,x41,x23,x24,x25  ; read particle number and transformations
  <doc1>sort
ENDIF
IF(x21.eq.4)THEN  ; cumulative format
  UD IC x12,x41,x23,x24,x25  ; read particle number and transformations
  <doc1>sort
ENDIF
IF(x21.eq.5)x41=x42  ; if 2nd format is manual (2nd pclnum x41 = 1st pclnum x42)
IF(x22.eq.5)x42=x41  ; if 1st format is manual (1st pclnum x42 = 2nd pclnum x41)

IF(x41.eq.x42)THEN
  x30=1  ; found particle in 1st alignment
  ; VM
  ; echo {%F%x23} {%F%x24} {%F%x25} + {%F%x26} {%F%x27} {%F%x28}
  SA P,x33,x34,x35   ; vector sums
  x23,x24,x25  ; intial transformation
  x26,x27,x28  ; second transformation
  x36=x36+1  ; <outdoc> key counter
  SD IC x36,x41,x33,x34,x35  ; particlenum rt x-shift y-shift
  outdoctemp ;<outdoc>
  IF(x22.ne.5)THEN ; if 2nd format is manual then stay in LB2
    x29=x12  ; next time start LB2 from current particle
    GOTO LB98  ; exit loop and get next particle from 2nd doc
  ENDIF
ENDIF

LB2  ; next particle in apnqdoc x12

LB98  ; particle found

IF(x30.eq.0)THEN  ; particle not found
VM
echo Particle {*****x41} not found in <doc1>
GOTO LB99
ENDIF

LB1  ; next particle in apsrdoc x11

IF(x21.ne.5)THEN
UD ICE
<doc1>sort
VM
rm -f <doc1>sort.$DATEXT
ENDIF
IF(x22.ne.5)THEN
UD ICE
<doc2>sort
VM
rm -f <doc2>sort.$DATEXT
ENDIF

SD IC COPY
outdoctemp
<outdoc>
SD IC E
outdoctemp ; <outdoc>

VM
echo . <outdoc> done.

RE

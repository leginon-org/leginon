; iterative multi-reference alignment + apsrtest
; Ed Brignole version 20090206

FR L    ;particles to align
[pcltmpl]ser/ser@******
FR L    ;list of particles
[pcllist]ser/serlist
FR L    ;radius for multi-ref alignment
[radius]17
FR L    ;references
[reftmpl]cl1/apsrcl1/lastiav***
FR L    ;list of references
[reflist]cl1/apsrcl1/c50_mrglist ;ral1/grp_count
FR L    ;output directory to create
[dir]ital1
FR L    ;number of reference alignment iterations
[iter]20
FR L    ;number of rounds in apsrtest
[apsrtest]3
FR L    ;reference for orientation of averages
[ref]ksqavmrip

;--- Begin ---
MD
SET MP
(0)

x20=[radius]
x23=[iter]
x25=[apsrtest]

x99=0
IQ FI x99
[dir]/r00/grp_count
IF(x99.eq.0)THEN
  VM
  mkdir [dir]
  VM
  mkdir [dir]/r00
  VM
  cp [reflist].$DATEXT [dir]/r00/grp_count.$DATEXT
ENDIF

UD N x21
[dir]/r00/grp_count
VM
echo '____ Initializing '{%F7.1%x21}' reference images ____'

DO LB3 x13=1,x21
  UD IC x13,x22
  [dir]/r00/grp_count

  @centerbymirrors[x31,x32] ;must be centered for refalignment
  [reftmpl]x22
  [dir]/r00/apsrav{***x22}
LB3
UD ICE
[dir]/r00/grp_count

DO LB4 x14=1,x23 ;for each iteration of multi-reference alignment
  x99=0
  IQ FI x99
  [dir]/r{**x14}/apnq_doc
  IF(x99.eq.0)THEN
    VM
    mkdir [dir]/r{**x14}
  ENDIF
  x24=x14-1

  x99=0
  IQ FI x99
  [dir]/r{**x14}/alnavdoc
  IF(x99.eq.1)THEN
    VM
    echo '____ Ref-Alignment Iteration '{**x14}' was already completed ____'
  ELSE
    VM
    echo '____ Ref-Alignment Iteration '{**x14}' ____'
    
    @refnm[x20]
    [pcllist]
    [pcltmpl]
    [dir]/r{**x24}/grp_count
    [dir]/r{**x24}/apsrav***
    [dir]/r{**x14}

    @refgrp
    (2) ; apnq
    [dir]/r{**x14}/apnq_doc
    [pcltmpl]
    [dir]/r{**x14}

    @alnimg[x20] ;orient averages to reference
    [dir]/r{**x14}/avg***
    [dir]/r{**x14}/grp_count
    (4) ;refalign    
    [ref]
    [dir]/r{**x14}/alnav   ;prefix for av va @*** and doc
  ENDIF

  ;x99=0
  ;IQ FI x99
  ;[dir]/r{**x14}/rtp
  ;IF (x99.eq.1)THEN
  ;  VM
  ;  echo rtp{**x14} exists...deleting.
  ;  DE
  ;  [dir]/r{**14}/rtp
  ;ENDIF

  
  UD N x21
  [dir]/r{**x14}/grp_count
  VM
  echo '____ Free-Alignment within' {%F7.1%x21} 'reference groups ____'
  SD IC NEW
  classapsrerr_ic
  (3),x21
  DO LB1 x11=1,x21 ; for each reference class
    UD IC x11,x22
    [dir]/r{**x14}/grp_count

    x99=0
    IQ FI x99
    [dir]/r{**x14}/apsrav{***x22}
    IF(x99.eq.1)THEN
      VM
      echo '   Alignment of grp'{***x22}' already completed'
      GOTO LB90
    ENDIF

    @centerbymirrors[x31,x32]
    [dir]/r{**x14}/alnav@{***x22}
    [dir]/r{**x14}/alnav@{***x22} ;overwrite

    @findradius[x30]
    [dir]/r{**x14}/alnav@{***x22}

    VM ; remove prior apsr directory if it exists
    rm -fr [dir]/r{**x14}/apsr{***x22}/
    
    MD
    SET MP
    (1)
    @fraln[x30,x25] ;radius,numrounds
    [dir]/r{**x14}/grp{***x22}  ;list of particles
    [pcltmpl]                   ;particle template
    *                           ;center with default blob
    [dir]/r{**x14}/apsr{***x22} ;output directory

    @alnapsr[x20]
    [dir]/r{**x14}/apsr{***x22}    ;apsrdirectory
    [dir]/r{**x14}/grp{***x22}     ;list of apsr'd particles
    (3)                            ;orient lastiav to reference orient lasti to lastiav
    [dir]/r{**x14}/alnav@{***x22}  ;reference image

    MD
    SET MP
    (0)
    IF(x25.eq.10)THEN ;if don't have 10 apsrrounds
      @apsrstat
      [dir]/r{**x14}/apsr{***x22}
      [dir]/r{**x14}/apsrsum{***x22}
      [dir]/r{**x14}/apsrerr{***x22}
      DE
      [dir]/r{**x14}/apsrsum{***x22}

      x33=0 ; rotation error
      x34=0 ; shift error
      DO LB2 x12=1,10 ; for each apsr round
        UD IC x12,x10,x31,x32
        [dir]/r{**x14}/apsrerr{***x22}

        x33=x33+x31 ; rt-err
        x34=x34+x32 ; sh-err
      LB2 ;next apsr round
      UD ICE
      [dir]/r{**x14}/apsrerr{***x22}

      x33=x33/10 ; avg rt-errr
      x34=x34/10 ; avg sh-err

      SD IC x11,x11,x33,x34
      classapsrerr_ic
    ENDIF ;don't have 10 apsr rounds

    AS R  ;average of apsrav
    [dir]/r{**x14}/apsr{***x22}/lasti**
    (1-10)
    A
    [dir]/r{**x14}/apsrav{***x22}
    _99 ;[dir]/r{**x14}/apsrva{***x22}

    DE
    _99 ;[dir]/r{**x14}/apsrva{***x22}

    VM
    echo '  Alignment of grp'{***x22}' completed'
    LB90 ;skip to here if free-alignment already completed

    VM ;for next round just keep apsrav*** and apsrerr***
    rm -fr [dir]/r{**x14}/apsr{***x22}/

  LB1 ; next ref grp
  SD IC COPY ;SD E
  classapsrerr_ic
  [dir]/r{**x14}/apsrerr
  SD IC END
  classapsrerr_ic
  UD ICE
  [dir]/r{**x14}/grp_count

LB4 ;next iteration x14
VM ;remove initial 
rm -fr [dir]/r00/

; apsh each group to its apsrav using appropriate radius
DO LB5 x15=1,x21 ;for each reference class
  UD IC x15,x22
  [dir]/r{**x23}/grp_count

  x30=0
  SD x22,x30,x30,x30
  [dir]/apshangles_tmp
  SD E
  [dir]/apshangles_tmp

  FS
  [dir]/r{**x23}/apsrav{***x22}
  FI x31
  [dir]/r{**x23}/apsrav{***x22}
  (12) ;nsam

  @findradius[x30]
  [dir]/r{**x23}/apsrav{***x22}

  x32=x31/2-x30-2 ;translation range

  AP SH
  [dir]/r{**x23}/apsrav*** ;reftmpl
  x22 ;refselect
  x32,(1) ;trans,step
  (1),x30 ;inner,outer
  [dir]/apshangles_tmp ;refangles
  [pcltmpl]    ;pcltmpl
  [dir]/r{**x23}/grp{***x22} ;pcllist
  * ;pclangles
  (0.0) ;angular restriction
  (0) ;mirror
  [dir]/apshtmp{***x22}

  DOC SORT
  [dir]/apshtmp{***x22}
  [dir]/apshsrt{***x22}
  (5) ;sort by pclnum
  Y ;renumber

  DE
  [dir]/apshtmp{***x22}

  UD N x35
  [dir]/apshsrt{***x22}
  UD IC x35,x41,x42,x43,x44,x45
  [dir]/apshsrt{***x22}
  UD ICE
  [dir]/apshsrt{***x22}

  MS I
  _11@
  x31,x31,(1)
  x35 ;numimgs
  x45 ;maxnum

  @rtsq
  (1) ;apsh
  [dir]/apshsrt{***x22}
  [pcltmpl]
  _11@******

  AS R
  _11@******
  [dir]/r{**x23}/grp{***x22} ;pcllist
  A
  [dir]/avg{***x22}
  [dir]/var{***x22}

  DE
  _11
LB5
UD ICE
[dir]/r{**x23}/grp_count
DE
[dir]/apshangles_tmp

EN D

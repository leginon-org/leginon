;classification of apsr-rounds or refgrps
;version 20090210
;  *run this after fraln or refal
;  *classify particles from each apsr-round or refgrp
;  *within each class do 1 apsr round
;  *after this procedure: run mergeclasses

FR L  ;image stack
<pcltmpl>iser2/mfiser@******
FR L  ;list of particles
<pcllist>iser2/serlist
FR L  ;directory with alignment params (lastd** or apnq_doc)
<alndir>ifal3
FR L  ;undecimated mask
<mask>circle28
FR L  ;number of classes to generate per apsr round
<classes>100
FR L  ;number of factors
<factors>25
FR L  ;factor weight scale
<factorweight>0.1
FR L  ;decimation factor to speed classification
<decimation>4
FR L  ;radius for alignment of undecimated averages
<radius>27
FR L  ;reference image for orienting class averages
<refimg>ksq_ipshmrav
FR L  ;output directory
<outdir>icl3

; ~~~~~ start ~~~~~
MD
SET MP
(0)
MD
VB OFF

x22=<factors>
x17=<factorweight>
x20=<classes>
x18=<decimation>
x29=0 ; class counter
x34=<radius>

VM ; make classification directory
mkdir <outdir>
VM
mkdir <outdir>/avggrp

DC S
<mask>
_11
x18,x18

x90=0
IQ FI x90
<alndir>/iter_doc
IF(x90.eq.1)THEN ;alignment was apsr
  x99=3 ;apsr
  VM
  echo Your particles were aligned using APSR.
  VM
  cp <alndir>/iter_doc.$DATEXT <outdir>/iter.$DATEXT
  GOTO LB89
ENDIF

x90=0
IQ FI x90
<alndir>/grp_count
IF(x90.eq.1)THEN
  VM
  cp <alndir>/grp_count.$DATEXT <outdir>/iter.$DATEXT
  VM
  echo Your particles were reference aligned with
  x90=0
  IQ FI x90
  <alndir>/apsh_doc
  IF(x90.eq.1)THEN
    x99=1 ;apsh
    @rtsq
    (1) ;apsh 
    <alndir>/apsh_doc
    <pcltmpl>
    <outdir>/rtp@******
    GOTO LB89
  ENDIF
  x90=0
  IQ FI x90
  <alndir>/apnq_doc
  IF(x90.eq.1)THEN
    x99=2
    @rtsq
    (2) ;apnq 
    <alndir>/apnq_doc
    <pcltmpl>
    <outdir>/rtp@******
    GOTO LB89
  ENDIF  
ENDIF
VM
echo EXITING...<alndir> does not contain iter_doc or grp_count
EN

LB89 ;skip to here if alignment params found

UD N x21
<outdir>/iter

x26=x21*x20 ;totalclasses=#rounds * #classes/round

SD IC NEW
grpdoc_ic
(5,x26)

x25=0 ;division counter
DO LB1 x11=1,x21 ;for each iteration/group
  UD IC x11,x12
  <outdir>/iter

  x90=0
  IQ FI x90
  <outdir>/r{**x11}_thrk
  IF(x90.eq.1)GOTO LB90

  IF(x99.eq.3)THEN
    VM
    echo '--- Classifying APSR round' {**x12} '---'

    @rtsq
    (4) ; sap
    <alndir>/lastd{**x12}
    <pcltmpl>
    <outdir>/rtp@******
    UD N x23
    <alndir>/lastd{**x12}
    x24=int((x23+x23/x20*x21)/10000) ; #divisions = (#pcls+(#pcls/class*#apsrrounds))/10000
    IF(x24.gt.1)THEN ;try to have at least 50 particles per class
      @dividelist[x24] ;divide into number of iterations
      <alndir>/lastd{**x12}
      <outdir>/pcltmp**
      x25=x25+1
      IF(x25.gt.x24)x25=1
      VM
      echo "   Too many particles to classify..using divided list "{**x25} of {**x24}
      VM
      cp <outdir>/pcltmp{**x25}.$DATEXT <outdir>/pcldoc{**x12}.$DATEXT
      DE A
      <outdir>/pcltmp01
    ELSE
      VM
      cp <alndir>/lastd{**x12}.$DATEXT <outdir>/pcldoc{**x12}.$DATEXT
    ENDIF
  ELSE ;IF(x99.le.2)THEN
    VM
    echo '--- Classifying APSH/NQ class' {**x12} '---'

    DOC SORT
    <alndir>/grp{***x12}
    <outdir>/pcldoc{**x12}
    (1)
    Y
  ENDIF

  @dcs[x18]
  <outdir>/rtp@******       ; pcltmpl to average
  <outdir>/pcldoc{**x12}    ; pcllist
  <outdir>/drtp@******      ; pcltmpl to classify

  @classifyauto[x22,x17,x20]
  <outdir>/drtp@*****       ; pcltmpl to classify
  <outdir>/rtp@*****        ; pcltmpl to average
  <outdir>/pcldoc{**x12}    ; pcllist
  _11                       ; mask
  <outdir>/r{**x11}         ; prefix

  DE
  <outdir>/pcldoc{**x12}

  LB90
  x90=0
  IQ FI x90
  <outdir>/r{**x11}_avg
  IF(x90.eq.0)GOTO LB91

  UD N x28 ; how many classes
  <outdir>/r{**x11}_thrk
  VM
  echo ...moving {%F7.1%x28} class averages to avggrp directory

  DO LB3 x13=1,x28 ; for each resulting class
    x29=x29+1 ; class counter
    CP
    <outdir>/r{**x11}_avg@{***x13}
    <outdir>/avggrp/avg@{*****x29}.$DATEXT
    VM
    mv -f <outdir>/r{**x11}_thr{***x13}.$DATEXT <outdir>/avggrp/thr{*****x29}.$DATEXT
    UD IC x13,x30,x31
    <outdir>/r{**x11}_thrk
    SD IC x29,x29,x11,x12,x30,x31 ;class# apsr# div# grp# numpcls
    grpdoc_ic
  LB3 ; next class x13
  DE
  <outdir>/r{**x11}_var
  DE
  <outdir>/r{**x11}_avg

  LB91 ;r{**x11}_avg already deleted

  UD ICE
  <outdir>/r{**x11}_thrk
  DE
  <outdir>/drtp
LB1 ; next apsr round x11
SD IC COPY
grpdoc_ic
<outdir>/grpdoc
SD IC END
grpdoc_ic
DE
<outdir>/rtp
UD ICE
<outdir>/iter
DE
<outdir>/iter
DE
_11 ;mask

; --- SECOND HALF OF PROCEDURE ---
; --- align class averages
MD
SET MP
(1)

@alnimg[x34]
<outdir>/avggrp/avg@*****
<outdir>/grpdoc
(3) ; refalign to oriented apsr-average
<refimg>
<outdir>/avggrp/alnavg   ; prefix for doc av va stack

; --- align freealigned class averages
VM
mkdir <outdir>/apsrgrp

@apsrgrps[x34] ; free align particles within classes
<outdir>/grpdoc          ; list of groups
<outdir>/avggrp/thr***** ; particle lists template
<pcltmpl>                ; particle template
<outdir>/apsrgrp/        ; output prefix

@alnimg[x34]
<outdir>/apsrgrp/i*****
<outdir>/grpdoc
(3) ; refalign
<refimg>
<outdir>/apsrgrp/alni   ; prefix for stack doc av va 

VM
echo Now handselect best averages, classify and merge docs

EN D

; rtshgrpav.spi Ed Brignole 2008.09.28
; combines former refgrp.spi and rtsq.spi
; groups particles into classes after reference alignment
; rotates/mirrors images according to alignment
; generates class averages

; input:
;   alignment doc (format automatically detected)
;    1) apsh format: 15 column (psi,tta,phi,grp,pcl#,rt,xsh,ysh,nrefs,dif,cc,rt,xsh,ysh,mr)
;    2) apnq format: 6 column (grp,cc,rt,xsh,ysh,pcl#)
;    3) sap format: 5 column (pcl#,rt,xsh,ysh,grpmr*) *not implemented for mirror yet
;
; output:
;   grp_count: key,ref,num+,num-
;   grp*** : key,pclnum,rt,xsh,ysh,ref&mr = SAP format
;   avg*** : class average
;   var*** : class variance

FR
?IN.Alignment doc (dir/alndoc)?[alndoc]
FR
?IN.Particle template (dir/pcl@*****)?[pcltmpl]
FR
?OUT.Existing output directory (dir)?[alndir]

; ~~~~~ start ~~~~~

SD /     class      positive      mirror
[alndir]/grp_count

x99=0
IQ FI x99
_1
IF(x99.eq.1)THEN
  VM
  echo 'ERROR... _1 already exists!'
  VM
  echo 'Note _1 to _9 are reserved for scripts! Use _10 and above for procedures!'
  EN
ENDIF

UD N x41,x40
[alndoc]

x49=0
IF(x40.eq.15)x49=1
IF(x40.eq.6)x49=2
IF(x40.eq.5)x49=4
IF(x49.eq.0)THEN
  VM
  echo ERROR...invalid alignment format.
  EN
ENDIF

; CLASS TRACKER
x44=0 ;classnum tracker
x20=0 ;class counter

IF(x49.eq.1)THEN ;;;;;;;;;;;;BEGIN APSH SORTING AND COUNTING MODULE;;;;;;;;;;;;
  VM
  echo -n Sorting Alignment into class docs..

  DOC SORT ; sort by image number
  [alndoc]
  [alndir]/apsh_tmp
  (5) ; pcl# is 5th register for apsh
  Y

  UD N x41
  [alndir]/apsh_tmp
  ;         psi,tta,phi,ref,img,rt ,xsh,ysh,npj,ang,ccc,psi,xsh,ysh,mr
  UD IC x41,x21,x22,x23,x24,x37,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35
  [alndir]/apsh_tmp
  FS
  [pcltmpl]x37
  FI x36
  [pcltmpl]x37
  (12)
  UD ICE
  [alndir]/apsh_tmp
  DE
  [alndir]/apsh_tmp

  x99=0
  IQ FI x99
  [alndir]/apsh_tmp
  IF(x99.eq.1)THEN
    VM
    echo ERROR...apsh_tmp was not deleted.
  ENDIF

  DOC SORT
  [alndoc]
  [alndir]/apsh_tmp
  (4)    ; sort by refnum
  Y

  UD N,x41
  [alndir]/apsh_tmp
  DO LB1 x11=1,x41  ; FOR EACH PARTICLE
    ;         psi,tta,phi,ref,img,rt ,xsh,ysh,npj,ang,ccc,psi,xsh,ysh,mr
    UD IC x11,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35
    [alndir]/apsh_tmp

    x25=abs(x25) ; ADJUSTS FOR DIFFERENT SPIDER VERSIONS

    IF(x44.lt.x24)THEN  ; THIS IS A NEW CLASS
      ; CLOSE PREVIOUS CLASS AND WRITE COUNTER
      IF(x11.eq.1)GOTO LB50 ;(NOT ON FIRST LOOP)
      x20=x20+1 ; increment class counter
      SD x20,x44,x42,x43
      [alndir]/grp_count
      IF(x45.gt.0)THEN ;there are particles in this class
        SD IC COPY
        grpdoc_ic
        [alndir]/grp{***x44}
        SD IC END
        grpdoc_ic
        AS R
        _1@****** ;[alndir]/rtp@******   ;
        [alndir]/grp{***x44}
        A
        [alndir]/avg{***x44}
        [alndir]/var{***x44}
      ENDIF
      DE
      _1
      LB50

      MS I
      _1@
      x36,x36,(1) ;size
      x41      ; numpcls
      x37      ; maxnum

      ; RESET COUNTERS
      x42=0 ; NONMIRROR COUNTER
      x43=0 ; MIRROR COUNTER
      x45=0 ; MR+NM COUNTER
      SD IC NEW
      grpdoc_ic
      (5),x41
      x44=x24 ; update to new class
    ENDIF ; new class 

    x45=x45+1
    IF(x35.ge.0)THEN  ; NOT MIRRORED
      x35=x24
      x42=x42+1  ; increment nonmirror particle counter

      RT SQ
      [pcltmpl]x25
      _1@{******x25}   ;[alndir]/rtp@{******x25}   ;
      x26,(1.0)
      x27,x28
    ELSE  ; MIRRORED
      x35=-1*x24
      x43=x43+1   ; increment mirror particle counter

      RT SQ
      [pcltmpl]x25
      _2 ;[alndir]/rtp@{******x25}
      x26,(1.0)
      x27,x28

      MR
      _2
      _1@{******x25}   ;[alndir]/rtp@{******x25}
      Y ;yaxis
    ENDIF ; MIRRORED/NOT-MIRRORED
    ;     key,pcl,rt ,xsh,ysh,grpmr
    SD IC x45,x25,x26,x27,x28,x35
    grpdoc_ic  ;[alndir]/grp{***x44}  

  LB1  ; END LOOP FOR EACH PARTICLE
  ; CLOSE ALIGNMENT DOC
  UD ICE
  [alndir]/apsh_tmp
  DE
  [alndir]/apsh_tmp

  ; CLOSE CLASS LIST
  x20=x20+1
  SD x20,x44,x42,x43
  [alndir]/grp_count
  SD E
  [alndir]/grp_count

  ; SAVE LAST CLASS
  SD IC COPY
  grpdoc_ic
  [alndir]/grp{***x44}
  SD IC END
  grpdoc_ic ; [alndir]/grp+{***x44} 

  AS R
  _1@****** ;[alndir]/rtp@******   ;
  [alndir]/grp{***x44}
  A
  [alndir]/avg{***x44}
  [alndir]/var{***x44}

  ;CP
  ;_1@
  ;[alndir]/rtp@
  DE
  _1
        DE
        _2
  GOTO LB90
ENDIF  ;;;;;;;;;;END APSH SORTING AND COUNTING MODULE;;;;;;;;

IF(x49.eq.6)THEN ;;;;;;;;;;;;BEGIN APNQ SORTING AND COUNTING MODULE;;;;;;;;;;;;
  VM
  echo -n Sorting APNQ alignment into class docs..

  DOC SORT ; sort by image number
  [alndoc]
  [alndir]/apnq_tmp
  (6) ; pcl# is 6th register for apnq
  Y

  UD N x41
  [alndir]/apnq_tmp
  ;         ref,ccc,rt ,xsh,ysh,img
  UD IC x41,x24,x31,x26,x27,x28,x37
  [alndir]/apnq_tmp
  FS
  [pcltmpl]x37
  FI x36
  [pcltmpl]x37
  (12)
  UD ICE
  [alndir]/apnq_tmp
  DE
  [alndir]/apnq_tmp

  x99=0
  IQ FI x99
  [alndir]/apnq_tmp
  IF(x99.eq.1)THEN
    VM
    echo ERROR...apnq_tmp was not deleted.
  ENDIF

  DOC SORT ; sort by reference number
  [alndoc]
  [alndir]/apnq_tmp
  (1) ; reference is 1st register for apnq but 4th for apsh
  Y

  DO LB2 x11=1,x41 ; for each aligned particle
    ;         ref,ccc,rt ,xsh,ysh,img
    UD IC x11,x24,x31,x26,x27,x28,x25
    [alndir]/apnq_tmp

    IF(x44.lt.x24)THEN  ; THIS IS A NEW CLASS
    ; CLOSE PREVIOUS CLASS AND WRITE COUNTER
      IF(x11.eq.1)GOTO LB51 ;(NOT ON FIRST LOOP)
      x20=x20+1
      SD x20,x44,x42,x43  ; classnum,countnm,countmr
      [alndir]/grp_count
      IF(x42.gt.0)THEN ;there are particles in this class
        SD IC COPY
        grpdoc_ic
        [alndir]/grp{***x44}
        SD IC E
        grpdoc_ic
        AS R
        _1@****** ;[alndir]/rtp@******
        [alndir]/grp{***x44}
        A
        [alndir]/avg{***x44}
        [alndir]/var{***x44}
        DE
        _1
      ENDIF
      LB51 ;skip to here on first loop

      MS I
      _1@
      x36,x36,(1) ;size
      x41         ;numpcls
      x37         ;maxnum

      ; RESET COUNTERS
      x42=0 ; NONMIRROR COUNTER
      x43=0 ; MIRROR COUNTER
      x44=x24
    ENDIF

    ; NONMIRROR CLASS COUNTER
    IF (x42.EQ.0) THEN
      SD IC NEW
      grpdoc_ic
      (5),x41
    ENDIF

    x42=x42+1
    ;     key,pcl,rt ,xsh,ysh,ref
    SD IC x42,x25,x26,x27,x28,x44
    grpdoc_ic  ;[alndir]/grp{***x44}

    RT SQ
    [pcltmpl]x25
    _1@{******x25} ;[alndir]/rtp@{******x25}
    x26,(1.0)
    x27,x28

  LB2  ; END LOOP FOR EACH PARTICLE
  ; CLOSE ALIGNMENT DOC
  UD ICE
  [alndir]/apnq_tmp
  DE
  [alndir]/apnq_tmp

  ; CLOSE SUMMARY DOC
  x20=x20+1
  SD x20,x44,x42,x43
  [alndir]/grp_count
  SD E
  [alndir]/grp_count

  ; SAVE LAST CLASS
  SD IC COPY
  grpdoc_ic
  [alndir]/grp{***x44}
  SD IC E
  grpdoc_ic
  AS R
  _1@****** ;[alndir]/rtp@******
  [alndir]/grp{***x44}
  A
  [alndir]/avg{***x44}
  [alndir]/var{***x44}

  ;CP
  ;_1@
  ;[alndir]/rtp@
  DE
  _1

  GOTO LB90
ENDIF ;;;;;;;;;;END APNQ SORTING AND COUNTING MODULE;;;;;;;;

IF(x49.eq.4)THEN ;;;;;;;;;;;;BEGIN SAP SORTING AND COUNTING MODULE;;;;;;;;;;;;
  VM
  echo -n Sorting SAP alignment into class docs..

  DOC SORT ; sort by image number
  [alndoc]
  [alndir]/sap_tmp
  (1) ; pcl# is 1st register for sap
  Y

  UD N x41
  [alndir]/sap_tmp
  ;         img,rt ,xsh,ysh,gpm
  UD IC x41,x37,x26,x27,x28,x24
  [alndir]/sap_tmp
  FS
  [pcltmpl]x37
  FI x36
  [pcltmpl]x37
  (12)
  UD ICE
  [alndir]/sap_tmp
  DE
  [alndir]/sap_tmp

  x99=0
  IQ FI x99
  [alndir]/sap_tmp
  IF(x99.eq.1)THEN
    VM
    echo ERROR...sap_tmp was not deleted.
  ENDIF

  SD IC NEW
  reformat2sap_ic
  (6),x41
  DO LB5 x15=1,x41
    ;         pcl,rt ,xsh,ysh,grpmr
    UD IC x15,x25,x26,x27,x28,x24
    [alndoc]
    x35=1
    IF(x24.lt.0)x35=-1
    x24=abs(x24)
    ;         pcl,rt ,xsh,ysh,grp,mr
    SD IC x15,x25,x26,x27,x28,x24,x35
    reformat2sap_ic
  LB5
  SD IC COPY
  reformat2sap_ic
  [alndir]/reformat2sap_tmp
  SD IC END
  reformat2sap_ic
  DOC SORT
  [alndir]/reformat2sap_tmp
  [alndir]/sap_tmp
  (5)    ; sort by refnum
  Y
  DE
  [alndir]/reformat2sap_tmp

  UD N x41
  [alndir]/sap_tmp
  DO LB4 x14=1,x41  ; FOR EACH PARTICLE
    ;         img,rt ,xsh,ysh,grp,mr
    UD IC x14,x25,x26,x27,x28,x24,x35
    [alndir]/sap_tmp

    IF(x44.lt.x24)THEN  ; THIS IS A NEW CLASS
      ; CLOSE PREVIOUS CLASS AND WRITE COUNTER
      IF(x11.eq.1)GOTO LB54 ;(NOT ON FIRST LOOP)
      ;VM
      ;echo Closing class {***x44}
      x20=x20+1 ; increment class counter
      ;      grp,nm ,mr
      SD x20,x44,x42,x43
      [alndir]/grp_count
      IF(x45.gt.0)THEN ;there were particles in this class
        SD IC COPY
        grpdoc_ic
        [alndir]/grp{***x44}
        SD IC END
        grpdoc_ic
        AS R
        _1@****** ;[alndir]/rtp@******   ;
        [alndir]/grp{***x44}
        A
        [alndir]/avg{***x44}
        [alndir]/var{***x44}
      ENDIF
      DE
      _1
      LB54 ;skip to here on first loop

      MS I
      _1@
      x36,x36,(1) ;size
      x41      ; numpcls
      x37      ; maxnum

      ; RESET COUNTERS
      x42=0 ; NONMIRROR COUNTER
      x43=0 ; MIRROR COUNTER
      x45=0 ; MR+NM COUNTER
      SD IC NEW
      grpdoc_ic
      (5),x41
      x44=x24 ; update to new class
    ENDIF ; new class 

    x45=x45+1
    IF(x35.ge.0)THEN  ; NOT MIRRORED
      x35=x24
      x42=x42+1  ; increment nonmirror particle counter

      RT SQ
      [pcltmpl]x25
      _1@{******x25}   ;[alndir]/rtp@{******x25}   ;
      x26,(1.0)
      x27,x28
    ELSE  ; MIRRORED
      x35=-1*x24
      x43=x43+1   ; increment mirror particle counter

      RT SQ
      [pcltmpl]x25
      _2 ;[alndir]/rtp@{******x25}
      x26,(1.0)
      x27,x28

      MR
      _2
      _1@{******x25}   ;[alndir]/rtp@{******x25}
      Y ;yaxis
    ENDIF ; MIRRORED/NOT-MIRRORED
    ;     key,pcl,rt ,xsh,ysh,grpmr
    SD IC x45,x25,x26,x27,x28,x35
    grpdoc_ic  ;[alndir]/grp{***x44}  

  LB4  ; END LOOP FOR EACH PARTICLE
  ; CLOSE ALIGNMENT DOC
  UD ICE
  [alndir]/sap_tmp
  DE
  [alndir]/sap_tmp

  ; CLOSE CLASS LIST
  x20=x20+1
  SD x20,x44,x42,x43
  [alndir]/grp_count
  SD E
  [alndir]/grp_count

  ; SAVE LAST CLASS
  SD IC COPY
  grpdoc_ic
  [alndir]/grp{***x44}
  SD IC END
  grpdoc_ic ; [alndir]/grp{***x44} 

  AS R
  _1@****** ;[alndir]/rtp@******   ;
  [alndir]/grp{***x44}
  A
  [alndir]/avg{***x44}
  [alndir]/var{***x44}

  ;CP
  ;_1@
  ;[alndir]/rtp@
  DE
  _1
  DE
  _2

  GOTO LB90
ENDIF  ;;;;;;;;;;END SAP SORTING AND COUNTING MODULE;;;;;;;;

LB90 ;completed

VM
echo .particles transformed and class averaged.

RE

; Syntax: @rctanglesmr
;   version 20090213 Ed Brignole (modified from creatang.pnv)
; Description:
;   writes psi,theta,phi projection angles doc with key=pclnum
;
; Input:
;  *rotational alignment params for untilted particles 
;     (format APSH,APXQ,SAP,PRXYM automatically detected)
;  *list of all tilted particles (key=pclnum, 2nd register=micronum)
;  *template for files with angular information for each micro (dcb***)
;     (can accomodate angles from TiltPicker with images on left and right swapped)
;  *an additive factor for instance if micro#1222 has dcb222, then enter 1000
;  *tilt direction (positive/negative) determined from far-from-focus edge
;     (micros can be scanned vertically or horizontally)
;     (text should be mirrored when emulsion side is scanned)
; Output:
;     angles for each particle (key=pclnum,psi,theta,phi)

FR
?IN.Untilted particle alignment doc (dir/alndoc)?<alndoc>
FR
?IN.List of tilted particles and their micros (ser/sertlist)?<serlist>
FR
?IN.Template for micro angles docs (mics/dcb***)?<dcbtmpl>
RR x23
?IN.Factor subtracted from mic# to get dcb# (1000)?
RR x24
?IN.Tilted micros far-from-focus edge (1=left,2=right,3=top,4=bottom)?
FR
?OUT.Particle angle doc (dir/angles)?<angdoc>

; ~~~~~ start ~~~~~
UD N x21,x22
<alndoc>
UD E

IF(x24.lt.1)THEN
  VM
  echo ERROR..Stage was not tilted.
  EN
ENDIF
IF(x24.gt.4)THEN
  VM
  echo ERROR..Stage was not tilted.
  EN
ENDIF

;sort alignment doc by particle number
IF(x22.ge.15)THEN ; apshdoc
  VM
  echo -n 'Using APSH alignment doc '
  DOC SORT
  <alndoc>
  <angdoc>_alntmp
  (5) ; particle num
  Y
  UD N x21
  <angdoc>_alntmp
  ;         phi,tht,psi,ref,pcl
  UD IC x21,x41,x42,x43,x44,x45 ; highest pcl number x45
  <angdoc>_alntmp
  GOTO LB22
ENDIF
IF(x22.eq.7)THEN ; apxqdoc
  VM
  echo -n 'Using APXQ alignment doc '
  DOC SORT
  <alndoc>
  <angdoc>_alntmp
  (6) ; particle num
  Y
  UD N x21
  <angdoc>_alntmp
  ;         ref,cc, rt ,xsh,ysh,pcl
  UD IC x21,x44,x42,x46,x47,x48,x45 ; highest pcl number x45
  <angdoc>_alntmp
  GOTO LB22
ENDIF
IF(x22.eq.4)THEN ; sapdoc
  VM
  echo -n 'Using SAP alignment doc '
  DOC SORT
  <alndoc>
  <angdoc>_alntmp
  (1) ; particle num
  Y
  UD N x21
  <angdoc>_alntmp
  UD IC x21,x45 ; highest pcl number x45
  <angdoc>_alntmp
  GOTO LB22
ENDIF
IF(x22.eq.5)THEN ; sapdoc
  VM
  echo -n 'Using PRXYM alignment doc '
  DOC SORT
  <alndoc>
  <angdoc>_alntmp
  (1) ; particle num
  Y
  UD N x21
  <angdoc>_alntmp
  UD IC x21,x45 ; highest pcl number x45
  <angdoc>_alntmp
  GOTO LB22
ENDIF
VM
echo ERROR...Unrecognized alignment doc format.
EN
LB22 ;found alignment doc

VM
echo to write projection angles for {%F7.1%x21} particles..

SD IC NEW ;psi,tta,phi
angles_ic
(3),x45

x99=0 ; mic counter
DO LB1 x11=1,x21 ; for each aligned particle
  IF(x22.ge.15)THEN ; APSH
    ;         phi,tht,psi,ref,pcl,rt ,xsh,ysh,npj,dif,ccc,rt ,xsh,ysh,mr
    UD IC x11,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55
    <angdoc>_alntmp
    IF(x55.lt.0)x44=-(abs(x44))
    GOTO LB23
  ENDIF
  IF(x22.eq.6)THEN ; APXQ
    ;         ref,cc, rt ,xsh,ysh,pcl
    UD IC x11,x44,x42,x46,x47,x48,x45
    <angdoc>_alntmp
    GOTO LB23
  ENDIF
  IF(x22.eq.5)THEN ; PRXYM
    ;         pcl, rt,xsh,ysh, mr
    UD IC x11,x45,x46,x47,x48,x44
    <angdoc>_alntmp
    GOTO LB23
  ENDIF
  IF(x22.eq.4)THEN ; SAP
    ;         pcl, rt,xsh,ysh
    UD IC x11,x45,x46,x47,x48
    <angdoc>_alntmp
    x44=1 ;no mirroring
    GOTO LB23
  ENDIF
  VM
  echo ERROR...Alignment format not recognized.
  EN
  LB23 ;alignment format found

  UD IC x45,x31,x32 ; pclnum,micnum
  <serlist>
  IF(x45.ne.x31)THEN
    VM
    echo ERROR in <serlist>...Particle must equal key to find micro number.
    EN
  ENDIF

  x30=x32-x23 ; convert mic num to dcb num
  IF(x30.ne.x99)THEN ; this is a new mic, get tilt params and do corrections
    VM
    echo -n '   Micro '{%F7.1%x32}.
    x99=x30 ;update current micnum
    DOC REN
    <dcbtmpl>x99
    <angdoc>bren
    UD 4,x16,x17,x18   ;x16:theta, x17:gamma(leftimg-axis), x18:phi(rtimg-axis)
    <angdoc>bren
    UD E
    DE
    <angdoc>bren
    x25=abs(x16)
    IF(x25.lt.1)THEN
      VM
      echo ERROR..Micro was not tilted - check your dcb files
      EN
    ENDIF
    ;Web writes +theta,gamma,phi for negative tilt with untilted always on left & tilted on right
    ;TiltAligner writes +theta,gamma,phi (or -theta,phi,gamma if tilted on left)
    IF(x16.lt.0.0)THEN ;theta is negative then tilted on left,untilt on right
      x33=x18    ;store old phi
      x18=x17    ;new phi = old gamma ;phi is tilted axis (x18)
      x17=x33    ;new gamma = old phi ;gamma is untilted axis (x17)
      VM
      echo -n ".tilted micro was picked on the left."
    ENDIF

    x33=0
    IF(x17.lt.-90)x33=1
    IF(x17.gt.90)x33=1
    IF(x18.lt.-90)x33=1
    IF(x18.gt.90)x33=1
    IF(x33.eq.1)THEN
      VM
      echo "ERROR..axis rotations must be between +90 and -90 degrees"
    ENDIF

    IF(x24.eq.1)THEN ;far-from-focus on left
      x16=-x25
      VM
      echo ".Theta is negative, tilt axes are between +90 and -90"
      GOTO LB24
    ENDIF
    IF(x24.eq.2)THEN ;far-from-focus on right
      x16=-x25
      x17=x17+180
      x18=x18+180
      VM
      echo ".Theta is negative, tilt axes are between +90 and +270"
      GOTO LB24
    ENDIF
    IF(x24.eq.3)THEN ;far-from-focus on top
      x16=-x25
      IF(x17.gt.0)x17=x17-180
      IF(x18.gt.0)x18=x18-180
      VM
      echo ".Theta is negative, tilt axes are between 0 and -180"
      GOTO LB24
    ENDIF
    IF(x24.eq.4)THEN ;far-from-focus on bottom
      x16=-x25
      IF(x17.lt.0)x17=x17+180
      IF(x18.lt.0)x18=x18+180
      VM
      echo ".Theta is negative, tilt axes are between 0 and +180"
      GOTO LB24
    ENDIF
    VM
    echo "Tilt direction specified incorrectly: far from focus on (1)=left (2)=right (3)=top (4)=bottom"
    EN
    LB24
  ENDIF ;found new micro, corrected tilt angle and tiltaxis rotations

  ;calculating euler projection angles
  x34=-1*(x46+x17)  ;phi(z) = -1(inplane rotation + untilted axis rotation) 
  x33=x16           ;theta(y)
  x35=x18           ;psi(z)
  ;adjust for mirrors
  IF(x44.lt.0)THEN ;particle matched mirror reference
    SA E x34,x33,x35
    (0,180,0)
    x34,x33,x35
    ;this also works
    ;x34=-x34-180 ;untilted particle matched mirror reference then phi from opposite side
    ;x33=-x33+180 ;untilted particle matched mirror reference then flip tilt angle
    ;x35=x35+180  ;untilted particle matched mirror reference then in plane upside-down
  ENDIF
  IF(x34.lt.0.0)x34=x34+360 ; add 360 to angles less than 0
  IF(x34.ge.360.0)x34=x34-360 ; subtract 360 from angles greater than

  ;save euler angles for particle number x45
  ; psi (x35) = tilted micro rotation from y-axis (called "phi" in dcb) 
  ; tta (x33) = tilt angle
  ; phi (x34) = -(inplane alignment rotation + untilted micro rotation (gamma))
  ;     pcl psi tta phi
  SD IC x45,x35,x33,x34
  angles_ic
LB1  ; next class
UD ICE
<serlist>
UD ICE
<angdoc>_alntmp
DE
<angdoc>_alntmp
SD IC COPY
angles_ic
<angdoc>
SD IC END
angles_ic

VM
echo ...<angdoc> written.

RE

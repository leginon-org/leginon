; Syntax: @refgrp
; Version: 2009.12.11 Ed Brignole
; Description: 
;   groups particles according to multi-reference alignment
;   rotates/mirrors images according to alignment
;   generates class averages, variances, and particle membership lists
; Input:
;   alignment doc (format automatically detected)
;    * apsh format: 15 column (psi,tta,phi,grp,pcl#,rt,xsh,ysh,nrefs,dif,cc,rt,xsh,ysh,mr)
;    * apxq format: 7 column (grpmr,cc,rt,xsh,ysh,pcl#)
;    * prxym format: 5 column (pcl#,rt,xsh,ysh,grpmr)
; Output:
;   grplist: key,ref,num+,num-
;   grp*** : key,pclnum,rt,xsh,ysh,grpmr = PRXYM format
;   avg@ : class average
;   var@ : class variance

FR
?IN.Alignment parameters doc (dir/alndoc)?<alndoc>

FR
?IN.Template of particles to average (dir/pcl@*****)?<pcltmpl>

FR
?OUT.Existing output directory (dir)?<alndir>

; ~~~~~ start ~~~~~

x99=0
IQ FI x99
_1
IF(x99.eq.1)THEN
  VM
  echo 'ERROR:  _1 already exists.'
  VM
  echo '    _1 to _9 are reserved for scripts! Use _11 and above for procedures!'
  EN
ENDIF

x99=0
IQ FI x99
<alndir>/grplist
IF(x99.eq.1)THEN
  VM
  echo WARNING: <alndir>/grplist already exists. Overwriting.
  DE
  <alndir>/grplist
ENDIF

UD N x41,x40
<alndoc>
UD E

SD /       class        total      positive       mirror
<alndir>/grplist

;CLASS TRACKER
x44=0 ;classnum tracker
x20=0 ;class counter

IF(x40.eq.15)THEN ;;;;;;;;;;;;BEGIN APSH SORTING AND COUNTING MODULE;;;;;;;;;;;;
  VM
  echo -n Sorting APSH format <alndoc> into classes..

  DOC SORT ;sort by image number
  <alndoc>
  <alndir>/apsh_tmp
  (5) ;sort by pclnum
  Y

  UD N x41
  <alndir>/apsh_tmp
  ;         psi,tta,phi,ref,img,rt ,xsh,ysh,npj,ang,ccc,psi,xsh,ysh,mr
  UD IC x41,x21,x22,x23,x24,x37,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35
  <alndir>/apsh_tmp
  FS
  <pcltmpl>x37
  FI x36
  <pcltmpl>x37
  (12)
  UD ICE
  <alndir>/apsh_tmp
  DE
  <alndir>/apsh_tmp

  x99=0
  IQ FI x99
  <alndir>/apsh_tmp
  IF(x99.eq.1)THEN
    VM
    echo ERROR: apsh_tmp was not deleted.
  ENDIF

  DOC SORT
  <alndoc>
  <alndir>/apsh_tmp
  (4)    ;sort by refnum
  Y

  UD N,x41
  <alndir>/apsh_tmp
  DO LB1 x11=1,x41  ;FOR EACH PARTICLE
    ;         psi,tta,phi,ref,img,rt ,xsh,ysh,npj,ang,ccc,psi,xsh,ysh,mr
    UD IC x11,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35
    <alndir>/apsh_tmp

    x24=abs(x24) ;classnum

    IF(x44.lt.x24)THEN  ;THIS IS A NEW CLASS
      ;CLOSE PREVIOUS CLASS AND WRITE COUNTER
      IF(x11.gt.1)THEN ;(NOT ON FIRST LOOP)
        x20=x20+1 ;increment class counter
        SD x20,x44,x45,x42,x43
        <alndir>/grplist
        IF(x45.gt.0)THEN ;there are particles in this class
          SD IC COPY
          grpdoc_ic
          <alndir>/grp{***x44}
          SD IC END
          grpdoc_ic
          AS R
          _1@****** ;<alndir>/rtp@******   ;
          <alndir>/grp{***x44}
          A
          <alndir>/avg@{***x44}
          <alndir>/var@{***x44}
        ENDIF ;prior class had particles
        DE
        _1
      ENDIF ;skip to here on first loop

      MS I
      _1@
      x36,x36,(1) ;size
      x41      ;numpcls
      x37      ;maxnum

      ;RESET COUNTERS
      x42=0 ;NONMIRROR COUNTER
      x43=0 ;MIRROR COUNTER
      x45=0 ;MR+NM COUNTER
      SD IC NEW
      grpdoc_ic
      (5),x41
      x44=x24 ;update to new class
    ENDIF ;new class 

    IF(x35.ge.0)THEN  ;NOT MIRRORED
      x35=x24
      x42=x42+1  ;increment nonmirror particle counter

      RT SQ
      <pcltmpl>x25
      _1@{******x25}   ;<alndir>/rtp@{******x25}   ;
      x26,(1.0)
      x27,x28
    ELSE  ;MIRRORED
      x35=-1*x24
      x43=x43+1   ;increment mirror particle counter

      RT SQ
      <pcltmpl>x25
      _2 ;<alndir>/rtp@{******x25}
      x26,(1.0)
      x27,x28

      MR
      _2
      _1@{******x25}   ;<alndir>/rtp@{******x25}
      Y ;yaxis
    ENDIF ;MIRRORED/NOT-MIRRORED
    x45=x45+1
    ;     key,pcl,rt ,xsh,ysh,grpmr
    SD IC x45,x25,x26,x27,x28,x35
    grpdoc_ic  ;<alndir>/grp{***x44}  

  LB1  ;END LOOP FOR EACH PARTICLE
  ;CLOSE ALIGNMENT DOC
  UD ICE
  <alndir>/apsh_tmp
  DE
  <alndir>/apsh_tmp

  ;CLOSE CLASS LIST
  x20=x20+1
  SD x20,x44,x45,x42,x43
  <alndir>/grplist
  SD E
  <alndir>/grplist

  ;SAVE LAST CLASS
  SD IC COPY
  grpdoc_ic
  <alndir>/grp{***x44}
  SD IC END
  grpdoc_ic ;<alndir>/grp+{***x44} 

  AS R
  _1@****** ;<alndir>/rtp@******   ;
  <alndir>/grp{***x44}
  A
  <alndir>/avg@{***x44}
  <alndir>/var@{***x44}

  ;CP
  ;_1@
  ;<alndir>/rtp@
  DE
  _1
  DE
  _2
  GOTO LB90
ENDIF  ;;;;;;;;;;END APSH SORTING AND COUNTING MODULE;;;;;;;;

IF(x40.eq.7)THEN ;;;;;;;;;;;;BEGIN APXQ SORTING AND COUNTING MODULE;;;;;;;;;;;;
  VM
  echo -n Sorting APXQ format <alndoc> into classes..

  DOC SORT ;sort by image number
  <alndoc>
  <alndir>/apxq_tmp
  (6) ;sort by pclnum
  Y

  UD N x41
  <alndir>/apxq_tmp
  ;         ref,ccc,rt ,xsh,ysh,img
  UD IC x41,x24,x31,x26,x27,x28,x37
  <alndir>/apxq_tmp
  FS
  <pcltmpl>x37
  FI x36
  <pcltmpl>x37
  (12)
  UD ICE
  <alndir>/apxq_tmp
  DE
  <alndir>/apxq_tmp

  x99=0
  IQ FI x99
  <alndir>/apxq_tmp
  IF(x99.eq.1)THEN
    VM
    echo ERROR: apsh_tmp was not deleted.
  ENDIF

  DOC SORT
  <alndoc>
  <alndir>/apxq_tmp
  (1)    ;sort by refnum
  Y

  UD N,x41
  <alndir>/apxq_tmp
  DO LB2 x11=1,x41  ;FOR EACH PARTICLE
    ;         ref,ccc,rt ,xsh,ysh,img
    UD IC x11,x24,x31,x26,x27,x28,x25
    <alndir>/apxq_tmp
    
    x35=x24/abs(x24) ;set mirror
    x24=abs(x24) ;classnum

    IF(x44.lt.x24)THEN  ;THIS IS A NEW CLASS
      ;CLOSE PREVIOUS CLASS AND WRITE COUNTER
      IF(x11.gt.1)THEN ;(NOT ON FIRST LOOP)
        x20=x20+1 ;increment class counter
        SD x20,x44,x45,x42,x43
        <alndir>/grplist
        IF(x45.gt.0)THEN ;there are particles in this class
          SD IC COPY
          grpdoc_ic
          <alndir>/grp{***x44}
          SD IC END
          grpdoc_ic
          AS R
          _1@****** ;<alndir>/rtp@******   ;
          <alndir>/grp{***x44}
          A
          <alndir>/avg@{***x44}
          <alndir>/var@{***x44}
        ENDIF ;prior class had particles
        DE
        _1
      ENDIF ;skip to here on first loop

      MS I
      _1@
      x36,x36,(1) ;size
      x41      ;numpcls
      x37      ;maxnum

      ;RESET COUNTERS
      x42=0 ;NONMIRROR COUNTER
      x43=0 ;MIRROR COUNTER
      x45=0 ;MR+NM COUNTER
      SD IC NEW
      grpdoc_ic
      (5),x41
      x44=x24 ;update to new class
    ENDIF ;new class 

    IF(x35.ge.0)THEN  ;NOT MIRRORED
      x35=x24
      x42=x42+1  ;increment nonmirror particle counter

      RT SQ
      <pcltmpl>x25
      _1@{******x25}   ;<alndir>/rtp@{******x25}   ;
      x26,(1.0)
      x27,x28
    ELSE  ;MIRRORED
      x35=-1*x24
      x43=x43+1   ;increment mirror particle counter

      RT SQ
      <pcltmpl>x25
      _2 ;<alndir>/rtp@{******x25}
      x26,(1.0)
      x27,x28

      MR
      _2
      _1@{******x25}   ;<alndir>/rtp@{******x25}
      Y ;yaxis
    ENDIF ;MIRRORED/NOT-MIRRORED
    x45=x45+1
    ;     key,pcl,rt ,xsh,ysh,grpmr
    SD IC x45,x25,x26,x27,x28,x35
    grpdoc_ic  ;<alndir>/grp{***x44}  

  LB2  ;END LOOP FOR EACH PARTICLE
  ;CLOSE ALIGNMENT DOC
  UD ICE
  <alndir>/apxq_tmp
  DE
  <alndir>/apxq_tmp

  ;CLOSE CLASS LIST
  x20=x20+1
  SD x20,x44,x45,x42,x43
  <alndir>/grplist
  SD E
  <alndir>/grplist

  ;SAVE LAST CLASS
  SD IC COPY
  grpdoc_ic
  <alndir>/grp{***x44}
  SD IC END
  grpdoc_ic ;<alndir>/grp+{***x44} 

  AS R
  _1@****** ;<alndir>/rtp@******   ;
  <alndir>/grp{***x44}
  A
  <alndir>/avg@{***x44}
  <alndir>/var@{***x44}

  ;CP
  ;_1@
  ;<alndir>/rtp@
  DE
  _1
  DE
  _2
  GOTO LB90
ENDIF  ;;;;;;;;;;END APXQ SORTING AND COUNTING MODULE;;;;;;;;

IF(x40.eq.5)THEN ;;;;;;;;;;;;BEGIN PRXYM SORTING AND COUNTING MODULE;;;;;;;;;;;;
  VM
  echo -n Sorting PRXYM format <alndoc> into classes..

  DOC SORT ;sort by image number
  <alndoc>
  <alndir>/prxym_tmp
  (1) ;sort by pclnum
  Y

  UD N x41
  <alndir>/prxym_tmp
  ;         img,rt ,xsh,ysh,gmr
  UD IC x41,x37,x26,x27,x28,x24
  <alndir>/prxym_tmp
  FS
  <pcltmpl>x37
  FI x36
  <pcltmpl>x37
  (12)
  UD ICE
  <alndir>/prxym_tmp
  
  DE
  <alndir>/prxym_tmp
  
  x99=0
  IQ FI x99
  <alndir>/prxym_tmp
  IF(x99.eq.1)THEN
    VM
    echo ERROR: prxym_tmp was not deleted.
  ENDIF

  
  ;so separate into mirror from group
  SD IC NEW
  prxym_ic
  (6),x41
  
  DO LB4 x14=1,x41
    UD IC x14,x37,x26,x27,x28,x24
    <alndoc>
    
    x35=1
    IF(x24.lt.0)x35=-1
    
    x24=abs(x24) ;classnum

    SD IC x14,x37,x26,x27,x28,x24,x35
    prxym_ic
  LB4
  UD ICE
  <alndoc>
  
  SD IC COPY
  prxym_ic
  <alndir>/prxym_tmp2
  SD IC END
  prxym_ic

  DOC SORT
  <alndir>/prxym_tmp2
  <alndir>/prxym_tmp
  (5)    ;sort by refnum
  Y
  
  DE
  <alndir>/prxym_tmp2

  UD N,x41
  <alndir>/prxym_tmp
  DO LB3 x11=1,x41  ;FOR EACH PARTICLE
    ;         img,rt ,xsh,ysh,grp,mr
    UD IC x11,x25,x26,x27,x28,x24,x35
    <alndir>/prxym_tmp
    
    IF(x44.lt.x24)THEN  ;THIS IS A NEW CLASS
      ;CLOSE PREVIOUS CLASS AND WRITE COUNTER
      IF(x11.gt.1)THEN ;(NOT ON FIRST LOOP)
        x20=x20+1 ;increment class counter
        SD x20,x44,x45,x42,x43
        <alndir>/grplist
        
        IF(x45.gt.0)THEN ;there are particles in this class
          SD IC COPY
          grpdoc_ic
          <alndir>/grp{***x44}
          SD IC END
          grpdoc_ic
          
          AS R
          _1@****** ;<alndir>/rtp@******   ;
          <alndir>/grp{***x44}
          A
          <alndir>/avg@{***x44}
          <alndir>/var@{***x44}
        ENDIF ;prior class had particles
        DE
        _1
      ENDIF ;skip to here on first loop

      MS I
      _1@
      x36,x36,(1) ;size
      x41      ;numpcls
      x37      ;maxnum

      ;RESET COUNTERS
      x42=0 ;NONMIRROR COUNTER
      x43=0 ;MIRROR COUNTER
      x45=0 ;MR+NM COUNTER
      SD IC NEW
      grpdoc_ic
      (5),x41
      x44=x24 ;update to new class
    ENDIF ;new class 

    IF(x35.ge.0)THEN  ;NOT MIRRORED
      x35=x24
      x42=x42+1  ;increment nonmirror particle counter

      RT SQ
      <pcltmpl>x25
      _1@{******x25}   ;<alndir>/rtp@{******x25}   ;
      x26,(1.0)
      x27,x28
    ELSE  ;MIRRORED
      x35=-1*x24
      x43=x43+1   ;increment mirror particle counter

      RT SQ
      <pcltmpl>x25
      _2 ;<alndir>/rtp@{******x25}
      x26,(1.0)
      x27,x28

      MR
      _2
      _1@{******x25}   ;<alndir>/rtp@{******x25}
      Y ;yaxis
    ENDIF ;MIRRORED/NOT-MIRRORED
    x45=x45+1
    ;     key,pcl,rt ,xsh,ysh,grpmr
    SD IC x45,x25,x26,x27,x28,x35
    grpdoc_ic  ;<alndir>/grp{***x44}  

  LB3  ;END LOOP FOR EACH PARTICLE
  ;CLOSE ALIGNMENT DOC
  UD ICE
  <alndir>/prxym_tmp
  DE
  <alndir>/prxym_tmp

  ;CLOSE CLASS LIST
  x20=x20+1
  SD x20,x44,x45,x42,x43
  <alndir>/grplist
  SD E
  <alndir>/grplist

  ;SAVE LAST CLASS
  SD IC COPY
  grpdoc_ic
  <alndir>/grp{***x44}
  SD IC END
  grpdoc_ic ;<alndir>/grp+{***x44} 

  AS R
  _1@****** ;<alndir>/rtp@******   ;
  <alndir>/grp{***x44}
  A
  <alndir>/avg@{***x44}
  <alndir>/var@{***x44}

  ;CP
  ;_1@
  ;<alndir>/rtp@
  DE
  _1
  DE
  _2
  GOTO LB90
ENDIF  ;;;;;;;;;;END PRXYM SORTING AND COUNTING MODULE;;;;;;;;

VM
echo ERROR: unrecognized alignment format has {**x40} columns.
EN

LB90 ;completed
VM
echo '.class averages, variances, and particle lists written.'

RE

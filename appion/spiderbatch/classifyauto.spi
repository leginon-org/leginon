(x97,x98,x99) ; factors,weight(0-1),numclasses/threshold
; Syntax: @classifyauto(nfact,weight,nclass)
; Description:
;  Automated correspondence analysis and classification
;  #factors & #classes (or threshold) must be predetermined
;
; 1) RUN CORAN (CA S)
; 5) CLUSTERS WITH HIERARCHICAL ASCENDANT CLASSIFICATION (CL HC)
; 7) DETERMINES CLASS MEMBERSHIP (CL HD,CL HE) AND AVERAGES (AS R)

FR
?IN.Particles template to classify (dir/ser@*****)?<pcltmpl1>
FR
?IN.Particles template to average (dir/ser@*****)?<pcltmpl2>
FR
?IN.List of particles (dir/doc)?<pcllist>
FR
?IN.Mask (dir/img)?<mask>
FR
?OUT.Coran prefix (dir/c1)?<prefix>

; ~~~~~ start ~~~~~
VM
echo Classifying into <prefix>_

SD /    firstfactor  lastfactor  threshold   numclasses  
<prefix>_thresh

; -------mock classify if only 1 particle in this list
UD N x20
<pcllist>
UD E
IF(x20.le.1)THEN ; skip classification and make only 1 class
 x89=1 ;number of classes
 x88=0 ;factor weight
 
 SD x89,x89,x20
 <prefix>_thrk
 SD x88,x88,x88,x89  ; 0,0,0,1 no factors or threshold needed for 1 class
 <prefix>_thresh
 
 VM
 cp <pcllist>.$DATEXT <prefix>_thr001.$DATEXT

 AS R
 <pcltmpl2>
 <pcllist>
 A
 <prefix>_avg@001
 <prefix>_var@001
 GOTO LB99 ; escape
ENDIF
; --------BEGIN CORRESPONDANCE ANALYSIS
@coran(x97) ;lastfactor
<pcltmpl1>  ; ALIGNED PARTICLES TEMPLATE
<pcllist>   ; DOC LIST OF PARTICLES
<mask>      ; MASK FOR CLASSIFICATION
<prefix>  ; OUTPUT PREFIX
; -------BEGIN HIERARCHICAL ASCENDANT CLASSIFICATION
x95=1 ; first factor
@clhc_weight(x95,x97,x98) ; firstfactor,lastfactor,factorweight
<prefix>      ; coran file
; -------FIND THRESHOLD
IF(x99.le.1)THEN
  x22=x99 ; threshold was given
ELSE ; threshold must be determined from number of expected classes
  DOC SORT
  <prefix>_dendoc
  <prefix>_dendocsort
  (2)
  Y

  UD N x23
  <prefix>_dendocsort

  x25=1+x23-x99 ; key to find threshold - sorted from bottom

  IF(x25.lt.1)x25=x23 ; can't have more groups than particles

  UD x25,x21,x22
  <prefix>_dendocsort
  UD E
  DE
  <prefix>_dendocsort
ENDIF
; --------CLUSTER PARTICLES AND CALCULATE AVERAGES
IF(x22.le.0)THEN
  VM
  echo Threshold is zero. Switching to Kmeans clustering.
  
  @clust_kmeans(x97,x99)
  <prefix>
  <pcltmpl2>
ELSE
  @clust_thresh(x22)
  <pcltmpl2>  ; ALIGNED PARTICLES TEMPLATE
  <prefix> ; ASSUMES _dendoc FILE EXISTS
ENDIF

; firstfact,lastfact,thresh,numclasses
SD 1,x95,x97,x22,x99
<prefix>_thresh
SD E
<prefix>_thresh

; ------- CLEAN UP
DE
<prefix>_SET
DE
<prefix>_SEQ

LB99 ; escape with one class if not enough particles to classify
RE

[x97,x98,x99] ; [lastfactor,scalefactorweight(0-1),#classes/threshold]
; CorAn & HierarchicalAscendantClustering
; Ed Brignole version 20090207
;
; MUST PREDETERMINE FACTORS AND NUMBER OF GROUPS
; requires:
;  coran.spi
;  clhc_weight.spi
;  clust_thresh.spi

FR
?IN.Particle template to classify (dir/ser*****)?[pcltmpl1]
FR
?IN.Particle template for averages (dir/ser*****)?[pcltmpl2]
FR
?IN.List of particles (dir/doc)?[pcllist]
FR
?IN.Mask for classification (dir/img)?[mask]
FR
?OUT.Coran output prefix with existing directory (dir/prefix)?[prefix]

; ~~~~~ start ~~~~~
VM
echo Classifying into [prefix]_

SD /    firstfactor  lastfactor  threshold   #classes  
[prefix]_thresh

; -------mock classify if only 1 particle in this list
UD N x20
[pcllist]
UD E
IF(x20.le.1)THEN ; skip classification and make only 1 class
 x89=1 ;number of classes
 x88=0 ;factor weight
 SD x89,x89,x20
 [prefix]_thrk
 SD x88,x88,x88,x89  ; 0,0,0,1 no factors or threshold needed for 1 class
 [prefix]_thresh
 VM
 cp [pcllist].$DATEXT [prefix]_thr001.$DATEXT
 VM
 AS R
 [pcltmpl2]
 [pcllist]
 A
 [prefix]_avg001
 [prefix]_var001
 GOTO LB99 ; escape
ENDIF
; --------BEGIN CORRESPONDANCE ANALYSIS
@coran[x97] ;lastfactor
[pcltmpl1]  ; ALIGNED PARTICLES TEMPLATE
[pcllist]   ; DOC LIST OF PARTICLES
[mask]      ; MASK FOR CLASSIFICATION
[prefix]  ; OUTPUT PREFIX
; -------BEGIN HIERARCHICAL ASCENDANT CLASSIFICATION
x95=1 ; first factor
@clhc_weight[x95,x97,x98] ; firstfactor,lastfactor,factorweight
[prefix]      ; coran file
; -------FIND THRESHOLD
IF(x99.lt.1)THEN
  x22=x99 ; threshold was given
ELSE ; threshold must be determined from number of expected classes
  DOC SORT
  [prefix]_dendoc
  [prefix]_dendocsort
  (2)
  Y

  UD N x23
  [prefix]_dendocsort

  x25=1+x23-x99 ; key to find threshold - sorted from bottom

  IF(x25.lt.1)x25=x23 ; can't have a negative number of groups (ie more groups than particles)

  UD x25,x21,x22
  [prefix]_dendocsort
  UD E
  DE
  [prefix]_dendocsort
ENDIF

; firstfact,lastfact,thresh,numclasses
SD 1,x95,x97,x22,x99
[prefix]_thresh

; --------CLUSTER PARTICLES AND CALCULATE AVERAGES
@clust_thresh[x22]
[pcltmpl2]  ; ALIGNED PARTICLES TEMPLATE
[prefix] ; ASSUMES _dendoc FILE EXISTS
; ------- CLEAN UP
DE
[prefix]_SET
DE
[prefix]_SEQ

LB99 ; escape with one class if not enough particles to classify
RE

; RT SQ LOOP
; Rotates and shifts particles according to the alignment parameters 
; could be improved by reducing input/output - rotate incore
; be sure to doc ren the transformation
; if output stack doesn't exist then precede this script with MS I command

RR x20
?IN.TRANSFORMATION DOC FORMAT (APSH/APREF=1,APNQ=2,APSR=3,SAP=4,ALL=5)?
IF(x20.eq.3)THEN
FR
?IN.DOCUMENT LIST OF PARTICLES (dir/doc)?[pcllist]
ENDIF
IF(x20.eq.5)THEN
FR
?IN.DOCUMENT LIST OF PARTICLES (dir/doc)?[pcllist]
ENDIF
FR
?IN.TRANSFORMATION DOC (dir/doc)?[rtdoc]
FR
?IN.INPUT PARTICLE TEMPLATE (dir/ser*****)?[pcltmpl]
FR
?OUT.OUTPUT PARTICLE INDEXED STACK (dir/stack@)?[outtmpl]

; ~~~~~ start ~~~~~
x10=1 ; scale factor

; READ NUMBER OF TRANSFORMATIONS
UD N x11
[rtdoc]
UD E

IF(x20.eq.1)THEN  ; apsh format
  VM
  echo -n Rotating {%F9.1%x11} particles..
  DOC SORT
  [rtdoc]
  [rtdoc]_sort
  (5)
  Y
  UD IC x11,x41,x42,x43,x44,x21
  [rtdoc]_sort
  FS
  [pcltmpl]x21
  FI x60
  [pcltmpl]x21
  (12)
  MS I
  _1@
  x60,x60,(1)
  x11 ;numpcls
  x21 ;maxnum
  DO LB1 x90=1,x11   ; FOR EACH PARTICLE
    UD IC x90,x41,x42,x43,x44,x21,x46,x47,x48,x49,x50,x51,x31,x32,x33,x55
    [rtdoc]_sort
    RT SQ
    [pcltmpl]x21     ; IN
    _1@{******x21}   ;[outtmpl]x21     ; OUT
    x31,x10     ; ANGLE,SCALE
    x32,x33     ; X,Y
  LB1 ; next particle x11
  UD ICE
  [rtdoc]_sort
  DE
  [rtdoc]_sort
ENDIF

IF(x20.eq.2)THEN  ; apnq format
  VM
  echo -n Rotating {%F9.1%x11} particles..
  DOC SORT
  [rtdoc]
  [rtdoc]_sort
  (6)
  Y
  UD IC x11,x41,x42,x31,x32,x33,x21
  [rtdoc]_sort
  FS
  [pcltmpl]x21
  FI x60
  [pcltmpl]x21
  (12)
  MS I
  _1@
  x60,x60,(1)
  x11 ;numpcls
  x21 ;maxnum
  DO LB2 x90=1,x11   ; FOR EACH PARTICLE
    UD IC x90,x41,x42,x31,x32,x33,x21
    [rtdoc]_sort
    RT SQ
    [pcltmpl]x21     ; IN
    _1@{******x21}   ;[outtmpl]x21     ; OUT
    x31,x10     ; ANGLE,SCALE
    x32,x33     ; X,Y
  LB2 ; next particle x11
  UD ICE
  [rtdoc]_sort
  DE
  [rtdoc]_sort
ENDIF

IF(x20.eq.3)THEN  ; apsr format
  UD N x12
  [pcllist]
  UD E
  IF (x11.NE.x12) THEN
    VM
    echo ERROR...Number of particles and rotations not same, exit script
    RE
  ENDIF
  DOC SORT
  [pcllist]
  [pcllist]_sort
  (1)
  Y
  UD IC x11,x21
  [pcllist]_sort
  FS
  [pcltmpl]x21
  FI x60
  [pcltmpl]x21
  (12)
  MS I
  _1@
  x60,x60,(1)
  x11 ;numpcls
  x21 ;maxnum
  VM
  echo -n Rotating {%F9.1%x11} particles..
  DO LB3 x90=1,x11   ; FOR EACH PARTICLE
    UD IC x90,x31,x32,x33
    [rtdoc]
    UD IC x90,x21
    [pcllist]
    RT SQ
    [pcltmpl]x21     ; IN
    _1@{******x21}   ;[outtmpl]x21     ; OUT
    x31,x10     ; ANGLE,SCALE
    x32,x33     ; X,Y
  LB3 ; next particle x11
  UD ICE
  [pcllist]
  DE
  [pcllist]_sort
  UD ICE
  [rtdoc]
ENDIF

IF(x20.eq.4)THEN  ; sap cumulative format
  VM
  echo -n Rotating {%F9.1%x11} particles..
  DOC SORT
  [rtdoc]
  [rtdoc]_sort
  (1)
  Y
  UD IC x11,x21,x31,x32,x33
  [rtdoc]_sort
  FS
  [pcltmpl]x21
  FI x60
  [pcltmpl]x21
  (12)
  MS I
  _1@
  x60,x60,(1)
  x11 ;numpcls
  x21 ;maxnum
  DO LB4 x90=1,x11   ; FOR EACH PARTICLE
    UD IC x90,x21,x31,x32,x33
    [rtdoc]
    RT SQ
    [pcltmpl]x21     ; IN
    _1@{******x21}   ;[outtmpl]x21     ; OUT
    x31,x10     ; ANGLE,SCALE
    x32,x33     ; X,Y
  LB4 ; next particle x11
  UD ICE
  [rtdoc]_sort
  DE
  [rtdoc]_sort
ENDIF

IF(x20.eq.5)THEN  ; apply same transformation to all particles
  UD 1,x31,x32,x33
  [rtdoc]
  UD E
  DOC SORT
  [pcllist]
  [pcllist]_sort
  (1)
  Y
  UD N x11
  [pcllist]_sort
  UD IC x11,x21
  [pcllist]_sort
  FS
  [pcltmpl]x21
  FI x60
  [pcltmpl]x21
  (12)
  MS I
  _1@
  x60,x60,(1)
  x11 ;numpcls
  x21 ;maxnum
  VM
  echo -n Rotating {%F9.1%x11} particles..
  DO LB5 x90=1,x11   ; FOR EACH PARTICLE
    UD IC x90,x21
    [pcllist]_sort
    RT SQ
    [pcltmpl]x21        ; IN
    _1@{******x21}      ;[outtmpl]x21     ; OUT
    x31,x10     ; ANGLE,SCALE
    x32,x33     ; X,Y
  LB5 ; next particle x11
  UD ICE
  [pcllist]_sort
  DE
  [pcllist]_sort
ENDIF

CP
_1@
[outtmpl]
x11 ;number in stack - not needed unless this is a new inline stack
x21 ;max particle number

VM
echo .done.

DE
_1

RE

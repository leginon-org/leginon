; Syntax: @maskshift
; Description:
;   for each aligned particle
;     replace pixels under mask with mean under mask
;     mask must contain values between 1 and 0
;     center masked images using integer shift (cg of mask)

; Input: list of particles, particle template, mask
; Output: masked particles, shift_doc

FR
?IN.List of particles (dir/list)?<list>
FR
?IN.Aligned particles template (dir/ser@*****)?<pcltmpl>
FR
?IN.Mask (dir/mask)?<mask>
FR
?OUT.Masked particles template (dir/msk@*****)?<masktmpl>
FR
?OUT.Center-shift doc (dir/shiftdoc)?<shiftdoc>

; ~~~~~ start ~~~~~

; find mask center of gravity
CG x22,x23 
<mask> 
(0.1) ; threshold

x20=0
x22=INT(-x22)
x23=INT(-x23)

UD N x21   ; how many particles in group
<list>

VM
echo -n Masking {%F7.1%x21} particles..

UD IC x21,x31
<list>
FS
<pcltmpl>x31
FI x24,x25
<pcltmpl>x31
(12,2) ;col,row
FS
<mask>
FI x26,x27,x28,x29
<mask>
(12,2,7,8) ;col,row,max,min

IF(x24.ne.x26)THEN
  VM
  echo Error..Mask and Particles must have same dimensions.
  EN
ENDIF
IF(x25.ne.x27)THEN
  VM
  echo Error..Mask and Particles must be same dimensions.
  EN
ENDIF
IF(x28.gt.1)THEN
  VM
  echo Error...Mask must not have values greater than 1.
  EN
ENDIF
IF(x29.lt.0)THEN
  VM
  echo Error..Mask must not have values less than 0.
  EN
ENDIF

NEG ; invert mask AR with 1-P1 is inaccurate (~1e-6)
<mask>
_1

DO LB1 x11=1,x21   ; for each particle
UD IC x11,x31  ; find particle number
<list>

x99=0
IF(x99.eq.1)THEN ;replaces values under mask with image average
 MM C ;soft mask using whole image average
 <pcltmpl>x31
 <mask>
 _2
 *
 GOTO LB99
ENDIF

;instead would rather replace values under mask with use average under mask
; (weighted for soft pixels in mask)
CP
<pcltmpl>x31
_2 ;particle incore

FS
_1 ;mask
FI x32 ;avg weight of mask
_1 ;mask
(9)

MU
_1 ;inverted mask
_2 ;particle
_3 ;weighted image
*

FS
_3
FI x33 ;weighted avg under mask
_3
(9)

;x33=0 ;sum for each pixel ((1-mask)*image)
;x32=0 ;sum for each pixel (1-mask)
;DO LB2 x12=1,x24 ;for each col
;DO LB3 x13=1,x25 ;for each row
;  GP x34
;  _2 ;particle
;  x13,x12 ;col,row or maybe row,col
;  GP x35
;  _1 ;(1-mask)
;  x13,x12 ;col,row or maybe row,col
;  x33=x33+(x34*x35) ;sum of mask*image
;  x32=x32+x35 ;sum of mask
;LB3 ;next row
;LB2 ;next col
x33=x33/x32 ;avg(maskedimage)/avg(mask) = avg under mask

;(particle * mask) + (avgundermask*(1-mask))
AR
_1 ;1-mask
_3 ;(1-mask)*avgundermask
P1*x33

MU
_2
<mask>
_4

AD
_4 ;particle * mask
_3 ;adjustment of masked values
_2 ;masked particle

;now replace values under mask with x30 - weighting for soft pixels in mask)
;DO LB4 x14=1,x24 ;for each col
;DO LB5 x15=1,x25 ;for each row
;  GP x34
;  _1 ;(1-mask)
;  x15,x14
;  GP x35
;  _2 ;particle
;  x15,x14
;  ;newvalue = (oldvalue * mask) + (average * (1-mask))
;  x34=(x35*(1-x34))+(x33*x34)
;  RP
;  _2 ;particle
;  x15,x14
;  x34
;LB5 ;next row
;LB4 ;next col

LB99 ; escape if MM C - replace masked with global image average

SH
_2 ;masked particle
<masktmpl>x31
x22,x23

LB1  ; next particle

UD ICE
<list>

SD / vector for shifting <masktmpl>
<shiftdoc>
SD 1,x20,x22,x23
<shiftdoc>
SD E
<shiftdoc>

DE
_1 ;1-mask
DE
_2 ;masked particle
DE
_3 ;adjustment of masked values
DE
_4 ;particle*mask

VM
echo .masked and shifted.

RE

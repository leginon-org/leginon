; apsrsumsym
; combines 10 alignment rounds into 1
;  considers symmetry in calculating error

; requires fraln10x.spi followed by alnapsr.spi
; apsr directory contains lasti** and lastd** (**=01-10)

FR
?IN.APSR DIRECTORY (dir)?<apsrdir>
FR
?OUT.SUMMED APSR FILE (dir/doc)?<apsrsum>
FR
?OUT.ERROR DOC (dir/doc)?<errordoc>

; ~~~~~ start ~~~~~
MD
VB OFF

x99=0
IQ FI x99
<apsrdir>/lastd10
IF(x99.eq.0)THEN
 VM
 echo <apsrdir>/lastd10 not found in <apsrdir>.
 VM
 echo ...You must first run 10 rounds of apsr followed by alnapsr.
 GOTO LB99
ENDIF

; calculate avg of APSR rounds to check symmetry
AS R
<apsrdir>/lasti**
(1-10)
*
_1
_2
DE
_2



UD N x10
<apsrdir>/lastd10
UD E

;SD /    Particle     Rotation     X-shift      Y-shift      Rt-err      Sh-err     Sym
;<apsrsum>
SD IC NEW
summary_ic
(6),x10

DO LB2 x12=1,20 ; set counter and trackers x80 to x99 = 0
x22=(79)+x12
x{**x22}=0
LB2

DOC COMBINE  ; combine docs so that only requires one incore file
<apsrdir>/lastd**
(1-10)
<apsrdir>/lastdall_tmp

DO LB1 x11=1,x10 ; for each particle

UD IC x11,x30,x31,x32,x33 ; pclnum,rt,x,y
<apsrdir>/lastdall_tmp
x12=x11+x10
UD IC x12,x30,x34,x35,x36
<apsrdir>/lastdall_tmp
x12=x12+x10
UD IC x12,x30,x37,x38,x39
<apsrdir>/lastdall_tmp
x12=x12+x10
UD IC x12,x30,x41,x42,x43
<apsrdir>/lastdall_tmp
x12=x12+x10
UD IC x12,x30,x44,x45,x46
<apsrdir>/lastdall_tmp
x12=x12+x10
UD IC x12,x30,x47,x48,x49
<apsrdir>/lastdall_tmp
x12=x12+x10
UD IC x12,x30,x51,x52,x53
<apsrdir>/lastdall_tmp
x12=x12+x10
UD IC x12,x30,x54,x55,x56
<apsrdir>/lastdall_tmp
x12=x12+x10
UD IC x12,x30,x57,x58,x59
<apsrdir>/lastdall_tmp
x12=x12+x10
UD IC x12,x30,x61,x62,x63
<apsrdir>/lastdall_tmp

; calculate rotation vector sum
x64=(COS(x31)+COS(x34)+COS(x37)+COS(x41)+COS(x44))
x64=(x64+COS(x47)+COS(x51)+COS(x54)+COS(x57)+COS(x61))/10
x65=(SIN(x31)+SIN(x34)+SIN(x37)+SIN(x41)+SIN(x44))
x65=(x65+SIN(x47)+SIN(x51)+SIN(x54)+SIN(x57)+SIN(x61))/10

;keep all angles positive 0 to 360
IF(x64.eq.0)THEN ; avoid division by zero
 IF(x65.lt.0)x67=270
 IF(x65.ge.0)x67=90
;IF(x65.eq.0)x67=NaN;rotation vectors cancel implies symmetry
ENDIF
IF(x64.gt.0)THEN ;quadrant1or4
 IF(x65.lt.0)x67=ata(x65/x64)+360 ;quadrant4
 IF(x65.ge.0)x67=ata(x65/x64) ; quadrant1
ENDIF
IF(x64.lt.0)x67=ata(x65/x64)+180 ;quadrant 2or4

;angle=aco(v1.v2/|v1|x|v2|) or angle=2(asi((sqr(dx^2+dy^2))/2))
x20=((SQR((COS(x31)-COS(x67))**2)+((SIN(x31)-SIN(x67))**2))/2)
IF(x20.gt.1)x20=1  ; fixes floating point error
x20=2*(ASI(x20))

x21=((SQR((COS(x34)-COS(x67))**2)+((SIN(x34)-SIN(x67))**2))/2)
IF(x21.gt.1)x21=1  ; fixes floating point error
x21=2*(ASI(x21))

x22=((SQR((COS(x37)-COS(x67))**2)+((SIN(x37)-SIN(x67))**2))/2)
IF(x22.gt.1)x22=1  ; fixes floating point error
x22=2*(ASI(x22))

x23=((SQR((COS(x41)-COS(x67))**2)+((SIN(x41)-SIN(x67))**2))/2)
IF(x23.gt.1)x23=1  ; fixes floating point error
x23=2*(ASI(x23))

x24=((SQR((COS(x44)-COS(x67))**2)+((SIN(x44)-SIN(x67))**2))/2)
IF(x24.gt.1)x24=1  ; fixes floating point error
x24=2*(ASI(x24))

x25=((SQR((COS(x47)-COS(x67))**2)+((SIN(x47)-SIN(x67))**2))/2)
IF(x25.gt.1)x25=1  ; fixes floating point error
x25=2*(ASI(x25))

x26=((SQR((COS(x51)-COS(x67))**2)+((SIN(x51)-SIN(x67))**2))/2)
IF(x26.gt.1)x26=1  ; fixes floating point error
x26=2*(ASI(x26))

x27=((SQR((COS(x54)-COS(x67))**2)+((SIN(x54)-SIN(x67))**2))/2)
IF(x27.gt.1)x27=1  ; fixes floating point error
x27=2*(ASI(x27))

x28=((SQR((COS(x57)-COS(x67))**2)+((SIN(x57)-SIN(x67))**2))/2)
IF(x28.gt.1)x28=1  ; fixes floating point error
x28=2*(ASI(x28))

x29=((SQR((COS(x61)-COS(x67))**2)+((SIN(x61)-SIN(x67))**2))/2)
IF(x29.gt.1)x29=1  ; fixes floating point error
x29=2*(ASI(x29))

x66=(x20+x21+x22+x23+x24+x25+x26+x27+x28+x29)/10 ; average angular deviation

;track deviation of rotation for each round
x90=x90+x20
x91=x91+x21
x92=x92+x22
x93=x93+x23
x94=x94+x24
x95=x95+x25
x96=x96+x26
x97=x97+x27
x98=x98+x28
x99=x99+x29

; calculate average shift vector
x68=(x32+x35+x38+x42+x45+x48+x52+x55+x58+x62)/10 ; average x-shift
x69=(x33+x36+x39+x43+x46+x49+x53+x56+x59+x63)/10 ; average y-shift
; calculate average distance from mean position
x70=((x32-x68)**2+(x33-x69)**2)**0.5
x71=((x35-x68)**2+(x36-x69)**2)**0.5
x72=((x38-x68)**2+(x39-x69)**2)**0.5
x73=((x42-x68)**2+(x43-x69)**2)**0.5
x74=((x45-x68)**2+(x46-x69)**2)**0.5
x75=((x48-x68)**2+(x49-x69)**2)**0.5
x76=((x52-x68)**2+(x53-x69)**2)**0.5
x77=((x55-x68)**2+(x56-x69)**2)**0.5
x78=((x58-x68)**2+(x59-x69)**2)**0.5
x79=((x62-x68)**2+(x63-x69)**2)**0.5

;track deviation of shift for each round
x80=x80+x70
x81=x81+x71
x82=x82+x72
x83=x83+x73
x84=x84+x74
x85=x85+x75
x86=x86+x76
x87=x87+x77
x88=x88+x78
x89=x89+x79

x79=(x70+x71+x72+x73+x74+x75+x76+x77+x78+x79)/10 ; average distance from mean shift

SD IC x11,x30,x67,x68,x69,x66,x79 ;pclnum,rt,x,y,rtdev,shdev
summary_ic

LB1 ; next particle x11
UD ICE
<apsrdir>/lastdall_tmp
DE
<apsrdir>/lastdall_tmp
SD IC COPY
summary_ic
<apsrsum>
SD IC E
summary_ic

; divide cumulative error by number of particles
SD /     ROUND      RT-ERR      SH-ERR
<errordoc>
x11=1
x90=x90/x10
x80=x80/x10
SD x11,x11,x90,x80
<errordoc>
x11=2
x91=x91/x10
x81=x81/x10
SD x11,x11,x91,x81
<errordoc>
x11=3
x92=x92/x10
x82=x82/x10
SD x11,x11,x92,x82
<errordoc>
x11=4
x93=x93/x10
x83=x83/x10
SD x11,x11,x93,x83
<errordoc>
x11=5
x94=x94/x10
x84=x84/x10
SD x11,x11,x94,x84
<errordoc>
x11=6
x95=x95/x10
x85=x85/x10
SD x11,x11,x95,x85
<errordoc>
x11=7
x96=x96/x10
x86=x86/x10
SD x11,x11,x96,x86
<errordoc>
x11=8
x97=x97/x10
x87=x87/x10
SD x11,x11,x97,x87
<errordoc>
x11=9
x98=x98/x10
x88=x88/x10
SD x11,x11,x98,x88
<errordoc>
x11=10
x99=x99/x10
x89=x89/x10
SD x11,x11,x99,x89
<errordoc>
SD E
<errordoc>

VM
echo ROUND 1 average rotation deviation {%F7.3%x90} degrees and shift deviation {%F7.3%x80} pixels
VM
echo ROUND 2 average rotation deviation {%F7.3%x91} degrees and shift deviation {%F7.3%x81} pixels
VM
echo ROUND 3 average rotation deviation {%F7.3%x92} degrees and shift deviation {%F7.3%x82} pixels
VM
echo ROUND 4 average rotation deviation {%F7.3%x93} degrees and shift deviation {%F7.3%x83} pixels
VM
echo ROUND 5 average rotation deviation {%F7.3%x94} degrees and shift deviation {%F7.3%x84} pixels
VM
echo ROUND 6 average rotation deviation {%F7.3%x95} degrees and shift deviation {%F7.3%x85} pixels
VM
echo ROUND 7 average rotation deviation {%F7.3%x96} degrees and shift deviation {%F7.3%x86} pixels
VM
echo ROUND 8 average rotation deviation {%F7.3%x97} degrees and shift deviation {%F7.3%x87} pixels
VM
echo ROUND 9 average rotation deviation {%F7.3%x98} degrees and shift deviation {%F7.3%x88} pixels
VM
echo ROUND 10 average rotation deviation {%F7.3%x99} degrees and shift deviation {%F7.3%x89} pixels

x23=(x80+x81+x82+x83+x84+x85+x86+x87+x88+x89)/10 ; average shift deviation
x24=(x90+x91+x92+x93+x94+x95+x96+x97+x98+x99)/10 ; average rotation deviation

VM
echo The average particle deviates by {%F7.3%x24} degrees from its mean rotation and {%F7.3%x23} pixels from its mean shift

LB99
RE

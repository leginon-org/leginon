Appion Install Manual: Steps to install Appion on a CentOS 5.3 machine
=====================
The Appion Team

= Authors =

Jonathan Brownell, Bridget Carragher, Anchi Cheng, Denis Fellmann, Christopher Irving, Gabe Lander, Pick-wei Lau, Dmitry Lyumkis, Anke Mulder, Sunita Nayak, Clint S. Potter, Jim Pulokas, Joel Quispe, Scott Stagg, Neil R. Voss, and Craig Yoshioka

= Introduction =

As of July 2009, this document is still incomplete.

You will need 3 servers:

- MySQL database
- Web server
- PBS processing machines


Fortunately, all 3 servers can run on the same machine

= Install CentOS operating system =

[NOTE]
CentOS vs. RHEL
	//CentOS is the exact same as Red Hat Enterprise Linux (RHEL), except that it is free and supported by the community//

The reason I mention CentOS is because I wanted to keep the guide really simple. Another student and I run appion on Fedora 10 and we've run appion on SuSe in the past. I know we gotten most bits working on MacOSX, but some of the python libraries contain ancient Fortran code that does not compile easily on a Mac. But CentOS is certainly not a requirement in general, it is just that the first iteration of the guide is written for CentOS.

== Download the latest ISO disk of CentOS ==

+ ISO files are available at
 - http://wiki.centos.org/Download
+ Click on i386 for 32bit machines or x86_64 for 64bit machines
+ Pick a mirror and download 'CentOS-5.3-x86_64-bin-DVD.iso' file
+

== Burn ISO file to DVD disk ==

Use dvdrecord in Linux to burn disk
``` $ dvdrecord -v -dao gracetime=10 dev=/dev/dvd speed=16 CentOS-5.3-i386-bin-DVD.iso

== Install CentOS 5 with default packages ==

- Only "Desktop - GNOME" is assumed to be installed
- More information available at [CentOS Documentation http://wiki.centos.org/Documentation]


== Add yourself to the sudoers file ==

.Add this line below the root version:
``` $ username ALL=(ALL)       ALL


= Download additional software =

== Install the additional package repositories ==

[NOTE]
There are several additional CentOS repositories that you can install.
These repositories provide additional packages, such as patented software (MP3 players),
closed source applications (Flash plugin, Adobe Acrobat Reader)
and lesser used packages (python numpy, Gnu Scientific Library).
But some repositories install packages over other packages,
which can cause problems and conflicts (ATrpms is bad at this). So I recommend only installing
EPEL and RPM Fusion. Read more here:
[CentOS Additional Repositories http://wiki.centos.org/AdditionalResources/Repositories]

=== Extra Packages for Enterprise Linux (EPEL) ===
- http://fedoraproject.org/wiki/EPEL
- contains a wealth of packages required for appion

.Download repository rpm and install
``` $ sudo rpm -Uvh http://download.fedora.redhat.com/pub/epel/5/`uname -i`/epel-release-5-3.noarch.rpm


=== RPM Fusion ===
- http://rpmfusion.org/
- good for mp3 and other patent limited software

.Download repository rpms and install
```
$ sudo rpm -Uhv http://download1.rpmfusion.org/free/el/updates/testing/5/`uname -i`/rpmfusion-free-release-5-0.1.noarch.rpm
$ sudo rpm -Uvh http://download1.rpmfusion.org/nonfree/el/updates/testing/5/`uname -i`/rpmfusion-nonfree-release-5-0.1.noarch.rpm
```


== Update current packages ==

.Update the updater to make life easier
``` $ sudo yum -y update yum
.Update all packages
``` $ sudo yum -y update

[NOTE]
Download was over 264 MB. If you have a slow internet connection you can setup presto/deltarpms, [see this email http://www.linux-archive.org/centos-development/222706-presto-deltarpm.html]

.If you have an Nvidia video card install the nvidia binary, will speed things up especially for chimera
``` $ sudo yum -y install nvidia-x11-drv

.Install Complete list of additional packages:
```
$ sudo yum -y install \
python-tools python-devel \ # general applications
subversion ImageMagick grace gnuplot \ # general applications
wxPython numpy scipy python-imaging \ #TILT PICKER
gcc-gfortran compat-gcc-34-g77 \ #FINDEM
gcc-objc fftw3-devel gsl-devel \ #ACE2
mysql mysql-server MySQL-python \ #Sinedon
httpd php php-mysql phpMyAdmin \ #DBEM
gcc-c++ openmpi-devel libtiff-devel \#Xmipp MPI
```
.Clean up packages to save drive space
``` $ sudo yum clean all
.Re-index the hard drive, this will come in handy later
``` $ sudo updatedb
.Reboot the computer
``` $ sudo reboot

== Download AMI software ==

[NOTE]
AMI software is available from two separate sites [our local servers http://ami.scripps.edu/software/]
and [Google Code http://code.google.com/p/appion/]

- **dbemtools**: web page interface to leginon and appion
 - **dbem**: web interface to pyAppion
 - **project**: for keeping separate projects and web logins
- **leginon**: only for image viewer and polygon tool
 - **pyami** r107, generic image processing
 - **numextension** r52: numpy extension library
 - **sinedon** r50: for MySQL interaction
 - **leginon** r5463: core gui libraries for manual pickers
- **pyappion** r3072: python processing pipeline
 - includes ACE1, ACE2, radermacher module, DoG Picker, TiltPicker, and FindEM


== Additional external software needed ==

=== Required ===

 - **EMAN** v1.9 cluster,
[download binary http://ncmi.bcm.tmc.edu/ncmi/software/software_details?selected_software=eman]
 - **UCSF Chimera** v1.2509, newer versions have problems,
[download binary http://www.cgl.ucsf.edu/chimera/olddownload.html]


=== Recommended ===

- **SPIDER** v15 or older, newest version not supported,
[download binary http://www.wadsworth.org/spider_doc/spider/docs/spi-register.html]
- **Xmipp** v2.2 or newer, for alignment, compile your own for openmpi support,
[download source http://xmipp.cnb.csic.es/twiki/bin/view/Xmipp/InstallingTheSoftware]
- **IMOD**, for tomography


=== Recommended, but costs money ===

- **MATLAB**, for ACE1
- **IMAGIC** v5, for alignment


= Compile and setup programs =

== Compile FindEM ==

- Goto pyappion/findem folder to make findem.exe

- Compile the libraries and binary
``` $ make

- Test findem.exe to see if it runs
``` $ make test

[WARNING]
Only if the first part fails, you must add the path to libg2c.so library file.
Otherwise skip to next section.

- locate libg2c.so library file
``` $ ls /usr/lib/gcc/`uname -i`-redhat-linux/3.4.6/libg2c.so
locate libg2c.so

- Edit Makefile with location of libg2c.so
``` $ nano Makefile

- Example: EXLIBS=-L/usr/lib/gcc/i386-redhat-linux/3.4.6/ -lg2c
- Re-compile


== Compile Ace2 ==

- Goto pyappion/ace2
- compile the libraries and binary
- test to see if program runs
```
$ make
$ ../bin/ace2.exe -h
$ ../bin/ace2correct.exe -h
```


== Compile Radermacher module ==

- Goto pyappion/radermacher

- compile the libraries and binary
``` $ python ./setup.py build

- install module globally
``` $ sudo python ./setup.py install

- test installed module
``` $ python
```
>>> import radermacher
>>> <Ctrl-D>
```


== Compile Numextension module ==

- Goto Leginon/numextension
- compile the libraries and binary
``` $ python ./setup.py build

- install module globally
``` $ sudo python ./setup.py install

- test installed module
``` $ python
```
>>> import numextension
>>> <Ctrl-D>
```


== Globally install python programs ==

- Go into directory with pyami, leginon and sinedon (from Leginon.tgz)
- Setup main python site-packages, depends on ARCH and VERSION

.select the appropriate site-packages folder
```
$ export SITEPKG=/usr/lib/python2.4/site-packages
$ export SITEPKG=/usr/lib64/python2.4/site-packages
$ export SITEPKG=/usr/lib64/python2.5/site-packages
```

- Install software to main site-packages
``` $ sudo rsync -vaP pyami-r??/ $SITEPKG/pyami/
``` $ sudo rsync -vaP leginon-r????/ $SITEPKG/leginon/
``` $ sudo rsync -vaP sinedon-r??/ $SITEPKG/sinedon/


== Setup leginon.cfg file in your home directory ==

- Go into leginon directory (from Leginon.tgz)
- Copy default.cfg to your home directory
``` $ cp config/default.cfg ~/leginon.cfg

- Create a directory for images
``` $ mkdir -p ~/leginon/images/

- Edit ~/leginon.cfg and add image path
``` $ nano ~/leginon.cfg
``` path: ~/leginon/images/


== Test PyAppion ==

- Go into pyappion directory
- Add leginon to PYTHONPATH
``` $ export PYTHONPATH="$SITEPKG/leginon:$PYTHONPATH"

- Add pyappion lib to PYTHONPATH
``` $ export PYTHONPATH="~/pyappion/lib:$PYTHONPATH"

- Run the test script
``` $ ./check.sh

- You can ignore EMAN, MATLAB, and chimera errors at this point


== Install Xmipp ==

- For more info, see http://xmipp.cnb.csic.es/twiki/bin/view/Xmipp/InstallingTheSoftware
- Go into Xmipp source directory
- Find openmpi directory
``` $ locate libmpi.so
``` /usr/lib/openmpi/1.2.5-gcc/lib/libmpi.so

- Setup Xmipp to use openmpi by changing three lines in SConstruct
``` $ cp SConstruct SConstruct.orig
``` $ nano SConstruct
```
opts.Add('MPI_INCLUDE', 'MPI headers dir ', '/usr/lib/openmpi/1.2.5-gcc/include/')
opts.Add('MPI_LIBDIR', 'MPI libraries dir ', '/usr/lib/openmpi/1.2.5-gcc/lib/')
opts.Add('MPI_LIB', 'MPI library', 'mpi')
```

- Compile
``` $ sudo mpi-selector --yes --system --set `rpm --qf '%{NAME}-%{VERSION}-gcc-%{ARCH}\n' -q openmpi`
``` $ export PATH=$PATH:/usr/lib/openmpi/1.2.5-gcc/bin
``` $ ./scons.configure
``` $ ./scons.compile


== Setup MySQL databases ==

- Set a MySQL root password, by default it is blank
``` $ mysqladmin -u root password NEWPASSWORD

- Create a new user, database, and give user access to databases
``` $ mysql -u root -p
```
mysql> CREATE USER 'appionuser';
mysql> CREATE DATABASE leginondata;
mysql> CREATE DATABASE projectdata;
mysql> CREATE DATABASE appiondata;
mysql> GRANT ALL PRIVILEGES ON leginondata.* TO appionuser@"%";
mysql> GRANT ALL PRIVILEGES ON projectdata.* TO appionuser@"%";
mysql> GRANT ALL PRIVILEGES ON appiondata.* TO appionuser@"%";
mysql> <Ctrl-D>
```

- Setup a sinedon.cfg in the home directory for all users
``` $ nano sinedon.cfg

- add the following lines to //sinedon.cfg//
```
[global]
host:	'server ip address'

[leginondata]
db:	dbemdata
user:	appionuser

[appionData]
db:	dbappiondata
user:	appionuser

[project]
db:	project
user:	appionuser
```

- Go into sinedon directory
- Fill databases with tables using maketables.py
``` $ ./maketables.py leginondata
``` $ ./maketables.py appionData
``` $ ./maketables.py project


== Install a PBS system ==

You'll need to install a [Portable Batch System http://en.wikipedia.org/wiki/Portable_Batch_System] for job submission, such as [TORQUE http://en.wikipedia.org/wiki/TORQUE_Resource_Manager] or
openPBS. I know Torque comes with Fedora 10, but not CentOS.

- An RPM is available in the EPEL testing section
``` $ sudo yum -y --enablerepo=epel-testing install torque

or another way to get packages

```
$ wget http://centos.karan.org/el5/extras/testing/`uname -i`/RPMS/torque-2.1.9-1.el5.kb.`uname -i`.rpm
$ #sudo yum -y localinstall torque-2.1.9-1.el5.kb.`uname -i`.rpm
$ sudo rpm -Uhv torque-2.1.9-1.el5.kb.`uname -i`.rpm
```


= Incomplete =

Sorry this document is NOT complete





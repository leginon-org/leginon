#!/bin/csh -f

# s_fpost: post s_fautoavg iterations. generates map, overplots etc. 
# 
# Note: In master_params set batch=1
#
# Input: .ner .far
# Output: .opp .map op.ps ll.ps 
# Usage: s_fpost infile number 'title' (map) (overplot) (snif)
#	(parenthesis indicate an optional field)
# Where:
#	infile = list of .ner and .far files to be averaged, avg.list
#	number = number of iterations across averaging steps
#	'title' = whatever title you want on your final output
#	(map) = creates the map and the ll files
#	(overplot) = turns on overplot flag
#	(snif) = turns on sniffing flag
#
# Edited by LSF/ABW 5/19/09

source phoelix_params

if ($s_verbose) echo `basename $0` $argv

## Check for required arguments
if ($#argv < 3 || $#argv > 7) goto usage:

set filelist = $argv[1]
set n        = $argv[2]
set finalresid = $argv[3]
set title    = "$argv[4]"

echo "finalresid" $finalresid
if (! -f $filelist || ! -r $filelist) then
    echo "${filelist}: file not available"
    exit 1
endif

## Check for optional flags
set mapflag = 0
set overplotflag = 0
set snifflag = 0
set flagcount = 5
while ($#argv >= $flagcount)
	if ($argv[$flagcount] == "map") set mapflag = 1
	if ($argv[$flagcount] == "overplot") set overplotflag = 1
	@ flagcount++
end

## Write some starting info
# Grab the filename
set filebase = $filelist:r
set filelog = $filebase.log

echo "Post averaging started at `date`..." >> $filelog
echo `basename $0` $argv >> $filelog

set finalfilep = avglist$n"_"$finalresid"p"

## Generate only for those files with maxresid smaller than finalresid and updown greater than minpupdown
if ($overplotflag || $snifflag || $mapflag) then
        if (-f $finalfilep.list) rm $finalfilep.list
        set numfiles = `cat avglist$n.fit | wc -l`
        set i = 1
        while ($i < $numfiles)
                set line = `head -$i avglist$n.fit | tail -1`
                set filefitf=$line[1]
                set residfitf=$line[4]
		set updownf=$line[8]
		set polarf=$line[3]
                set residf = `ee "int[$residfitf - $finalresid]"`
		set updowndifff = `ee "int[$updownf - $minupdown]"`
		@ i++
                set line = `head -$i avglist$n.fit | tail -1`
                set filefitn=$line[1]
                set residfitn=$line[4]
		set updownn=$line[8]
		set polarn=$line[3]
                set residn = `ee "int[$residfitn - $finalresid]"`
		set updowndiffn = `ee "int[$updownn - $minupdown]"`
		echo $filefitf $residf $updowndifff $polarf $polarn
		#if (($residf < 0) && ($updowndifff > 0) && ($polarf == $polarn) ) echo $filefitf >> $finalfilep.list
                if (($residf < 0) && ($updowndifff > 0)  ) echo $filefitf >> $finalfilep.list
		echo $filefitn $residn $updowndiffn $polarf $polarn
		#if (($residn < 0) && ($updowndiffn > 0) && ($polarf == $polarn) ) echo $filefitn >> $finalfilep.list
                if (($residn < 0) && ($updowndiffn > 0)  ) echo $filefitn >> $finalfilep.list
		@ i++
        end
        s_makeavg $finalfilep.list |& tee $finalfilep.OUTPUT

	## Plot the averaged LLs
	s_llplot $finalfilep.avg
	mv plot.int $finalfilep"ll".ps
endif


if ($mapflag) then

	## Invert contrast if necessary.  Flag set in master_params
	if ($cont == yes) then
		s_conchg $finalfilep.avg $finalfilep.opp

		## Generate hlf.dek file
		if (!(-f hlf.dek)) then
			set numll       = `grep LL $finalfilep.avg | wc -l`
			s_hlfdek $finalfilep $numll hlf.dek
		endif

		## Generate the map file (requires hlf.dek file we just wrote)
		s_newhlf $finalfilep.opp

	else if ($cont == no) then
		## Generate hlf.dek file
		if (!(-f hlf.dek)) then
			set numll       = `grep LL $finalfilep.avg | wc -l`
			s_hlfdek $finalfilep $numll hlf.dek
		endif

		## Generate the map file (requires hlf.dek file we just wrote)
		s_newhlf $finalfilep.avg
	endif

	## Generate Postscript output
	s_autocont 0 $finalfilep.map 0 10 1  5 5 5 $title 0 10
	mv plot.out $finalfilep.ps
endif

## Generate overplot only for those files included in average
if ($overplotflag) then
	s_overplot $finalfilep.raw
	mv plot.int $finalfilep"op".ps
endif

## Generate Sniffed Layer Lines
# Moved to s_sniffing
#if ($snifflag) then
#	tkll -o -f avglist$n.avg -d sniffit.dek -cut
#
#	cp cutfit.dek sniffit.dek
#	s_llcut $finalfile snif_template.cut sniffit.dek
#
#	s_snifflist $finalfilep.list fft.list
#	foreach file (`cat fft.list`)
#        	s_snifprep $file snif_template.cut |tee -a snif.OUTPUT
#	end
#endif

if($mapflag) then
	echo "MRC Map: $finalfilep.map ($finalfilep.map.rot)" >> $filelog
	echo "Map Postscript file: $finalfilep.ps" >> $filelog
	echo "Layer Lines:" $finalfilep.avg >> $filelog
	echo "Layer Lines Postscript file: $finalfilep"ll".ps" >> $filelog
endif
#if ($overplotflag) echo "Overplots Postscript file:" $finalfilep"op".ps >> $filelog
if ($snifflag == 1) echo "Sniffing has been completed, LL files tagged _sniffed.ner(.far)" >> $filelog

echo "Post averaging ended at `date`..." >> $filelog

cat $filelog

exit 0


## Print useful hint and quit
usage::
    echo "USAGE: s_autoavg file_list number 'title' template amps overplot snif"
    echo "         file_list = list of .ner and .far files to be averaged."
    echo "         number    = number of iterations across averaging steps."
    echo "         'title'   = whatever title you want on your final output."
    echo "         map  = optional map flag"
    echo "         overplot  = optional overplot flag"
#    echo "         snif = optional snif flag"
    exit 1

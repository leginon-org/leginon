#!/bin/sh
#
# vim: set syntax=tcl:                                          \
#                                                               \
# The next line allows us to pass the usual "-x" style          \
# flags to our application without wish trying to interpret     \
# them.  Note this renders the usual flags for wish, such       \
# as -display, inoperative                                      \
exec wish $0 -- ${1+"$@"}

#--------------- DO NOT REMOVE --------------------------#
#
# $Id: tkir,v 1.44.2.1 2006/01/26 19:30:52 sheehan Exp $
#
#--------------- DO NOT REMOVE --------------------------#


# Set a few required environment variables to default values if they're not
# set already:
if { [array get env SUPRIM_PATH] == "" } {
   set env(SUPRIM_PATH) /usr/local
}
if { [array get env SUPRIM_TK_LIB] == "" } {
   set env(SUPRIM_TK_LIB) $env(SUPRIM_PATH)/share/suprim/tcl
}
if { [array get env RGBSUPRIM] == "" } {
   set env(RGBSUPRIM) $env(SUPRIM_PATH)/share/suprim/rgb
}

# Startup files (initialization, procedures etc.)

source $env(SUPRIM_TK_LIB)/tkll_init.tcl
source $env(SUPRIM_TK_LIB)/tkir_init.tcl
source $env(SUPRIM_TK_LIB)/tkir_common.tcl
source $env(SUPRIM_TK_LIB)/tkir_print.tcl
source $env(SUPRIM_TK_LIB)/tkir_procs.tcl
source $env(SUPRIM_TK_LIB)/tkll_procs.tcl
source $env(SUPRIM_TK_LIB)/tkir_bindings.tcl

if {$tkir(Load_Windex)} {
   source $env(SUPRIM_TK_LIB)/tkir_lattice.tcl
   LoadTklatLib
} else {
   set tkir(TklatAvailable) 0
}

# Preferences 
LoadPreferences

# Load shared libraries
LoadDipLib

# Set up box sizes
CookieCutterSetBoxSize x


# Set up unique temporary filename
set pid [pid]                                    ;# Used for temp. file
set tkir(Tempfile) "/tmp/tkir.stdin.$pid"        ;# Temp file from stdin

# We can make a link to tkir and call it something else, and this can then be
# used to default to a certain mode.  The same program can act differently 
# depending on how it's called.  First, we should remove any pathname component
# from the command name (if we're called as ./tkir for example)
set called_as [file tail $argv0]

# Now check how we were invoked
switch -- $called_as {
   $tkir(Suprim_Prefix)tkir {
   }
   $tkir(Suprim_Prefix)tksel {
      set tkir(Mode) $tkir(ModeBoxOrtho)	;# tkir -box
   }
   $tkir(Suprim_Prefix)tklat {			;# tkir -lattice
      set tkir(Load_Windex) 1
      set tkir(Mode) $tkir(ModeLat)
   }
   default {                               
   }
}

# Parse command-line arguments
if {$argc} {                                     
   for {set n 0} {$n < $argc} {incr n} {
      set arg [lindex $argv $n]
      switch -- $arg {
         -help -                                 
         -h -
         -usage -
         -u {
            ExitUsage $called_as
         }
         -version -
         -v {
            puts "$MyName Version $MyVersion"
            exit
         }
         -vv {
            puts "\n$MyName Version $MyVersion"
            puts " - Tcl/Tk $tk_patchLevel"
            puts " - $tkir(libdipver)"
            #Tkll#puts " - $tkir(libtkllver)"
            if {$tkir(TklatAvailable)} {
               puts " - $tkir(libtklatver)"
            }
            if {! [catch {exec $tkir(Suprim_Prefix)suprim}]} {
               puts " - [exec $tkir(Suprim_Prefix)suprim]"
            }
            if {! [catch {exec $tkir(Suprim_Prefix)phoelix}]} {
               puts " - [exec $tkir(Suprim_Prefix)phoelix]"
            }
            ReportPlugins
            exit
         }
         -show -                                 
         -s {                                    
            set tkir(AllowSelection) 0
            set tkir(Mode) $tkir(ModeDisplay)
         }
         -measure -
         -ms {
            set tkir(Mode) $tkir(ModeMeasure)
         }
         -spacing {
            incr n
            set tkir(MeasureSpacing) [lindex $argv $n]
         }
         -box -
         -b {
            set tkir(Mode) $tkir(ModeBoxOrtho)
         }
	 -prefix {
            incr n
            set tkir(BoxPrefix) [lindex $argv $n]
	 }
         -bx {
            incr n
            set tkir(CookieSizeX) [lindex $argv $n]
         }
         -by {
            incr n
            set tkir(CookieSizeY) [lindex $argv $n]
         }
         -snakebox -
         -snake -
         -sn {
#            set tkir(Mode) $tkir(ModeBoxSnake)
         }
         -mark -                                 
         -m {                                    
            set tkir(AllowSelection) 1
            set tkir(Mode) $tkir(ModeEdit)
         }
         -lattice -
         -windex - 
         -tklat -
         -lat {
            if {$tkir(TklatAvailable)} {
               set tkir(Mode) $tkir(ModeLat)
            } else {
               puts "Lattice tools disabled.  Running in display only mode..."
               set tkir(Mode) $tkir(ModeDisplay)
            }
         }
         -inverse -
         -inv -
         -i {
            set tkir(InverseLattice) 1
         }
         -j {
            incr n
            set tkir(Imagefile2) [lindex $argv $n]
         }
         -file -                                 
         -f {                                    
            incr n
            set tkir(Imagefile) [lindex $argv $n]
            set tkir(Filenames,$tkir(Filecount)) [lindex $argv $n]
            incr tkir(Filecount)
            if {$tkir(Imagefile) == ""} {
               ExitUsage $called_as
            }
            set nextarg [string range [lindex $argv [expr $n + 1]] 0 0]
            while {$nextarg != "-" && $nextarg != "" && $n < $argc} {
               incr n
               set tkir(Filenames,$tkir(Filecount)) [lindex $argv $n]
               set nextarg [string range [lindex $argv [expr $n + 1]] 0 0]
               incr tkir(Filecount)
            }
         }
         -tile {
            incr n
            set tkir(TileImages) [lindex $argv $n]
         }
         -tileborder -
         -tb {
            incr n
            set tkir(TileImageBorder) [lindex $argv $n]
         }
         -data -                                 
         -d {                                    
            incr n                               
            set tkir(Datafile) [lindex $argv $n]
            if {$tkir(Datafile) == ""} {
               ExitUsage $called_as
            }
         }
         -direction -
         -dirn -
         -dn {
            incr n
            set tkir(Directionfile) [lindex $argv $n]
            if {$tkir(Directionfile) == ""} {
               ExitUsage $called_as
            }
         }
         -overwrite -                            
         -o {                                    
            set tkir(Overwrite) 1                 
            set WarningLabel $tkir(WarningLabel)
         }
         -label -                                
         -lab - 
         -l {
            set tkir(TagsAreDisplayed) 1
         }
         -nolabel -                              
         -nolab -                                
         -nl {
            set tkir(TagsAreDisplayed) 0
         }
         -brightness -
         -contrast -
         -range -
         -br {
            set tkir(InitialDisplayBright) 1
         }
         -crosssize -                            
         -cross -
         -ns {
            incr n
            set tkir(CrossSize) [lindex $argv $n]
         }
         -coordinates -                          
         -coord -                                
         -c {
            set tkir(InitialDisplayPoints) 1
         }
         -colourmap -
         -colormap -
         -cmap -
         -cm {
            incr n
            set tkir(Cmap) [lindex $argv $n]
         }
         -scalefactor -
         -multiplier -
         -scale -
         -sca - 
         -mul -
         -sc -
         -x {
            incr n
            set tkir(ZoomFactor)  [lindex $argv $n]
            set tkir(ZoomFactorX) $tkir(ZoomFactor)
            set tkir(ZoomFactorY) $tkir(ZoomFactor)
            ZoomComputeCounter $tkir(ZoomFactorX) $tkir(ZoomFactorY)
         }
         -startnumber -
         -start -
         -st {
            incr n
            set tkir(DatafileNum) [lindex $argv $n]
         }
         -master_params -
         -mp {
            incr n
            set tkir(MasterParams) [lindex $argv $n]
            Check_For_Paramsfile $tkir(MasterParams)
         }
         -phoelix_params -
         -pp {
            incr n
            set tkir(PhoelixParams) [lindex $argv $n]
            Check_For_Paramsfile $tkir(PhoelixParams)
         }
         -min {
            incr n
            set tkir(MinRange) [expr double([lindex $argv $n])]
         }
         -max {
            incr n
            set tkir(MaxRange) [expr double([lindex $argv $n])]
         }
         -debug {
            set tkir(Debug) 1
            puts "Debug mode enabled"
            # Debug mode requires the commandserver, so start that here
            StartCommandServer $MyName
         }
         -iwidgets -
         -iwidget -
         -iw {
            LoadIwidgets
         }
         -trace {
            set tkir(TraceFlag) 1
            puts "Trace mode enabled"
         }
         -diptrace {
            puts "libtkImgDip trace mode enabled"
            dip trace on
         }
         -geometry {
            incr n
            set tkir(main_window_geometry) [lindex $argv $n]
         }
         -noinfo {
            set tkir(ShowImageInfoBar) 0
         }
         -nomenu {
            set tkir(ShowMenuBar) 0
         }
         -commandserver -
         -server {
            StartCommandServer $MyName
         }
         -noplugins -
         -noplugin {
            set tkir(LoadPlugins) 0
         }
         default {
         }
      }
   }
}



# Check for a couple of incompatible arguments
if {$tkir(Overwrite) == 1 && $tkir(Datafile) == ""} {
   ExitError "Error: when specifying the -o option, you MUST provide a data filename with   \n       the '-d' option."
}

# Load file describing the GUI
source $env(SUPRIM_TK_LIB)/tkir_gui.tcl
source $env(SUPRIM_TK_LIB)/tkll_gui.tcl

# Plugins.  We load these relatively late to allow plugins to modify features
# in the GUI as well as certain global variables plugin_var
LoadPlugins $argv

# Process any startup requests (read image, etc.)
if {$tkir(Imagefile) == ""} {	
   set tkir(InputIsStdin) 1
   set tkir(Imagefile) "standard input"
}

if {$tkir(Imagefile) != ""} {
   if {! $tkir(InputIsStdin)} {
      if {! [file exists $tkir(Imagefile)]} {
         puts "$tkir(Imagefile): file not found"
         exit;
      }
      if {! [file readable $tkir(Imagefile)]} {
         puts "$tkir(Imagefile): permission denied"
         exit;
      }
   } else {
      ExitUsage $called_as                     
   }
   if {$tkir(TileImages) == 0} {
      OpenImage noninteractive

   } else {
      set tkir(location) ""
      set tkir(value) ""
      set tkir(AllowSelection) 0
      set tkir(Mode) $tkir(ModeDisplay)

      .equals configure -text ""
      .image configure -text ""
      .data configure -text ""
      .modetype configure -text ""

      TileImages
   }
}

# See if Phoelix "params" files are explicitly set, otherwise use a default
if {$tkir(MasterParams) != "master_params"} {
   if {! [file exists $tkir(MasterParams)]} {
      set tkir(MasterParams) "master_params"
   }
}
if {$tkir(PhoelixParams) != "phoelix_params"} {
   if {! [file exists $tkir(PhoelixParams)]} {
      set tkir(MasterParams) "master_params"
   }
}

# Some GUI changes based on preferences and/or command-line options
if {$tkir(AllowSelection) == 0} {
   .menubar.tools.menu entryconfig $tkir(DisplayPoints) -state disabled
   .menubar.display.menu entryconfig $tkir(ShowNumbers) -state disabled
}

if {$tkir(TagsAreDisplayed) == 1} {
   .menubar.display.menu entryconfigure $tkir(ShowNumbers) \
      -label $tkir(HideNumbers) -command {HideNumbers update}
}

if {$tkir(InitialDisplayPoints) == 1} {
   DisplayPoints
}

if {$tkir(InitialDisplayBright) == 1} {
   DisplayRange
}

UpdateFunction

if {$tkir(Mode) == $tkir(ModeLat)} {
   .cookie.latcompute configure -state normal
}

if {$tkir(Mode) == $tkir(ModeMeasure)} {
   DisplayDistance
}

if {$tkir(Datafile) != ""} {
   # Additional plugins may not have ascii data files, we'll just trap
   # for this at the moment...
   catch { OpenData noninteractive }
}

if {$tkir(Directionfile) != ""} {
   SelectDirection
}


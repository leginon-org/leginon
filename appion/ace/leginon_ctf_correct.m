% leginon_ctf_correct is a  wrapper script for executing ctfcorrect. 
% The only part which a user needs to change is written in between 
% %%%% User Setup and %% End User Setup
%
% This program asssumes that the mat files containing CTF, envelope 
% function and noise spectrum parameters have been generated by ACE. 
%
% The following variables need to be set
%
%
% 1) leginon1  : Set it to 1 if you are using leginon 1. Setting this
%                varibale would also mean that you have to manually 
%                give the values of Pixel Size(ps) and Kilovolts(kv). 
%                If leginon 1 is 0, the program assumes that the database 
%                type is leginon 2. ps and kv are automatically pulled 
%                out for leginon 2 database. 
%
% 2) expname   : Name of the experiment
% 
% 3) indirname : The output directory where ACE has stored all files. 
%                This serves as the input directory for leginon_ctf_correct.
%                leginon_ctf_correct assumes that ACE has created the
%                directory indirname/expname and stored results in it.
%
% 4) typelist  : A vector which tells the program to pull out files 
%                of specific file type.File type should be 1, 2 or 3 for 
%                focus, far from focus and near to focus respectively.
%                Option 4 allows you to use the data of far from focus 
%                images and use it for near to focus images. It calculates 
%                the defocus difference of the fff and ntf images from the 
%                database and applies the difference to the defocus
%                calculated using fff images. All other CTF parameters 
%                are assumed to remain the same for fft and ntf images.
%
% 5) correctdir: The directory where the correct MRC files will be stored. 
%                This directory will be created inside indirname/expname/ 
%                directory.
%
% 6) phaseonly: Set to 1 to correct only the CTF phase. For complete CTF 
%               correction ( Phase and amplitude ), set it to 0. 
% 7) outext   : Set to 0 if you want the output mrc file to have the same 
%               name as input mrc file. If set to 1 an extension is added 
%               to the correct file 
% 8) ext      : If outext is 1 , the ext specifies the extension that you
%               want for the corrected file. The default is .ctf_ph and 
%               .ctf_ph_ampl for phase only and phase and amplitude
%               correction respectively.

%
% Note: The program assumes files are stored in leginon 1 or leginon 2 format 
%       For example in leginon 2 the focus images are of type *foc.mrc. 
%       However a user might have a file not conforming to leginon 1 or 
%       leginon 2. In that case the file filters should be changed to 
%       accomodate user's file. 

clear all
%%%%%%%%% User Setup
leginon1 = 0; % Tell the program if the database is  Leginion 1    
expname = '04apr14b'; % Experiment name 
indirname = '/ctf/'; 
correctdir = 'correct1/';
typelist = [4] ;
phaseonly = 1; 
outext = 1;
if(outext==1) 
  if(phaseonly) 
    ext = '.ctf_ph';
  else 
    ext = '.ctf_ph_ampl';
  end 
end 

%%%%%%%%%% End User Setup 
fprintf('\nleginon1 = %d \nexpname = %s\n',leginon1,expname); 
fprintf('indirname = %s \ncorrectdir = %s\n',indirname,correctdir); 
fprintf('typelist = %s \nphaseonly = %d \noutext = %d\n',num2str(typelist),phaseonly,outext); 
if(outext) 
  fprintf('ext = %s\n',ext); 
end 
fprintf('If the above information is correct type "return", else use "CTRL c" to exit program\n'); 
keyboard

warning off all

if(indirname(end)~='/'); 
  indirname = strcat(indirname,'/'); 
end 
if(correctdir(end)~='/'); 
  coreectdir  = strcat(correctdir,'/'); 
end 
indirname = strcat(indirname,expname,'/'); 
mkdir(indirname,correctdir); 
types = 0; 
while(types < length(typelist))
  types = types+1; 
  filetype = typelist(types); 
    switch filetype 
    case 1  
      if(leginon1) 
	matfilelist = '*.*.*.foc.mrc.mat'; 
      else 
	matfilelist = strcat('*foc.mrc.mat'); 
      end 
    case 2
      if(leginon1) 
	matfilelist = '*.*.*.*.002.mrc.mat'; 
      else 
	matfilelist = strcat('*efar.mrc.mat'); 
      end 
    case 3
      if(leginon1) 
	matfilelist = '*.*.*.*.001.mrc.mat'; 
      else 
	matfilelist = strcat('*enr.mrc.mat'); 
      end 
    case 4
      if(leginon1) 
	matfilelist = '*.*.*.*.002.mrc.mat'; 
      else 
	matfilelist = strcat('*efar.mrc.mat'); 
      end 
    otherwise 
      fprintf('File type should be 1, 2 , 3 or 4 for focus, fff and ntf respectively.\n'); 
      return; 
  end 
  matlist = dir(strcat(indirname,'matfiles/',matfilelist)); 
  list = matlist; 
  for i=1:length(matlist) 
    if(typelist(types)==4) 
      if(leginon1) 
	list(i).name = strcat(matlist(i).name(1:end-11),'001.mrc'); 
      else 
	list(i).name = strcat(matlist(i).name(1:end-12),'enr.mrc'); 
      end
    else 
      list(i).name = matlist(i).name(1:end-4); 
    end 
  end 
  
  
  if(leginon1) 
%   driver='org.gjt.mm.mysql.Driver';
%   db='leginon';
%   dbserver='jdbc:mysql://cronus1.scripps.edu/';
%   user='anonymous';
%   pass='';
%   url=strcat(dbserver,db);
%   conn = database(db, user, pass, driver, url);
  conn = connect_db('leginon'); 
  query = strcat('select Prefix as Experiment, ImagePath as Path from ExperimentInfo where Prefix like "',expname,'"'); 
  curs = exec(conn, query);
  setdbprefs('DataReturnFormat','cellarray');
  result = fetch(curs);
  dirname = cell2mat(result.Data(2)); 
  dirname  = strcat(dirname,'/');
  
  if(typelist(types)==4)
    query = strcat('select i.filename, p.defocus from ImageInfo i natural left join Presets p where i.format="mrc" and  i.filename like "',list(i).name,'%";') ;
    curs = exec(conn, query);
    setdbprefs('DataReturnFormat','cellarray');
    result = fetch(curs);
    dfenr = cell2mat(result.Data(2))*1e-9;  
  end 

  else 
%   driver='org.gjt.mm.mysql.Driver';
%   db='dbemdata';
%   dbserver='jdbc:mysql://cronus1.scripps.edu/';
%   user='spmallick';
%   pass='satya1';
%   url=strcat(dbserver,db);
%   conn = database(db, user, pass, driver, url);
  conn = connect_db('dbemdata');
  query = strcat('select Name as Experiment, `image path` as Path from SessionData where name like "',expname,'"');
  curs = exec(conn, query);
  setdbprefs('DataReturnFormat','cellarray');
  result = fetch(curs);
  dirname = cell2mat(result.Data(2)); 
  dirname  = strcat(dirname,'/');
  
  if(typelist(types)==4)
    query = strcat('select scope.defocus from AcquisitionImageData a left join ScopeEMData scope on (scope.`DEF_id`=a.`REF|ScopeEMData|scope`) left join SessionData s1 on (s1.`DEF_id`=a.`REF|SessionData|session`) where a.`MRC|image` = "',list(i).name,'"');
    curs = exec(conn, query);
    setdbprefs('DataReturnFormat','numeric');
    result = fetch(curs);
    dfenr = result.Data;
  end 
end 


  for i=1:length(list) 
    
    load(strcat(indirname,'matfiles/',matlist(i).name));
    
    
    if(ctfparams~=-1)
      if((abs(dforig)-mean(ctfparams(1:2)))>1e-6)
	ctfparams(1) = abs(dforig); 
	ctfparams(2) = abs(dforig); 
      end 
      if(typelist(types)==4) 
	ctfparams(1) = ctfparams(1) - abs(dforig-dfenr); 
	ctfparams(2) = ctfparams(2) - abs(dforig-dfenr); 
      end 
      
      im = readmrc(strcat(dirname,list(i).name));
      tic 
      im_correct = ctfcorrect(im,ctfparams,scopeparams,phaseonly);
      if(outext) 
	writemrc(im_correct,strcat(indirname,correctdir,list(i).name,ext),'float'); 
      else 
	writemrc(im_correct,strcat(indirname,correctdir,list(i).name),'float'); 
      end 
      if(typelist(types)==4)
        if(outext)  
	fprintf('%s %f %f %f %f\n',strcat(list(i).name,ext),abs(dfenr)*1e6,ctfparams(1)*1e6,ctfparams(2)*1e6,toc); 
      else 
      	fprintf('%s %f %f %f %f\n',list(i).name,abs(dfenr)*1e6,ctfparams(1)*1e6,ctfparams(2)*1e6,toc); 
      end 
      
      else  
	if(outext)  
	  fprintf('%s %f %f %f %f\n',strcat(list(i).name,ext) ,abs(dforig)*1e6,ctfparams(1)*1e6,ctfparams(2)*1e6,toc); 
	else 
	  fprintf('%s %f %f %f %f\n',list(i).name ,abs(dforig)*1e6,ctfparams(1)*1e6,ctfparams(2)*1e6,toc); 
	end
      end    
    end
  end 
    
  end
  close(curs);

